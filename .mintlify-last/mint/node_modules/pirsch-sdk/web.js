"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.Pirsch = exports.PirschWebClient = void 0;
const common_1 = require("./common");
const constants_1 = require("./constants");
const axios_1 = __importStar(require("axios"));
/**
 * Client is used to access the Pirsch API.
 */
class PirschWebClient extends common_1.PirschCommon {
    /**
     * The constructor creates a new client.
     *
     * @param {object} configuration You need to pass in the **Hostname** and **Access Token** you have configured on the Pirsch dashboard.
     * It's also recommended to set the proper protocol for your website, else it will be set to `https` by default.
     * All other configuration parameters can be left to their defaults.
     * @param {string} configuration.baseUrl The base URL for the pirsch API
     * @param {number} configuration.timeout The default HTTP timeout in milliseconds
     * @param {string} configuration.identificationCode The identification code
     *
     */
    constructor(configuration) {
        super();
        if ("clientId" in configuration || "clientSecret" in configuration) {
            throw new Error("Do not pass OAuth secrets such as 'clientId' or 'clientSecret' to the web client!");
        }
        if ("accessToken" in configuration) {
            throw new Error("Do not pass secrets such as 'accessToken' to the web client!");
        }
        const { baseUrl = constants_1.PIRSCH_DEFAULT_BASE_URL, timeout = constants_1.PIRSCH_DEFAULT_TIMEOUT, identificationCode, hostname, } = configuration;
        this.assertIdentificationCodeCredentials({ identificationCode });
        this.baseUrl = baseUrl;
        this.timeout = timeout;
        this.identificationCode = identificationCode;
        this.hostname = hostname;
        this.httpClient = axios_1.default.create({ baseURL: this.baseUrl, timeout: this.timeout });
    }
    /**
     * hit sends a hit to Pirsch.
     *
     * @param hit optional override data for the request.
     */
    hit(hit) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = Object.assign(Object.assign({}, this.hitFromBrowser()), hit);
            const parameters = this.browserHitToGetParameters(data);
            if (data.dnt === "1") {
                return;
            }
            yield this.get(constants_1.PirschEndpoint.HIT, { parameters });
        });
    }
    /**
     * event sends an event to Pirsch.
     *
     * @param name the name for the event
     * @param duration optional duration for the event
     * @param meta optional object containing metadata (only scalar values, like strings, numbers, and booleans)
     * @param hit optional override data for the request
     */
    event(name, duration = 0, meta, hit) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = Object.assign(Object.assign({}, this.hitFromBrowser()), hit);
            if (data.dnt === "1") {
                return;
            }
            yield this.post(constants_1.PirschEndpoint.EVENT, Object.assign({ identification_code: this.identificationCode, event_name: name, event_duration: duration, event_meta: this.prepareScalarObject(meta) }, data), { headers: { "Content-Type": "application/json" } });
        });
    }
    /**
     * customHit sends a hit to Pirsch.
     *
     * @param hit data for the request.
     */
    customHit(hit) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = this.browserHitToGetParameters(hit);
            if (hit.dnt === "1") {
                return;
            }
            yield this.get(constants_1.PirschEndpoint.HIT, { parameters });
        });
    }
    /**
     * customEvent sends an event to Pirsch.
     *
     * @param name the name for the event
     * @param duration optional duration for the event
     * @param hit data for the request
     * @param meta optional object containing metadata (only scalar values, like strings, numbers, and booleans)
     */
    customEvent(name, duration = 0, hit, meta) {
        return __awaiter(this, void 0, void 0, function* () {
            if (hit.dnt === "1") {
                return;
            }
            yield this.post(constants_1.PirschEndpoint.EVENT, Object.assign({ identification_code: this.identificationCode, event_name: name, event_duration: duration, event_meta: this.prepareScalarObject(meta) }, hit), {
                headers: { "Content-Type": "application/json" },
            });
        });
    }
    /**
     * hitFromBrowser returns the required data to send a hit to Pirsch.
     *
     * @returns Hit object containing all necessary fields.
     */
    hitFromBrowser() {
        const element = {
            url: this.generateUrl(),
            title: document.title,
            referrer: document.referrer,
            screen_width: screen.width,
            screen_height: screen.height,
        };
        if (navigator.doNotTrack === "1") {
            element.dnt = navigator.doNotTrack;
        }
        return element;
    }
    browserHitToGetParameters(data) {
        const hit = {
            nc: Date.now(),
            code: this.identificationCode,
            url: data.url,
        };
        if (data.title) {
            hit.t = data.title;
        }
        if (data.referrer) {
            hit.ref = data.referrer;
        }
        if (data.screen_width) {
            hit.w = data.screen_width;
        }
        if (data.screen_height) {
            hit.h = data.screen_height;
        }
        return hit;
    }
    generateUrl() {
        const url = this.hostname ? location.href.replace(location.hostname, this.hostname) : location.href;
        return url.slice(0, constants_1.PIRSCH_URL_LENGTH_LIMIT);
    }
    get(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.httpClient.get(url, this.createOptions(Object.assign({}, options)));
                return result.data;
            }
            catch (error) {
                const exception = yield this.toApiError(error);
                throw exception;
            }
        });
    }
    post(url, data, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.httpClient.post(url, data, this.createOptions(options !== null && options !== void 0 ? options : {}));
                return result.data;
            }
            catch (error) {
                const exception = yield this.toApiError(error);
                throw exception;
            }
        });
    }
    toApiError(error) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (error instanceof common_1.PirschApiError) {
                return error;
            }
            if (error instanceof axios_1.AxiosError) {
                return new common_1.PirschApiError((_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 400, (_c = error.response) === null || _c === void 0 ? void 0 : _c.data);
            }
            if (error instanceof Error) {
                return new common_1.PirschUnknownApiError(error.message);
            }
            return new common_1.PirschUnknownApiError();
        });
    }
    createOptions({ headers, parameters }) {
        return {
            headers,
            params: parameters,
        };
    }
}
exports.PirschWebClient = PirschWebClient;
exports.Pirsch = PirschWebClient;
exports.Client = PirschWebClient;
