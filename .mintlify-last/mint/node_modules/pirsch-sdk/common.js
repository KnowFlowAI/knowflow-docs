"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PirschUnknownApiError = exports.PirschInvalidAccessModeApiError = exports.PirschDomainNotFoundApiError = exports.PirschApiError = exports.PirschCommon = void 0;
const constants_1 = require("./constants");
class PirschCommon {
    assertOauthCredentials({ clientId, clientSecret }) {
        if (clientId.length !== constants_1.PIRSCH_CLIENT_ID_LENGTH) {
            throw new Error(`Invalid Client ID, should be of length '${constants_1.PIRSCH_CLIENT_ID_LENGTH}'!`);
        }
        if (clientSecret.length !== constants_1.PIRSCH_CLIENT_SECRET_LENGTH) {
            throw new Error(`Invalid Client ID, should be of length '${constants_1.PIRSCH_CLIENT_ID_LENGTH}'!`);
        }
    }
    assertAccessTokenCredentials({ accessToken }) {
        if (!accessToken.startsWith(constants_1.PIRSCH_ACCESS_TOKEN_PREFIX)) {
            throw new Error(`Invalid Access Token, should start with '${constants_1.PIRSCH_ACCESS_TOKEN_PREFIX}'!`);
        }
        if (accessToken.length !== constants_1.PIRSCH_ACCESS_TOKEN_LENGTH + constants_1.PIRSCH_ACCESS_TOKEN_PREFIX.length) {
            throw new Error(`Invalid Access Token, should be of length '${constants_1.PIRSCH_ACCESS_TOKEN_LENGTH}'!`);
        }
    }
    assertIdentificationCodeCredentials({ identificationCode }) {
        if (identificationCode.length !== constants_1.PIRSCH_IDENTIFICATION_CODE_LENGTH) {
            throw new Error(`Invalid Identification Code, should be of length '${constants_1.PIRSCH_IDENTIFICATION_CODE_LENGTH}'!`);
        }
    }
    prepareScalarObject(value) {
        if (!value) {
            return value;
        }
        return Object.fromEntries(Object.entries(value).map(([key, value]) => {
            if (typeof value === "string") {
                return [key, value];
            }
            return [key, value.toString()];
        }));
    }
}
exports.PirschCommon = PirschCommon;
class PirschApiError extends Error {
    constructor(code, data) {
        var _a, _b, _c, _d;
        const message = (_d = (_c = (_b = (_a = data === null || data === void 0 ? void 0 : data.error) === null || _a === void 0 ? void 0 : _a.at(0)) !== null && _b !== void 0 ? _b : ((data === null || data === void 0 ? void 0 : data.validation) ? `validation error (${code}): ${JSON.stringify(data.validation)}` : undefined)) !== null && _c !== void 0 ? _c : (code === 404 ? "not found" : undefined)) !== null && _d !== void 0 ? _d : `status ${code}: an unknown error occurred!`;
        super(message);
        this.name = "PirschApiError";
        this.code = code;
        this.data = data;
    }
}
exports.PirschApiError = PirschApiError;
class PirschDomainNotFoundApiError extends PirschApiError {
    constructor() {
        const error = ["domain not found!"];
        super(404, { error });
        this.name = "PirschDomainNotFoundApiError";
    }
}
exports.PirschDomainNotFoundApiError = PirschDomainNotFoundApiError;
class PirschInvalidAccessModeApiError extends PirschApiError {
    constructor(methodName) {
        const error = [
            `you are trying to run the data-accessing method '${methodName}', which is not possible with access tokens. please use a oauth id and secret!`,
        ];
        super(401, { error });
        this.name = "PirschInvalidAccessModeApiError";
    }
}
exports.PirschInvalidAccessModeApiError = PirschInvalidAccessModeApiError;
class PirschUnknownApiError extends PirschApiError {
    constructor(message) {
        const error = message ? [message] : [];
        super(500, { error });
        this.name = "PirschUnknownApiError";
    }
}
exports.PirschUnknownApiError = PirschUnknownApiError;
