var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
exports.sessionHandlerPlugin = void 0;
var tslib_1 = require("tslib");
var analytics_types_1 = require("@amplitude/analytics-types");
var constants_1 = require("../constants");
var sessionHandlerPlugin = function () {
    // browserConfig is defined in setup() which will always be called first
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    var browserConfig;
    // amplitude is defined in setup() which will always be called first
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    var amplitude;
    var name = '@amplitude/plugin-session-handler';
    var type = analytics_types_1.PluginType.BEFORE;
    var setup = function (config, client) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            browserConfig = config;
            amplitude = client;
            return [2 /*return*/];
        });
    }); };
    var execute = function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var now, lastEventTime, timeSinceLastEvent;
        return tslib_1.__generator(this, function (_a) {
            now = Date.now();
            if (event.event_type === constants_1.DEFAULT_SESSION_START_EVENT || event.event_type === constants_1.DEFAULT_SESSION_END_EVENT) {
                browserConfig.lastEventTime = now;
                return [2 /*return*/, event];
            }
            lastEventTime = browserConfig.lastEventTime || now;
            timeSinceLastEvent = now - lastEventTime;
            if (timeSinceLastEvent > browserConfig.sessionTimeout) {
                // assigns new session
                amplitude.setSessionId(now);
                event.session_id = amplitude.getSessionId();
                event.time = now;
            } // else use existing session
            // updates last event time to extend time-based session
            browserConfig.lastEventTime = now;
            return [2 /*return*/, event];
        });
    }); };
    return {
        name: name,
        type: type,
        setup: setup,
        execute: execute,
    };
};
exports.sessionHandlerPlugin = sessionHandlerPlugin;
//# sourceMappingURL=session-handler.js.map