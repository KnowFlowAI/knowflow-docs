{"version":3,"file":"../pages/[[...slug]].js","mappings":"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AAF,EAAAC,OAAA,CAAAC,QAAA,8CCAAF,EAAAC,OAAA,CAAAC,QAAA,4CCAAF,EAAAC,OAAA,CAAAC,QAAA,kDCAAF,EAAAC,OAAA,CAAAC,QAAA,oBCAAF,EAAAC,OAAA,CAAAC,QAAA,wBCAAF,EAAAC,OAAA,CAAAC,QAAA,+BCAAF,EAAAC,OAAA,CAAAC,QAAA,2BCAAF,EAAAC,OAAA,CAAAC,QAAA,6BCAAF,EAAAC,OAAA,CAAAC,QAAA,gCCAAF,EAAAC,OAAA,CAAAC,QAAA,qBCAAF,EAAAC,OAAA,CAAAC,QAAA,+BCAAF,EAAAC,OAAA,CAAAC,QAAA,0BCAAF,EAAAC,OAAA,CAAAC,QAAA,mCCAAF,EAAAC,OAAA,CAAAC,QAAA,4BCAAF,EAAAC,OAAA,CAAAC,QAAA,iBCAAF,EAAAC,OAAA,CAAAC,QAAA,mBCAAF,EAAAC,OAAA,CAAAC,QAAA,qBCAAF,EAAAC,OAAA,CAAAC,QAAA,mBCAAF,EAAAC,OAAA,kDCAAD,EAAAC,OAAA,oCCAAD,EAAAC,OAAA,oCCAAD,EAAAC,OAAA,+CCAAD,EAAAC,OAAA,oDCAAD,EAAAC,OAAA,6CCAAD,EAAAC,OAAA,4CCAAD,EAAAC,OAAA,4BCAAD,EAAAC,OAAA,2BCAAD,EAAAC,OAAA,oCCAAD,EAAAC,OAAA,0CCAAD,EAAAC,OAAA,wCCAAD,EAAAC,OAAA,8BCAAD,EAAAC,OAAA,wCCAAD,EAAAC,OAAA,sCCAAD,EAAAC,OAAA,2BCAAD,EAAAC,OAAA,gCCAAD,EAAAC,OAAA,+CCAAD,EAAAC,OAAA,qCCAAD,EAAAC,OAAA,qCCAAD,EAAAC,OAAA,yCCAAD,EAAAC,OAAA,8BCAAD,EAAAC,OAAA,6CCAAD,EAAAC,OAAA,kDCAAD,EAAAC,OAAA,gDCAAD,EAAAC,OAAA,qCCAAD,EAAAC,OAAA,8BCAAD,EAAAC,OAAA,qCCAAD,EAAAC,OAAA,8CCAAD,EAAAC,OAAA,8CCAAD,EAAAC,OAAA,yCCAAD,EAAAC,OAAA,6BCAAD,EAAAC,OAAA,yCCAAD,EAAAC,OAAA,iCCAAD,EAAAC,OAAA,kCCAAD,EAAAC,OAAA,iCCAAD,EAAAC,OAAA,uCCAAD,EAAAC,OAAA,iDCAAD,EAAAC,OAAA,uCCAAD,EAAAC,OAAA,kCCAAD,EAAAC,OAAA,mCCAAD,EAAAC,OAAA,8BCAAD,EAAAC,OAAA,oCCAAD,EAAAC,OAAA,qCCAAD,EAAAC,OAAA,wCCAAD,EAAAC,OAAA,iDCAAD,EAAAC,OAAA,uCCAAD,EAAAC,OAAA,+CCAAD,EAAAC,OAAA,yGCIO,SAAAlD,EAAAoD,CAAA,CAAAC,CAAA,EACP,IAAAA,EACA,OACA,IAAAC,EAAwB,GAAAC,EAAAC,CAAA,EAAmBH,GAC3C,IAAAC,MAAAA,EAAA,OAAAA,EAAArF,QAAA,GAA4F,GAAAwF,EAAAC,EAAA,EAA2CJ,EAAArF,QAAA,GACvI,GAAY,GAAAwF,EAAAE,EAAA,EAAiBL,EAAArF,QAAA,EAC7B,SAAsBqF,EAAArF,QAAA,EAAsB,EAAEqF,EAAAR,SAAA,CAAsB,EAEpE,IAAAc,EAAwB,GAAAC,EAAAxB,KAAA,EAAKe,GAAAzB,GAAA,CAC7BmC,EAAoC,GAAAC,EAAAC,CAAA,EAAqBJ,EAAAN,EAAArF,QAAA,EACzD,SAAkB6F,EAAA,CAAqB,EAAER,EAAAR,SAAA,CAAsB,EAE/D,OAAAO,CACA,mDChBO,SAAAY,EAAA,GAAAC,CAAA,EACP,OAAWL,EAAAM,KAAK,CAAAC,OAAA,QAAAF,GAAAG,KAAA,GAChB,yECHO,IAAAC,EAAA,EAA+BC,SAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAA9M,KAAAA,CAAA,CAAyB,IAC/D,IAAA0J,EAAAmD,EAAA,GAA+BA,EAAA,CAAU,KACzC,SAAcnD,EAAK,EAAEoD,EAAA,CAAQ,EAAE9M,EAAK,iBCG7B,SAAAoI,EAAAsD,CAAA,CAAAqB,CAAA,EACP,IAAAA,EACA,OACA,IAAAC,EAAuB,GAAAC,EAAAC,CAAA,EAA6BH,GACpD,IAAAC,MAAAA,EAAA,OAAAA,EAAAzG,QAAA,GAAyF,GAAA4G,EAAAnB,EAAA,EAA2CgB,EAAAzG,QAAA,GACpI,GAAY,GAAA4G,EAAAlB,EAAA,EAAiBe,EAAAzG,QAAA,EAC7B,OAAmBqG,EAAmB,CACtCC,SAAAG,EAAAzG,QAAA,CACAuG,OAAAE,EAAAF,MAAA,CAAAM,WAAA,GACApN,KAAAgN,EAAA9B,QAAA,GAIA,IAAAgB,EAAAmB,CADmC,EAAAC,EAAAC,UAAA,EAAUP,EAAAzG,QAAA,EAC7C,IAAmD,GAAA+G,EAAA3C,KAAA,EAAKe,GAAAzB,GAAA,CAExD,OAAe2C,EAAmB,CAClCC,SAFmC,GAAAN,EAAAD,CAAA,EAAqBJ,EAAAc,EAAAzG,QAAA,EAGxDuG,OAAAE,EAAAF,MAAA,CAAAM,WAAA,GACApN,KAAAgN,EAAA9B,QAAA,EAEA,CACA,OAAA6B,CACA,8CC3BA,IAAMS,EAA4B/B,QAAA,eCoC3B,eAAAjC,EAAAF,CAAA,CAAAmE,EAAAnE,CAAA,CAAAoE,EAAA,IAAAC,GAAA,EACP,IAAAC,EAAA,MAAwB,GAAAJ,EAAAK,OAAA,EAAOvE,EAAA,CAAYwE,cAAA,KAI3C,QAAAC,KAHAL,EAAAM,GAAA,SACAN,EAAAM,GAAA,YACAN,EAAAM,GAAA,iBACAJ,GACA,IAAAF,EAAAO,GAAA,CAAAF,EAAAnD,IAAA,GAGA,GAAAmD,EAAAG,WAAA,GACA,MAAA1E,EAAA,GAAkCF,EAAQ,GAAGyE,EAAAnD,IAAA,CAAU,EAAA6C,OAEvD,CACA,IAAAzN,EAAA,GAA4BsJ,EAAQ,GAAGyE,EAAAnD,IAAA,CAAU,QACjD5K,EAAAmO,UAAA,CAAAV,GAAAzN,EAAAoK,SAAA,CAAAqD,EAAAnD,MAAA,EAAAtK,CACA,EAEA","sources":["webpack://@mintlify/client/src/pages/[[...slug]].tsx","webpack://@mintlify/client/sentry-wrapper-module","webpack://@mintlify/client/?4a9d","webpack://@mintlify/client/./src/lib/local/page.ts","webpack://@mintlify/client/./src/lib/local/paths.ts","webpack://@mintlify/client/./src/lib/local/utils.ts","webpack://@mintlify/client/external commonjs \"@amplitude/analytics-browser\"","webpack://@mintlify/client/external commonjs \"@asyncapi/parser\"","webpack://@mintlify/client/external commonjs \"@badrap/bar-of-progress\"","webpack://@mintlify/client/external commonjs \"@sentry/nextjs\"","webpack://@mintlify/client/external commonjs \"color-blend\"","webpack://@mintlify/client/external commonjs \"crypto-js\"","webpack://@mintlify/client/external commonjs \"dangerously-set-html-content\"","webpack://@mintlify/client/external commonjs \"elliptic\"","webpack://@mintlify/client/external commonjs \"fathom-client\"","webpack://@mintlify/client/external commonjs \"focus-visible\"","webpack://@mintlify/client/external commonjs \"fs-extra\"","webpack://@mintlify/client/external commonjs \"github-url-to-object\"","webpack://@mintlify/client/external commonjs \"gray-matter\"","webpack://@mintlify/client/external commonjs \"httpsnippet\"","webpack://@mintlify/client/external commonjs \"lcm\"","webpack://@mintlify/client/external commonjs \"lodash\"","webpack://@mintlify/client/external commonjs \"lodash/debounce\"","webpack://@mintlify/client/external commonjs \"lodash/isEmpty\"","webpack://@mintlify/client/external commonjs \"lodash/isEqual\"","webpack://@mintlify/client/external commonjs \"lodash/uniqueId\"","webpack://@mintlify/client/external commonjs \"logrocket\"","webpack://@mintlify/client/external commonjs \"mime-types\"","webpack://@mintlify/client/external commonjs \"mixpanel-browser\"","webpack://@mintlify/client/external commonjs \"next/dist/compiled/next-server/pages.runtime.prod.js\"","webpack://@mintlify/client/external commonjs \"next/head\"","webpack://@mintlify/client/external commonjs \"pirsch-sdk/web\"","webpack://@mintlify/client/external commonjs \"posthog-js\"","webpack://@mintlify/client/external commonjs \"prismjs\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-bash\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-go\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-java\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-javascript\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-json\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-markup-templating.js\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-php\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-python\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-ruby\"","webpack://@mintlify/client/external commonjs \"prismjs/components/prism-typescript\"","webpack://@mintlify/client/external commonjs \"react\"","webpack://@mintlify/client/external commonjs \"react-dom\"","webpack://@mintlify/client/external commonjs \"react-dom/server\"","webpack://@mintlify/client/external commonjs \"react-hotjar\"","webpack://@mintlify/client/external commonjs \"react-use-rect\"","webpack://@mintlify/client/external commonjs \"react/jsx-runtime\"","webpack://@mintlify/client/external commonjs \"sha256\"","webpack://@mintlify/client/external commonjs \"styled-jsx/style\"","webpack://@mintlify/client/external commonjs \"tailwindcss\"","webpack://@mintlify/client/external commonjs \"tweetnacl-ts/es/sign\"","webpack://@mintlify/client/external commonjs \"unique-string\"","webpack://@mintlify/client/external commonjs2 \"fs\"","webpack://@mintlify/client/external commonjs2 \"path\"","webpack://@mintlify/client/external commonjs2 \"stream\"","webpack://@mintlify/client/external commonjs2 \"zlib\"","webpack://@mintlify/client/external module \"@codesandbox/sandpack-react\"","webpack://@mintlify/client/external module \"@mdx-js/react\"","webpack://@mintlify/client/external module \"@mintlify/mdx\"","webpack://@mintlify/client/external module \"@mintlify/openapi-parser\"","webpack://@mintlify/client/external module \"@radix-ui/react-dropdown-menu\"","webpack://@mintlify/client/external module \"@radix-ui/react-tooltip\"","webpack://@mintlify/client/external module \"@sindresorhus/slugify\"","webpack://@mintlify/client/external module \"axios\"","webpack://@mintlify/client/external module \"clsx\"","webpack://@mintlify/client/external module \"estree-walker\"","webpack://@mintlify/client/external module \"hast-util-from-html\"","webpack://@mintlify/client/external module \"hast-util-to-html\"","webpack://@mintlify/client/external module \"hex-rgb\"","webpack://@mintlify/client/external module \"html-react-parser\"","webpack://@mintlify/client/external module \"is-absolute-url\"","webpack://@mintlify/client/external module \"jose\"","webpack://@mintlify/client/external module \"js-cookie\"","webpack://@mintlify/client/external module \"mdast-util-from-markdown\"","webpack://@mintlify/client/external module \"mdast-util-gfm\"","webpack://@mintlify/client/external module \"mdast-util-mdx\"","webpack://@mintlify/client/external module \"mdast-util-mdx-jsx\"","webpack://@mintlify/client/external module \"mermaid\"","webpack://@mintlify/client/external module \"micromark-extension-gfm\"","webpack://@mintlify/client/external module \"micromark-extension-mdx-jsx\"","webpack://@mintlify/client/external module \"micromark-extension-mdxjs\"","webpack://@mintlify/client/external module \"pkce-challenge\"","webpack://@mintlify/client/external module \"postcss\"","webpack://@mintlify/client/external module \"react-markdown\"","webpack://@mintlify/client/external module \"react-medium-image-zoom\"","webpack://@mintlify/client/external module \"react-textarea-autosize\"","webpack://@mintlify/client/external module \"react-use-intercom\"","webpack://@mintlify/client/external module \"remark\"","webpack://@mintlify/client/external module \"remark-frontmatter\"","webpack://@mintlify/client/external module \"remark-gfm\"","webpack://@mintlify/client/external module \"remark-math\"","webpack://@mintlify/client/external module \"remark-mdx\"","webpack://@mintlify/client/external module \"remark-stringify\"","webpack://@mintlify/client/external module \"scroll-into-view-if-needed\"","webpack://@mintlify/client/external module \"socket.io-client\"","webpack://@mintlify/client/external module \"tailwind-merge\"","webpack://@mintlify/client/external module \"ts-deepmerge\"","webpack://@mintlify/client/external module \"unified\"","webpack://@mintlify/client/external module \"unist-builder\"","webpack://@mintlify/client/external module \"unist-util-map\"","webpack://@mintlify/client/external module \"unist-util-remove\"","webpack://@mintlify/client/external module \"unist-util-remove-position\"","webpack://@mintlify/client/external module \"unist-util-visit\"","webpack://@mintlify/client/external module \"unist-util-visit-parents\"","webpack://@mintlify/client/external module \"usehooks-ts\"","webpack://@mintlify/client/../../packages/common/dist/asyncapi/prepAsyncApiFrontmatter.js","webpack://@mintlify/client/../../packages/common/dist/fs/normalizeRelativePath.js","webpack://@mintlify/client/../../packages/common/dist/openapi/buildOpenApiMetaTag.js","webpack://@mintlify/client/../../packages/common/dist/openapi/prepOpenApiFrontmatter.js","webpack://@mintlify/client/external commonjs2 \"fs/promises\"","webpack://@mintlify/client/../../packages/prebuild/dist/fs/index.js"],"sourcesContent":["import { upgradeToDocsConfig } from '@mintlify/validation';\nimport type { GetStaticPaths, GetStaticProps } from 'next';\nimport type { ParsedUrlQuery } from 'querystring';\n\nimport { getMdx } from '@/data-fetching/getMdx';\nimport { getRedirect } from '@/data-fetching/getRedirect';\nimport { getLocalPageProps, PagePropType } from '@/lib/local/page';\nimport { getFiles, getPathsStream } from '@/lib/local/paths';\nimport { PageProps } from '@/types/page';\nimport { StaticProps } from '@/types/staticProps';\nimport Page from '@/ui/Page';\nimport { applyLegacyThemeConfigs } from '@/utils/applyLegacyThemeConfigs';\nimport { getDynamicTailwindCss, getTailwindSelectors } from '@/utils/getDynamicTailwindCss';\nimport { isIndexRoute, pathsAreEquivalent } from '@/utils/path';\nimport { prepareToSerialize } from '@/utils/staticProps/prepareToSerialize';\nimport { serializeContent } from '@/utils/staticProps/serializeContent';\n\ninterface PathProps extends ParsedUrlQuery {\n  slug?: string[];\n}\n\nexport const getStaticPaths: GetStaticPaths<PathProps> = async () => {\n  const paths: {\n    params: {\n      slug: string[];\n    };\n  }[] = [];\n\n  const files = getFiles('src/_props');\n\n  // With appdir + Server components we can stream on first load and cache data soon.\n  for await (const path of getPathsStream(files)) {\n    paths.push(path);\n  }\n  return {\n    paths,\n    fallback: 'blocking',\n  };\n};\n\nexport const getStaticProps: GetStaticProps<PageProps, PathProps> = async ({ params }) => {\n  if (!params) throw new Error('No path parameters found');\n\n  const { slug } = params;\n  const slugStr = slug ? slug.join('/') : 'index'; // TODO index logic\n\n  if (slug && slug[0] === 'api') {\n    throw new Error('Path /api is a reserved path and cannot be used for a page.');\n  }\n  const result = await getLocalStaticProps(slugStr);\n  if (\n    'redirect' in result &&\n    pathsAreEquivalent(slugStr, result.redirect.destination) &&\n    !isIndexRoute(slugStr)\n  ) {\n    return await getLocalStaticProps(`${result.redirect.destination}/index`);\n  } else {\n    return result;\n  }\n};\n\nconst PageNotFound: { notFound: true } = { notFound: true };\n\nconst getLocalStaticProps = async (slug: string): Promise<StaticProps> => {\n  const data: PagePropType = await getLocalPageProps(slug);\n\n  if (data.hasOwnProperty('notFound')) {\n    return PageNotFound;\n  }\n\n  // Only returns docsNavWithMetadata when we need to redirect\n  if ('docsNavWithMetadata' in data && 'docsConfig' in data) {\n    const { docsNavWithMetadata, docsConfig } = data;\n\n    const redirect = getRedirect(\n      slug,\n      docsConfig.redirects,\n      docsNavWithMetadata,\n      docsConfig.errors?.[404]?.redirect === false && slug !== 'index'\n    );\n    if (redirect) {\n      const { destination } = redirect;\n      return { redirect: { destination, permanent: false } };\n    }\n\n    console.warn('Could not find a page to redirect to.');\n    return {\n      notFound: true,\n    };\n  }\n\n  if ('content' in data && 'pageData' in data && 'favicons' in data) {\n    try {\n      const { content, pageData, favicons, snippets, cssFiles, jsFiles } = data;\n      const { pageMetadata, mintConfig, docsConfig: docsConfiguration } = pageData;\n\n      const description = await serializeContent(pageMetadata.description);\n\n      const mintConfigWithDefaultThemeConfigs = mintConfig\n        ? applyLegacyThemeConfigs(mintConfig)\n        : undefined;\n\n      const docsConfig = mintConfigWithDefaultThemeConfigs\n        ? upgradeToDocsConfig(mintConfigWithDefaultThemeConfigs)\n        : docsConfiguration;\n\n      const tailwindSelectors = await getTailwindSelectors({ content });\n\n      const { mdxSource, mdxSourceWithNoJs, mdxExtracts, panelMdxSource, panelMdxSourceWithNoJs } =\n        await getMdx(slug, content, pageMetadata, snippets, 'local', docsConfig, tailwindSelectors);\n\n      const banner = await serializeContent(docsConfig.banner?.content);\n\n      const dynamicTailwindCss = await getDynamicTailwindCss({\n        content: mdxSource.compiledSource + (panelMdxSource?.compiledSource ?? ''),\n      });\n      if (dynamicTailwindCss) {\n        cssFiles.push({ content: dynamicTailwindCss });\n      }\n\n      const pageProps: PageProps = {\n        mdxSource,\n        mdxExtracts,\n        panelMdxSource,\n        panelMdxSourceWithNoJs,\n        // This is the description of the page that can contain markdown and is different from the one in `pageMetadata`.\n        description,\n        pageData: {\n          ...pageData,\n          apiReferenceData: pageData.apiReferenceData ?? {},\n          mintConfig: mintConfigWithDefaultThemeConfigs,\n          docsConfig,\n        },\n        favicons: favicons ?? { icons: [], browserconfig: '/favicons/browserconfig.xml' },\n        cssFiles,\n        jsFiles,\n        mdxSourceWithNoJs,\n        banner,\n      };\n      return {\n        props: prepareToSerialize(pageProps),\n      };\n    } catch (err) {\n      console.warn(err);\n      return PageNotFound;\n    }\n  }\n  return PageNotFound;\n};\n\nexport default Page;\n","import * as Sentry from '@sentry/nextjs';\nimport * as serverComponentModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\n\n/*\n * This file is a template for the code which will be substituted when our webpack loader handles non-API files in the\n * `pages/` directory.\n *\n * We use `__SENTRY_WRAPPING_TARGET_FILE__.cjs` as a placeholder for the path to the file being wrapped. Because it's not a real package,\n * this causes both TS and ESLint to complain, hence the pragma comments below.\n */\n\n\nconst userPageModule = serverComponentModule ;\n\nconst pageComponent = userPageModule ? userPageModule.default : undefined;\n\nconst origGetInitialProps = pageComponent ? pageComponent.getInitialProps : undefined;\nconst origGetStaticProps = userPageModule ? userPageModule.getStaticProps : undefined;\nconst origGetServerSideProps = userPageModule ? userPageModule.getServerSideProps : undefined;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getInitialPropsWrappers = {\n  '/_app': Sentry.wrapAppGetInitialPropsWithSentry,\n  '/_document': Sentry.wrapDocumentGetInitialPropsWithSentry,\n  '/_error': Sentry.wrapErrorGetInitialPropsWithSentry,\n};\n\nconst getInitialPropsWrapper = getInitialPropsWrappers['/[[...slug]]x'] || Sentry.wrapGetInitialPropsWithSentry;\n\nif (pageComponent && typeof origGetInitialProps === 'function') {\n  pageComponent.getInitialProps = getInitialPropsWrapper(origGetInitialProps) ;\n}\n\nconst getStaticProps =\n  typeof origGetStaticProps === 'function'\n    ? Sentry.wrapGetStaticPropsWithSentry(origGetStaticProps, '/[[...slug]]x')\n    : undefined;\nconst getServerSideProps =\n  typeof origGetServerSideProps === 'function'\n    ? Sentry.wrapGetServerSidePropsWithSentry(origGetServerSideProps, '/[[...slug]]x')\n    : undefined;\n\nconst pageWrapperTemplate = pageComponent ? Sentry.wrapPageComponentWithSentry(pageComponent ) : pageComponent;\n\nexport { pageWrapperTemplate as default, getServerSideProps, getStaticProps };\n","import { PagesRouteModule } from \"next/dist/server/future/route-modules/pages/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { hoist } from \"next/dist/build/templates/helpers\";\n// Import the app and document modules.\nimport Document from \"private-next-pages/_document.tsx\";\nimport App from \"private-next-pages/_app.tsx\";\n// Import the userland code.\nimport * as userland from \"private-next-pages/[[...slug]].tsx\";\n// Re-export the component (should be the default export).\nexport default hoist(userland, \"default\");\n// Re-export methods.\nexport const getStaticProps = hoist(userland, \"getStaticProps\");\nexport const getStaticPaths = hoist(userland, \"getStaticPaths\");\nexport const getServerSideProps = hoist(userland, \"getServerSideProps\");\nexport const config = hoist(userland, \"config\");\nexport const reportWebVitals = hoist(userland, \"reportWebVitals\");\n// Re-export legacy methods.\nexport const unstable_getStaticProps = hoist(userland, \"unstable_getStaticProps\");\nexport const unstable_getStaticPaths = hoist(userland, \"unstable_getStaticPaths\");\nexport const unstable_getStaticParams = hoist(userland, \"unstable_getStaticParams\");\nexport const unstable_getServerProps = hoist(userland, \"unstable_getServerProps\");\nexport const unstable_getServerSideProps = hoist(userland, \"unstable_getServerSideProps\");\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesRouteModule({\n    definition: {\n        kind: RouteKind.PAGES,\n        page: \"/[[...slug]]\",\n        pathname: \"/[[...slug]]\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    components: {\n        App,\n        Document\n    },\n    userland\n});\n\n//# sourceMappingURL=pages.js.map","import { prepOpenApiFrontmatter } from '@mintlify/common';\nimport { prepAsyncApiFrontmatter, SavedAsyncAPIFile } from '@mintlify/common';\nimport type { MintConfig, OpenApiFile, PageMetaTags } from '@mintlify/models';\nimport { DecoratedNavigationConfig, DocsConfig, upgradeToDocsConfig } from '@mintlify/validation';\nimport matter from 'gray-matter';\n\nimport { CssFile } from '@/types/CssFile';\nimport { JsFile } from '@/types/JsFile';\nimport { FaviconsProps } from '@/types/favicons';\nimport { PageDataProps } from '@/types/page';\nimport { Snippet } from '@/types/snippet';\nimport {\n  ApiReferenceData,\n  getApiReferenceData,\n  OpenApiInfo,\n  AsyncApiInfo,\n} from '@/utils/api-reference/getApiReferenceData';\nimport { applyLegacyThemeConfigs } from '@/utils/applyLegacyThemeConfigs';\nimport { optionallyRemoveLeadingSlash } from '@/utils/paths/optionallyRemoveLeadingSlash';\nimport { prepareToSerialize } from '@/utils/staticProps/prepareToSerialize';\n\nimport {\n  getLocalPagePath,\n  getFileContents,\n  getPrebuiltData,\n  confirmFaviconsWereGenerated,\n  getSnippets,\n  extractPageMetadata,\n  getCssFiles,\n  getJsFiles,\n} from './utils';\n\nexport type PagePropType =\n  | {\n      docsNavWithMetadata: DecoratedNavigationConfig;\n      mintConfig?: MintConfig;\n      docsConfig: DocsConfig;\n    }\n  | { notFound: boolean }\n  | {\n      content: string;\n      pageData: {\n        mintConfig?: MintConfig;\n        docsConfig: DocsConfig;\n        pageMetadata: PageMetaTags;\n        apiReferenceData?: ApiReferenceData;\n        docsNavWithMetadata: DecoratedNavigationConfig;\n      };\n      snippets: Snippet[];\n      favicons?: FaviconsProps;\n      cssFiles: CssFile[];\n      jsFiles: JsFile[];\n    };\n\n/**\n * @returns All props needed for getStaticProps | Only docsNavWithMetadata if page is not found\n */\nexport const getLocalPageProps = async (slug: string): Promise<PagePropType> => {\n  let docsNavWithMetadata: DecoratedNavigationConfig = {\n    groups: [],\n  };\n  try {\n    docsNavWithMetadata = await getPrebuiltData('generatedDocsNav');\n  } catch {\n    // Try catches are purposefully empty because it isn't the end\n    // of the world if some of these prebuilt variables are not existent.\n    // We just fall back to the empty value, but we will want to do\n    // better error handling.\n  }\n  let openApiInfo: OpenApiInfo[] = [];\n  let asyncApiInfo: AsyncApiInfo[] = [];\n  try {\n    const openApiFiles: OpenApiFile[] = await getPrebuiltData('openApiFiles');\n    openApiInfo = openApiFiles.map(({ filename, spec, originalFileLocation }) => ({\n      metadata: {\n        filename,\n        originalFileLocation: originalFileLocation\n          ? optionallyRemoveLeadingSlash(originalFileLocation) // TODO: ENG-3197\n          : originalFileLocation,\n      },\n      document: spec,\n    })) as OpenApiInfo[];\n  } catch {}\n  try {\n    const asyncApiFiles: SavedAsyncAPIFile[] = await getPrebuiltData('asyncApiFiles');\n    asyncApiInfo = (await Promise.all(\n      asyncApiFiles.map(async ({ filename, spec, originalFileLocation }) => ({\n        metadata: {\n          filename,\n          originalFileLocation: originalFileLocation\n            ? optionallyRemoveLeadingSlash(originalFileLocation)\n            : originalFileLocation,\n        },\n        document: spec,\n      }))\n    )) as AsyncApiInfo[];\n  } catch {}\n  const pagePath = await getLocalPagePath(slug);\n\n  let mintConfig: MintConfig | undefined = undefined;\n\n  let docsConfig: DocsConfig | undefined = undefined;\n\n  try {\n    mintConfig = applyLegacyThemeConfigs(await getPrebuiltData('mint'));\n  } catch {}\n\n  try {\n    docsConfig = await getPrebuiltData('docs');\n  } catch {\n    if (mintConfig) {\n      docsConfig = upgradeToDocsConfig(mintConfig);\n    }\n  }\n\n  if (!docsConfig) {\n    return {\n      notFound: true,\n    };\n  }\n\n  if (!pagePath) {\n    return { mintConfig, docsNavWithMetadata, docsConfig };\n  }\n\n  const contentWithFrontmatter = await getFileContents(pagePath);\n  const { data: baseMetadata, content } = matter(contentWithFrontmatter);\n  const metadataWithPreppedApiFrontmatter = {\n    ...baseMetadata,\n    openapi: prepOpenApiFrontmatter(`${slug}.mdx`, baseMetadata.openapi),\n    asyncapi: prepAsyncApiFrontmatter(`${slug}.mdx`, baseMetadata.asyncapi),\n  };\n  const apiReferenceData = await getApiReferenceData(\n    metadataWithPreppedApiFrontmatter,\n    openApiInfo,\n    asyncApiInfo\n  );\n  const pageMetadata = await extractPageMetadata(\n    pagePath,\n    metadataWithPreppedApiFrontmatter,\n    apiReferenceData\n  );\n\n  const favicons: FaviconsProps | undefined =\n    docsConfig.favicon && (await confirmFaviconsWereGenerated()) ? defaultFavicons : undefined;\n\n  const snippets: Snippet[] = [];\n\n  for await (const snippet of getSnippets()) {\n    snippets.push(snippet);\n  }\n\n  const cssFiles: CssFile[] = [];\n  const jsFiles: JsFile[] = [];\n\n  for await (const cssFile of getCssFiles()) {\n    cssFiles.push(cssFile);\n  }\n  for await (const jsFile of getJsFiles()) {\n    jsFiles.push(jsFile);\n  }\n\n  const pageData: PageDataProps = {\n    mintConfig,\n    docsNavWithMetadata,\n    pageMetadata,\n    docsConfig,\n    apiReferenceData,\n  };\n\n  return {\n    content,\n    pageData: prepareToSerialize(pageData),\n    snippets,\n    favicons,\n    cssFiles,\n    jsFiles,\n  };\n};\n\nconst defaultFavicons: FaviconsProps = {\n  icons: [\n    {\n      rel: 'apple-touch-icon',\n      sizes: '180x180',\n      href: '/favicons/apple-touch-icon.png',\n      type: 'image/png',\n    },\n    {\n      rel: 'icon',\n      sizes: '32x32',\n      href: '/favicons/favicon-32x32.png',\n      type: 'image/png',\n    },\n    {\n      rel: 'icon',\n      sizes: '16x16',\n      href: '/favicons/favicon-16x16.png',\n      type: 'image/png',\n    },\n    {\n      rel: 'shortcut icon',\n      href: '/favicons/favicon.ico',\n      type: 'image/x-icon',\n    },\n  ],\n  browserconfig: '/favicons/browserconfig.xml',\n};\n","import { getFileList } from '@mintlify/prebuild';\nimport { pathExists } from 'fs-extra';\n\nimport { getExtension, removeExtension } from './utils';\n\nexport async function* getFiles(dirName: string) {\n  if (await pathExists(dirName)) {\n    yield* getFileList(dirName);\n  }\n}\n\nexport async function* getPathsStream(\n  files: AsyncIterable<string> | Iterable<string>\n): AsyncIterable<StaticPath> {\n  const extensions = ['mdx', 'md'];\n  for await (const file of files) {\n    if (extensions.includes(getExtension(file))) {\n      yield formatStaticPath(removeExtension(file));\n    }\n  }\n}\n\nexport const formatStaticPath = (path: string): StaticPath => ({\n  params: {\n    slug: path.split('/').filter((dir) => dir !== ''),\n  },\n});\n\ntype StaticPath = {\n  params: {\n    slug: string[];\n  };\n};\n","import { optionallyAddLeadingSlash, camelToSentenceCase } from '@mintlify/common';\nimport type { PageMetaTags } from '@mintlify/models';\nimport { getFileList } from '@mintlify/prebuild';\nimport { promises as _promises } from 'fs';\nimport { pathExists } from 'fs-extra';\n\nimport type { CssFile } from '@/types/CssFile';\nimport type { JsFile } from '@/types/JsFile';\nimport type { Snippet } from '@/types/snippet';\nimport { ApiReferenceData } from '@/utils/api-reference/getApiReferenceData';\nimport { optionallyRemoveLeadingSlash } from '@/utils/paths/optionallyRemoveLeadingSlash';\n\nconst { readFile } = _promises;\n\nexport const getExtension = (path: string) =>\n  path.substring(path.lastIndexOf('.', path.length - 2) + 1, path.length) || path;\n\nexport const removeExtension = (path: string) =>\n  path.substring(0, path.lastIndexOf('.', path.length - 2));\n\nexport const getPathsByExtension = (files: string[], ...extensions: string[]): string[] => {\n  return files.filter((file) => {\n    const extension = getExtension(file);\n    return extensions.includes(extension);\n  });\n};\n\nexport const getLocalPagePath = async (slug: string) => {\n  const mdxPath = `src/_props/${slug}.mdx`;\n  if (await pathExists(mdxPath)) {\n    return mdxPath;\n  }\n\n  return null;\n};\n\nexport const getFileContents = async (path: string) => {\n  return (await readFile(path)).toString();\n};\n\nexport const getFileContentsAsObject = async (path: string) => {\n  return JSON.parse(await getFileContents(path));\n};\n\nexport const getPrebuiltData = async (name: string) => {\n  return getFileContentsAsObject(`src/_props/${name}.json`);\n};\n\nexport const confirmFaviconsWereGenerated = async () => {\n  // We could do more granular testing for this but there will\n  // not be a case where only a few of these are generated.\n  // It's all or nothing.\n  return (\n    (await pathExists('public/favicons/apple-touch-icon.png')) &&\n    (await pathExists('public/favicons/favicon-32x32.png')) &&\n    (await pathExists('public/favicons/favicon-16x16.png')) &&\n    (await pathExists('public/favicons/favicon.ico'))\n  );\n};\n\nexport async function* getSnippets(): AsyncIterable<Snippet> {\n  const snippetPath = 'public/_snippets';\n\n  if (await pathExists(snippetPath)) {\n    for await (const filename of getFileList(snippetPath)) {\n      const content = await getFileContents(`${snippetPath}${filename}`);\n\n      yield {\n        snippetFileLocation: optionallyRemoveLeadingSlash(filename),\n        content,\n      };\n    }\n  }\n}\n\nexport async function* getCssFiles(): AsyncIterable<CssFile> {\n  const publicPath = 'public';\n\n  if (await pathExists(publicPath)) {\n    for await (const filename of getFileList(publicPath)) {\n      if (getExtension(filename) === 'css') {\n        const content = await getFileContents(`${publicPath}${filename}`);\n        yield { content };\n      }\n    }\n  }\n}\n\nexport async function* getJsFiles(): AsyncIterable<JsFile> {\n  const publicPath = 'public';\n\n  if (await pathExists(publicPath)) {\n    for await (const filename of getFileList(publicPath)) {\n      if (getExtension(filename) === 'js') {\n        const content = await getFileContents(`${publicPath}${filename}`);\n        yield { content };\n      }\n    }\n  }\n}\n\nexport const extractPageMetadata = async (\n  pagePath: string,\n  baseMetadata: PageMetaTags,\n  apiReferenceData: ApiReferenceData\n) => {\n  // Replace .mdx, so we can pass file paths into this function\n  const slug = pagePath.replace(/\\.mdx?$/, '');\n\n  // Append data from OpenAPI or AsyncAPI if it exists\n  const { title, description } = apiReferenceData.endpoint ?? apiReferenceData.channel ?? {};\n  const titleCaseTitle =\n    title && title === apiReferenceData.channelId ? camelToSentenceCase(title) : title;\n\n  return {\n    title: titleCaseTitle,\n    description,\n    ...baseMetadata,\n    href: optionallyAddLeadingSlash(slug),\n  };\n};\n","module.exports = require(\"@amplitude/analytics-browser\");","module.exports = require(\"@asyncapi/parser\");","module.exports = require(\"@badrap/bar-of-progress\");","module.exports = require(\"@sentry/nextjs\");","module.exports = require(\"color-blend\");","module.exports = require(\"crypto-js\");","module.exports = require(\"dangerously-set-html-content\");","module.exports = require(\"elliptic\");","module.exports = require(\"fathom-client\");","module.exports = require(\"focus-visible\");","module.exports = require(\"fs-extra\");","module.exports = require(\"github-url-to-object\");","module.exports = require(\"gray-matter\");","module.exports = require(\"httpsnippet\");","module.exports = require(\"lcm\");","module.exports = require(\"lodash\");","module.exports = require(\"lodash/debounce\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"lodash/isEqual\");","module.exports = require(\"lodash/uniqueId\");","module.exports = require(\"logrocket\");","module.exports = require(\"mime-types\");","module.exports = require(\"mixpanel-browser\");","module.exports = require(\"next/dist/compiled/next-server/pages.runtime.prod.js\");","module.exports = require(\"next/head\");","module.exports = require(\"pirsch-sdk/web\");","module.exports = require(\"posthog-js\");","module.exports = require(\"prismjs\");","module.exports = require(\"prismjs/components/prism-bash\");","module.exports = require(\"prismjs/components/prism-go\");","module.exports = require(\"prismjs/components/prism-java\");","module.exports = require(\"prismjs/components/prism-javascript\");","module.exports = require(\"prismjs/components/prism-json\");","module.exports = require(\"prismjs/components/prism-markup-templating.js\");","module.exports = require(\"prismjs/components/prism-php\");","module.exports = require(\"prismjs/components/prism-python\");","module.exports = require(\"prismjs/components/prism-ruby\");","module.exports = require(\"prismjs/components/prism-typescript\");","module.exports = require(\"react\");","module.exports = require(\"react-dom\");","module.exports = require(\"react-dom/server\");","module.exports = require(\"react-hotjar\");","module.exports = require(\"react-use-rect\");","module.exports = require(\"react/jsx-runtime\");","module.exports = require(\"sha256\");","module.exports = require(\"styled-jsx/style\");","module.exports = require(\"tailwindcss\");","module.exports = require(\"tweetnacl-ts/es/sign\");","module.exports = require(\"unique-string\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"stream\");","module.exports = require(\"zlib\");","module.exports = import(\"@codesandbox/sandpack-react\");;","module.exports = import(\"@mdx-js/react\");;","module.exports = import(\"@mintlify/mdx\");;","module.exports = import(\"@mintlify/openapi-parser\");;","module.exports = import(\"@radix-ui/react-dropdown-menu\");;","module.exports = import(\"@radix-ui/react-tooltip\");;","module.exports = import(\"@sindresorhus/slugify\");;","module.exports = import(\"axios\");;","module.exports = import(\"clsx\");;","module.exports = import(\"estree-walker\");;","module.exports = import(\"hast-util-from-html\");;","module.exports = import(\"hast-util-to-html\");;","module.exports = import(\"hex-rgb\");;","module.exports = import(\"html-react-parser\");;","module.exports = import(\"is-absolute-url\");;","module.exports = import(\"jose\");;","module.exports = import(\"js-cookie\");;","module.exports = import(\"mdast-util-from-markdown\");;","module.exports = import(\"mdast-util-gfm\");;","module.exports = import(\"mdast-util-mdx\");;","module.exports = import(\"mdast-util-mdx-jsx\");;","module.exports = import(\"mermaid\");;","module.exports = import(\"micromark-extension-gfm\");;","module.exports = import(\"micromark-extension-mdx-jsx\");;","module.exports = import(\"micromark-extension-mdxjs\");;","module.exports = import(\"pkce-challenge\");;","module.exports = import(\"postcss\");;","module.exports = import(\"react-markdown\");;","module.exports = import(\"react-medium-image-zoom\");;","module.exports = import(\"react-textarea-autosize\");;","module.exports = import(\"react-use-intercom\");;","module.exports = import(\"remark\");;","module.exports = import(\"remark-frontmatter\");;","module.exports = import(\"remark-gfm\");;","module.exports = import(\"remark-math\");;","module.exports = import(\"remark-mdx\");;","module.exports = import(\"remark-stringify\");;","module.exports = import(\"scroll-into-view-if-needed\");;","module.exports = import(\"socket.io-client\");;","module.exports = import(\"tailwind-merge\");;","module.exports = import(\"ts-deepmerge\");;","module.exports = import(\"unified\");;","module.exports = import(\"unist-builder\");;","module.exports = import(\"unist-util-map\");;","module.exports = import(\"unist-util-remove\");;","module.exports = import(\"unist-util-remove-position\");;","module.exports = import(\"unist-util-visit\");;","module.exports = import(\"unist-util-visit-parents\");;","module.exports = import(\"usehooks-ts\");;","import { parse } from 'path';\nimport { parseAsyncApiString } from '../asyncapi/parseAsyncApiString.js';\nimport { normalizeRelativePath } from '../fs/normalizeRelativePath.js';\nimport { schemaFileFrontmatterIsOriginalFileLocation, isRemoteSchemaUrl, } from '../schema/common.js';\nexport function prepAsyncApiFrontmatter(currPath, asyncApiFrontmatter) {\n    if (!asyncApiFrontmatter)\n        return undefined;\n    const asyncApiObj = parseAsyncApiString(asyncApiFrontmatter);\n    if ((asyncApiObj === null || asyncApiObj === void 0 ? void 0 : asyncApiObj.filename) && schemaFileFrontmatterIsOriginalFileLocation(asyncApiObj.filename)) {\n        if (isRemoteSchemaUrl(asyncApiObj.filename)) {\n            return `${asyncApiObj.filename} ${asyncApiObj.channelId}`;\n        }\n        const currDir = parse(currPath).dir;\n        const newAsyncApiFilename = normalizeRelativePath(currDir, asyncApiObj.filename);\n        return `${newAsyncApiFilename} ${asyncApiObj.channelId}`;\n    }\n    return asyncApiFrontmatter;\n}\n","import { posix } from 'path';\nexport function normalizeRelativePath(...str) {\n    return posix.resolve('/', ...str).slice(1);\n}\n","export const buildOpenApiMetaTag = ({ filePath, method, path, }) => {\n    const file = filePath ? `${filePath} ` : '';\n    return `${file}${method} ${path}`;\n};\n","import { parse, isAbsolute } from 'path';\nimport { normalizeRelativePath } from '../fs/normalizeRelativePath.js';\nimport { schemaFileFrontmatterIsOriginalFileLocation, isRemoteSchemaUrl, } from '../schema/common.js';\nimport { buildOpenApiMetaTag } from './buildOpenApiMetaTag.js';\nimport { potentiallyParseOpenApiString } from './parseOpenApiString.js';\nexport function prepOpenApiFrontmatter(currPath, openapiFrontmatter) {\n    if (!openapiFrontmatter)\n        return undefined;\n    const openapiObj = potentiallyParseOpenApiString(openapiFrontmatter);\n    if ((openapiObj === null || openapiObj === void 0 ? void 0 : openapiObj.filename) && schemaFileFrontmatterIsOriginalFileLocation(openapiObj.filename)) {\n        if (isRemoteSchemaUrl(openapiObj.filename)) {\n            return buildOpenApiMetaTag({\n                filePath: openapiObj.filename,\n                method: openapiObj.method.toLowerCase(),\n                path: openapiObj.endpoint,\n            });\n        }\n        const filenameIsAbsolute = isAbsolute(openapiObj.filename);\n        const currDir = filenameIsAbsolute ? '/' : parse(currPath).dir;\n        const newOpenApiFilename = normalizeRelativePath(currDir, openapiObj.filename);\n        return buildOpenApiMetaTag({\n            filePath: newOpenApiFilename,\n            method: openapiObj.method.toLowerCase(),\n            path: openapiObj.endpoint,\n        });\n    }\n    return openapiFrontmatter;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs/promises\");","import { readdirSync } from 'fs';\nimport { readdir } from 'fs/promises';\nimport path from 'path';\nexport const getFileListSync = (dirName, og = dirName) => {\n    const files = [];\n    const items = readdirSync(dirName, { withFileTypes: true });\n    for (const item of items) {\n        const fullPath = path.join(dirName, item.name);\n        if (item.isDirectory()) {\n            files.push(...getFileListSync(fullPath, og));\n        }\n        else {\n            files.push(path.relative(og, fullPath));\n        }\n    }\n    return files;\n};\n// TODO consolidate this function\nexport const getFileListWithDirectories = (dirName, og = dirName) => {\n    const files = [];\n    const items = readdirSync(dirName, { withFileTypes: true });\n    for (const item of items) {\n        const fullPath = path.join(dirName, item.name);\n        if (item.isDirectory()) {\n            const relativeDir = path.relative(og, fullPath);\n            if (relativeDir !== '.git') {\n                files.push(relativeDir);\n                files.push(...getFileListWithDirectories(fullPath, og));\n            }\n        }\n        else {\n            files.push(path.relative(og, fullPath));\n        }\n    }\n    return files;\n};\nexport async function* getFileList(dirName, og = dirName, ignored = new Set()) {\n    const items = await readdir(dirName, { withFileTypes: true });\n    ignored.add('.git');\n    ignored.add('.github');\n    ignored.add('node_modules');\n    for (const item of items) {\n        if (ignored.has(item.name)) {\n            continue;\n        }\n        if (item.isDirectory()) {\n            yield* getFileList(`${dirName}/${item.name}`, og);\n        }\n        else {\n            const path = `${dirName}/${item.name}`;\n            yield path.startsWith(og) ? path.substring(og.length) : path;\n        }\n    }\n}\n"],"names":["getStaticPaths","paths","files","getFiles","path","getPathsStream","push","fallback","getStaticProps","params","slug","slugStr","join","result","getLocalStaticProps","pathsAreEquivalent","redirect","destination","isIndexRoute","PageNotFound","notFound","data","getLocalPageProps","hasOwnProperty","docsNavWithMetadata","docsConfig","getRedirect","redirects","errors","permanent","console","warn","content","pageData","favicons","snippets","cssFiles","jsFiles","pageMetadata","mintConfig","docsConfiguration","description","serializeContent","mintConfigWithDefaultThemeConfigs","applyLegacyThemeConfigs","undefined","upgradeToDocsConfig","tailwindSelectors","getTailwindSelectors","mdxSource","mdxSourceWithNoJs","mdxExtracts","panelMdxSource","panelMdxSourceWithNoJs","getMdx","banner","dynamicTailwindCss","getDynamicTailwindCss","compiledSource","pageProps","apiReferenceData","icons","browserconfig","props","prepareToSerialize","err","pageComponent","userPageModule","default","origGetInitialProps","getInitialProps","origGetStaticProps","origGetServerSideProps","getServerSideProps","getInitialPropsWrapper","getInitialPropsWrappers","_sentry_nextjs__WEBPACK_IMPORTED_MODULE_0__","wrapAppGetInitialPropsWithSentry","wrapDocumentGetInitialPropsWithSentry","wrapErrorGetInitialPropsWithSentry","wrapGetInitialPropsWithSentry","wrapGetStaticPropsWithSentry","wrapGetServerSidePropsWithSentry","pageWrapperTemplate","wrapPageComponentWithSentry","__WEBPACK_DEFAULT_EXPORT__","next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__","l","private_next_pages_slug_tsx__WEBPACK_IMPORTED_MODULE_5__","config","reportWebVitals","unstable_getStaticProps","unstable_getStaticPaths","unstable_getStaticParams","unstable_getServerProps","unstable_getServerSideProps","routeModule","next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__","PagesRouteModule","definition","kind","next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__","x","PAGES","page","pathname","bundlePath","filename","components","App","private_next_pages_app_tsx__WEBPACK_IMPORTED_MODULE_4__","Document","private_next_pages_document_tsx__WEBPACK_IMPORTED_MODULE_3__","userland","groups","getPrebuiltData","openApiInfo","asyncApiInfo","openApiFiles","map","spec","originalFileLocation","metadata","optionallyRemoveLeadingSlash","document","asyncApiFiles","Promise","all","pagePath","getLocalPagePath","contentWithFrontmatter","getFileContents","baseMetadata","matter","metadataWithPreppedApiFrontmatter","openapi","prepOpenApiFrontmatter","asyncapi","prepAsyncApiFrontmatter","getApiReferenceData","extractPageMetadata","favicon","confirmFaviconsWereGenerated","defaultFavicons","snippet","getSnippets","cssFile","getCssFiles","jsFile","getJsFiles","rel","sizes","href","type","dirName","pathExists","getFileList","extensions","file","includes","getExtension","formatStaticPath","removeExtension","split","filter","dir","readFile","_promises","substring","lastIndexOf","length","mdxPath","toString","getFileContentsAsObject","JSON","parse","name","snippetPath","snippetFileLocation","publicPath","replace","title","endpoint","channel","channelId","camelToSentenceCase","optionallyAddLeadingSlash","module","exports","require","currPath","asyncApiFrontmatter","asyncApiObj","_asyncapi_parseAsyncApiString_js__WEBPACK_IMPORTED_MODULE_1__","d","_schema_common_js__WEBPACK_IMPORTED_MODULE_2__","lF","y$","currDir","path__WEBPACK_IMPORTED_MODULE_0__","newAsyncApiFilename","_fs_normalizeRelativePath_js__WEBPACK_IMPORTED_MODULE_3__","J","normalizeRelativePath","str","posix","resolve","slice","buildOpenApiMetaTag","filePath","method","openapiFrontmatter","openapiObj","parseOpenApiString","Q","common","toLowerCase","filenameIsAbsolute","external_path_","isAbsolute","promises_namespaceObject","og","ignored","Set","items","readdir","withFileTypes","item","add","has","isDirectory","startsWith"],"sourceRoot":""}