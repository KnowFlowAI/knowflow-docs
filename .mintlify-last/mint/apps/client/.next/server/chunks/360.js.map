{"version":3,"file":"360.js","mappings":"8eCKA,OAAMA,EAGJC,YAAYC,CAAkB,CAAE,MAIzBC,IAAAA,CAAO,IACZ,IAAMD,EAAaE,OAAOC,IAAI,CAAC,IAAI,CAACH,UAAU,CAAE,OAGhD,OAAOI,IAFeC,EAAAA,EAAEA,CAAC,aACHJ,IAAI,CAACC,OAAOC,IAAI,CAACG,IAAAA,EAAS,CAACC,GAAU,OAAQP,GACxDQ,KAAK,CAAC,MACnB,OAEOC,YAAAA,CAAe,KACpB,GAAI,CACF,IAAMC,EAAY,IAAIL,EAAAA,EAAEA,CAAC,aACnBL,EAAaE,OAAOC,IAAI,CAAC,IAAI,CAACH,UAAU,CAAE,OAEhD,OAAOW,EADmBC,cAAc,CAACZ,GAC1Ba,SAAS,GAAGC,gBAAgB,CAAC,MAC9C,CAAE,KAAM,CACN,MAAO,EACT,CACF,EAnBE,IAAI,CAACd,UAAU,CAAGA,CACpB,CAmBF,CAQO,SAASe,EACdC,CAA0B,CAC1BC,CAAY,CACZC,CAAY,CACZC,CAA2D,EAG3D,IAAMC,EAAQC,OAAO,IAAIC,OAAOC,OAAO,IACjCC,EAAeC,OAAOC,OAAO,CAACP,GACjCQ,IAAI,GACJC,GAAG,CAAC,CAAC,CAACC,EAAGC,EAAE,GACHD,EAAI,IAAME,mBAAmBD,GAAGE,OAAO,CAAC,OAAQ,MAExDC,MAAM,CAACC,SACPC,IAAI,CAAC,KACFC,EAAU,CACdpB,GAAQqB,cDpDHpB,EAAKqB,QAAQ,CAAC,KCqDSrB,EDrDK,CAAC,ECqDNA,EDrDa,CAAC,CAAC,CCsD3CG,EACAI,EACD,CAACW,IAAI,CAAC,KACDI,EAAc,IAAIzC,EAfD,iBAAOoB,EAAmBA,EAAM,IAiBvD,MAAO,CACL,cAAeqB,EAAY9B,YAAY,GACvC,oBAAqB8B,EAAYtC,IAAI,CAACmC,GACtC,gBAAiBhB,CACnB,CACF","sources":["webpack://@mintlify/client/./src/utils/api/cobo/utils.ts","webpack://@mintlify/client/./src/utils/api/cobo/v1.ts"],"sourcesContent":["export function addTrailingSlashIfNotExists(path: string) {\n  return path.endsWith('/') ? path : `${path}/`;\n}\n","import { ec as EC } from 'elliptic';\nimport sha256 from 'sha256';\n\nimport { addTrailingSlashIfNotExists } from './utils';\n\nclass CoboCustody {\n  privateKey: string;\n\n  constructor(privateKey: string) {\n    this.privateKey = privateKey;\n  }\n\n  public sign = (message: string) => {\n    const privateKey = Buffer.from(this.privateKey, 'hex');\n    const secp256k1 = new EC('secp256k1');\n    const sig = secp256k1.sign(Buffer.from(sha256.x2(message), 'hex'), privateKey);\n    return sig.toDER('hex');\n  };\n\n  public getPublicKey = () => {\n    try {\n      const secp256k1 = new EC('secp256k1');\n      const privateKey = Buffer.from(this.privateKey, 'hex');\n      const keyPair = secp256k1.keyFromPrivate(privateKey);\n      return keyPair.getPublic().encodeCompressed('hex');\n    } catch {\n      return '';\n    }\n  };\n}\n\ntype CoboV1CustodyKeys = {\n  'BIZ-API-KEY': string;\n  'BIZ-API-SIGNATURE': string;\n  'BIZ-API-NONCE': string;\n};\n\nexport function getCoboV1CustodyGeneratedKeys(\n  method: string | undefined,\n  path: string,\n  key: unknown,\n  signatureContent: Record<string, string | number | boolean>\n): CoboV1CustodyKeys {\n  const coboPrivateKey = typeof key === 'string' ? key : '';\n  const nonce = String(new Date().getTime());\n  const sortedParams = Object.entries(signatureContent)\n    .sort()\n    .map(([k, v]) => {\n      return k + '=' + encodeURIComponent(v).replace(/%20/g, '+');\n    })\n    .filter(Boolean)\n    .join('&');\n  const content = [\n    method?.toUpperCase(),\n    addTrailingSlashIfNotExists(path),\n    nonce,\n    sortedParams,\n  ].join('|');\n  const coboCustody = new CoboCustody(coboPrivateKey);\n\n  return {\n    'BIZ-API-KEY': coboCustody.getPublicKey(),\n    'BIZ-API-SIGNATURE': coboCustody.sign(content),\n    'BIZ-API-NONCE': nonce,\n  };\n}\n"],"names":["CoboCustody","constructor","privateKey","sign","Buffer","from","sig","EC","sha256","message","toDER","getPublicKey","secp256k1","keyPair","keyFromPrivate","getPublic","encodeCompressed","getCoboV1CustodyGeneratedKeys","method","path","key","signatureContent","nonce","String","Date","getTime","sortedParams","Object","entries","sort","map","k","v","encodeURIComponent","replace","filter","Boolean","join","content","toUpperCase","endsWith","coboCustody"],"sourceRoot":""}