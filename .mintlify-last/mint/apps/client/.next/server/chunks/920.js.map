{"version":3,"file":"920.js","mappings":"yfAIA,OAAMA,EAGJC,YAAYC,CAAkB,CAAE,CAC9B,IAAI,CAACA,UAAU,CAAGA,CACpB,CAEOC,KAAKC,CAAe,CAAE,CAC3B,IAAMC,EAAY,IAAI,CAACC,YAAY,GAC7BC,EAAkB,IAAIC,WAAWC,OAAOC,IAAI,CAAC,IAAI,CAACR,UAAU,CAAGG,EAAW,QAC1EM,EAAe,IAAIH,WAAWC,OAAOC,IAAI,CAACN,EAAS,QACnDQ,EAAYC,CAAAA,EAAAA,EAAAA,aAAAA,EAAcF,EAAcJ,GAC9C,OAAOE,OAAOC,IAAI,CAACE,GAAWE,QAAQ,CAAC,MACzC,CAEOR,cAAe,CACpB,IAAMC,EAAkB,IAAIC,WAAWC,OAAOC,IAAI,CAAC,IAAI,CAACR,UAAU,CAAE,QAC9DG,EAAYU,CAAAA,EAAAA,EAAAA,qBAAAA,EAAsBR,GAAiBF,SAAS,CAClE,OAAOI,OAAOC,IAAI,CAACL,GAAWS,QAAQ,CAAC,MACzC,CACF,CAQO,SAASE,EACdC,CAAiB,CACjBC,CAA0B,CAC1BC,CAAY,CACZC,CAAa,CACbC,CAA8B,EAE9B,IAAMC,EAAQC,OAAO,IAAIC,OAAOC,OAAO,IACjCC,EAAcC,OAAOC,OAAO,CAACP,GAChCQ,GAAG,CAAC,CAAC,CAACC,EAAKC,EAAM,IAChB,GAAI,iBAAOA,GAAsB,kBAAOA,GAAuB,iBAAOA,EAEtE,MAAO,CAAC,EAAED,EAAI,CAAC,EAAEE,mBAAmBD,GAAO,CAAC,GAE7CE,IAAI,CAAC,KAEFC,EAAY,CAChBhB,GAAQiB,cACR,CAAC,GAAG,EAAEhB,EAAK,CAAC,CACZG,EACAI,EACAU,IAAQhB,GAAQ,GAAKiB,KAAKC,SAAS,CAAClB,GACrC,CAACa,IAAI,CAAC,KAEDM,EAAcC,EAAAA,MAAe,CAACA,EAAAA,MAAe,CAACN,IAAYpB,QAAQ,GAElE2B,EAAgB,IAAIzC,EAAciB,GAExC,MAAO,CACL,cAAewB,EAAcnC,YAAY,GACzC,gBAAiBgB,EACjB,oBAAqBmB,EAActC,IAAI,CAACoC,EAC1C,CACF","sources":["webpack://@mintlify/client/./src/utils/api/cobo/v2.ts"],"sourcesContent":["import * as CryptoJS from 'crypto-js';\nimport { isEmpty } from 'lodash';\nimport { sign_detached, sign_keyPair_fromSeed } from 'tweetnacl-ts/es/sign';\n\nclass CoboV2Custody {\n  privateKey: string;\n\n  constructor(privateKey: string) {\n    this.privateKey = privateKey;\n  }\n\n  public sign(message: string) {\n    const publicKey = this.getPublicKey();\n    const privateKeyBytes = new Uint8Array(Buffer.from(this.privateKey + publicKey, 'hex'));\n    const messageBytes = new Uint8Array(Buffer.from(message, 'hex'));\n    const signature = sign_detached(messageBytes, privateKeyBytes);\n    return Buffer.from(signature).toString('hex');\n  }\n\n  public getPublicKey() {\n    const privateKeyBytes = new Uint8Array(Buffer.from(this.privateKey, 'hex'));\n    const publicKey = sign_keyPair_fromSeed(privateKeyBytes).publicKey;\n    return Buffer.from(publicKey).toString('hex');\n  }\n}\n\ntype CoboV2CustodyKeys = {\n  'Biz-Api-Key': string;\n  'Biz-Api-Nonce': string;\n  'Biz-Api-Signature': string;\n};\n\nexport function getCoboV2CustodyGeneratedKeys(\n  secretKey: string,\n  method: string | undefined,\n  path: string,\n  body: unknown,\n  query: Record<string, unknown>\n): CoboV2CustodyKeys {\n  const nonce = String(new Date().getTime());\n  const queryString = Object.entries(query)\n    .map(([key, value]) => {\n      if (typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'string')\n        return;\n      return `${key}=${encodeURIComponent(value)}`;\n    })\n    .join('&');\n\n  const strToSign = [\n    method?.toUpperCase(),\n    `/v2${path}`,\n    nonce,\n    queryString,\n    isEmpty(body) ? '' : JSON.stringify(body),\n  ].join('|');\n\n  const hash2String = CryptoJS.SHA256(CryptoJS.SHA256(strToSign)).toString();\n\n  const coboV2Custody = new CoboV2Custody(secretKey);\n\n  return {\n    'Biz-Api-Key': coboV2Custody.getPublicKey(),\n    'Biz-Api-Nonce': nonce,\n    'Biz-Api-Signature': coboV2Custody.sign(hash2String),\n  };\n}\n"],"names":["CoboV2Custody","constructor","privateKey","sign","message","publicKey","getPublicKey","privateKeyBytes","Uint8Array","Buffer","from","messageBytes","signature","sign_detached","toString","sign_keyPair_fromSeed","getCoboV2CustodyGeneratedKeys","secretKey","method","path","body","query","nonce","String","Date","getTime","queryString","Object","entries","map","key","value","encodeURIComponent","join","strToSign","toUpperCase","isEmpty","JSON","stringify","hash2String","CryptoJS","coboV2Custody"],"sourceRoot":""}