{"version":3,"file":"906.js","mappings":"6gBAOO,SAASA,EAAQ,CAAEC,MAAAA,CAAK,CAAqB,EAClD,IAAMC,EAAKC,CAAAA,EAAAA,EAAAA,KAAAA,IACL,CAACC,EAAKC,EAAO,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACzBC,EAAeC,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,KAC/BC,CAAAA,SAASC,eAAe,CAC5C,GAAM,CAACC,EAAaC,EAAe,CAAGN,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC7CG,SAASC,eAAe,CAACG,SAAS,CAACC,QAAQ,CAAC,SA+C9C,MA5CoBC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAO9B,GAAI,CACFC,EAAAA,OAAAA,CAAAA,UAAkB,CAPiB,CACnCC,YAAa,GACbC,WAAY,UACZC,MAAOR,EAAc,OAAS,SAChC,GAKE,GAAM,CAAEP,IAAAA,CAAG,CAAE,CAAG,MAAMY,EAAAA,OAAAA,CAAAA,MAAc,CAElCd,EAAGkB,UAAU,CAAC,IAAK,IACnBnB,EACAM,EAAac,OAAO,EAAIC,KAAAA,GAG1BjB,EAAOD,EACT,CAAE,MAAOmB,EAAO,CACdC,QAAQD,KAAK,CAAC,gCAAiCA,EACjD,CACF,EAAG,CAACtB,EAAOC,EAAIS,EAAY,EAwBzB,GAAAc,EAAAC,GAAA,EAACC,MAAAA,CAAIC,IAAKrB,EAAcsB,wBAAyB,CAAEC,OAAQ1B,CAAI,EAAG2B,UAAWC,EAAAA,CAAOA,CAAChC,OAAO,EAEhG","sources":["webpack://@mintlify/client/./src/components/Mermaid/Mermaid.tsx"],"sourcesContent":["'use client';\n\nimport mermaid, { MermaidConfig } from 'mermaid';\nimport { ReactElement, useCallback, useEffect, useId, useRef, useState } from 'react';\n\nimport { Classes } from '@/lib/local/selectors';\n\nexport function Mermaid({ chart }: { chart: string }): ReactElement {\n  const id = useId();\n  const [svg, setSvg] = useState('');\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const htmlElement = document.documentElement;\n  const [isDarkTheme, setIsDarkTheme] = useState(() =>\n    document.documentElement.classList.contains('dark')\n  );\n\n  const renderChart = useCallback(async () => {\n    const mermaidConfig: MermaidConfig = {\n      startOnLoad: false,\n      fontFamily: 'inherit',\n      theme: isDarkTheme ? 'dark' : 'default',\n    };\n\n    try {\n      mermaid.initialize(mermaidConfig);\n\n      const { svg } = await mermaid.render(\n        // Strip invalid characters for `id` attribute.\n        id.replaceAll(':', ''),\n        chart,\n        containerRef.current || undefined\n      );\n\n      setSvg(svg);\n    } catch (error) {\n      console.error('Error while rendering mermaid', error);\n    }\n  }, [chart, id, isDarkTheme]);\n\n  useEffect(() => {\n    const mutationObserver = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        const classList = (mutation.target as HTMLElement).classList;\n        const darkMode = classList.contains('dark');\n        if (darkMode !== isDarkTheme) {\n          setIsDarkTheme(darkMode);\n        }\n      }\n    });\n    mutationObserver.observe(htmlElement, { attributes: true, attributeFilter: ['class'] });\n\n    renderChart().catch((error) => {\n      console.error('Error while rendering mermaid', error);\n    });\n\n    return () => {\n      mutationObserver.disconnect();\n    };\n  }, [htmlElement, isDarkTheme, renderChart]);\n\n  return (\n    <div ref={containerRef} dangerouslySetInnerHTML={{ __html: svg }} className={Classes.Mermaid} />\n  );\n}\n"],"names":["Mermaid","chart","id","useId","svg","setSvg","useState","containerRef","useRef","document","documentElement","isDarkTheme","setIsDarkTheme","classList","contains","useCallback","mermaid","startOnLoad","fontFamily","theme","replaceAll","current","undefined","error","console","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","ref","dangerouslySetInnerHTML","__html","className","Classes"],"sourceRoot":""}