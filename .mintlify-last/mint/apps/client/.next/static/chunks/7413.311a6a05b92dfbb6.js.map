{"version":3,"file":"static/chunks/7413.311a6a05b92dfbb6.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/engine.io-parser/build/esm/commons.js","webpack://_N_E/../../node_modules/engine.io-parser/build/esm/encodePacket.browser.js","webpack://_N_E/../../node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js","webpack://_N_E/../../node_modules/engine.io-parser/build/esm/decodePacket.browser.js","webpack://_N_E/../../node_modules/engine.io-parser/build/esm/index.js","webpack://_N_E/../../node_modules/@socket.io/component-emitter/index.mjs","webpack://_N_E/../../node_modules/engine.io-client/build/esm/globalThis.browser.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/util.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/contrib/parseqs.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/transport.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/contrib/yeast.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/contrib/has-cors.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/transports/polling.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/transports/websocket.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/transports/webtransport.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/transports/index.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/contrib/parseuri.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/socket.js","webpack://_N_E/../../node_modules/engine.io-client/build/esm/index.js","webpack://_N_E/../../node_modules/socket.io-client/build/esm/url.js","webpack://_N_E/../../node_modules/socket.io-parser/build/esm/is-binary.js","webpack://_N_E/../../node_modules/socket.io-parser/build/esm/binary.js","webpack://_N_E/../../node_modules/socket.io-parser/build/esm/index.js","webpack://_N_E/../../node_modules/socket.io-client/build/esm/on.js","webpack://_N_E/../../node_modules/socket.io-client/build/esm/socket.js","webpack://_N_E/../../node_modules/socket.io-client/build/esm/contrib/backo2.js","webpack://_N_E/../../node_modules/socket.io-client/build/esm/manager.js","webpack://_N_E/../../node_modules/socket.io-client/build/esm/index.js"],"sourcesContent":["const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach(key => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n","import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data\n            .arrayBuffer()\n            .then(toArray)\n            .then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, encoded => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n","// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n","import { ERROR_PACKET, PACKET_TYPES_REVERSE } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nexport const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType)\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1)\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type]\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            if (data instanceof Blob) {\n                // from WebSocket + binaryType \"blob\"\n                return data;\n            }\n            else {\n                // from HTTP long-polling or WebTransport\n                return new Blob([data]);\n            }\n        case \"arraybuffer\":\n        default:\n            if (data instanceof ArrayBuffer) {\n                // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n    }\n};\n","import { encodePacket, encodePacketToBinary } from \"./encodePacket.js\";\nimport { decodePacket } from \"./decodePacket.js\";\nimport { ERROR_PACKET } from \"./commons.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport function createPacketEncoderStream() {\n    return new TransformStream({\n        transform(packet, controller) {\n            encodePacketToBinary(packet, encodedPacket => {\n                const payloadLength = encodedPacket.length;\n                let header;\n                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n                if (payloadLength < 126) {\n                    header = new Uint8Array(1);\n                    new DataView(header.buffer).setUint8(0, payloadLength);\n                }\n                else if (payloadLength < 65536) {\n                    header = new Uint8Array(3);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 126);\n                    view.setUint16(1, payloadLength);\n                }\n                else {\n                    header = new Uint8Array(9);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 127);\n                    view.setBigUint64(1, BigInt(payloadLength));\n                }\n                // first bit indicates whether the payload is plain text (0) or binary (1)\n                if (packet.data && typeof packet.data !== \"string\") {\n                    header[0] |= 0x80;\n                }\n                controller.enqueue(header);\n                controller.enqueue(encodedPacket);\n            });\n        }\n    });\n}\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n        return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n        buffer[i] = chunks[0][j++];\n        if (j === chunks[0].length) {\n            chunks.shift();\n            j = 0;\n        }\n    }\n    if (chunks.length && j < chunks[0].length) {\n        chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n}\nexport function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n        TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n        transform(chunk, controller) {\n            chunks.push(chunk);\n            while (true) {\n                if (state === 0 /* READ_HEADER */) {\n                    if (totalLength(chunks) < 1) {\n                        break;\n                    }\n                    const header = concatChunks(chunks, 1);\n                    isBinary = (header[0] & 0x80) === 0x80;\n                    expectedLength = header[0] & 0x7f;\n                    if (expectedLength < 126) {\n                        state = 3 /* READ_PAYLOAD */;\n                    }\n                    else if (expectedLength === 126) {\n                        state = 1 /* READ_EXTENDED_LENGTH_16 */;\n                    }\n                    else {\n                        state = 2 /* READ_EXTENDED_LENGTH_64 */;\n                    }\n                }\n                else if (state === 1 /* READ_EXTENDED_LENGTH_16 */) {\n                    if (totalLength(chunks) < 2) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 2);\n                    expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n                    state = 3 /* READ_PAYLOAD */;\n                }\n                else if (state === 2 /* READ_EXTENDED_LENGTH_64 */) {\n                    if (totalLength(chunks) < 8) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 8);\n                    const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n                    const n = view.getUint32(0);\n                    if (n > Math.pow(2, 53 - 32) - 1) {\n                        // the maximum safe integer in JavaScript is 2^53 - 1\n                        controller.enqueue(ERROR_PACKET);\n                        break;\n                    }\n                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n                    state = 3 /* READ_PAYLOAD */;\n                }\n                else {\n                    if (totalLength(chunks) < expectedLength) {\n                        break;\n                    }\n                    const data = concatChunks(chunks, expectedLength);\n                    controller.enqueue(decodePacket(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n                    state = 0 /* READ_HEADER */;\n                }\n                if (expectedLength === 0 || expectedLength > maxPayload) {\n                    controller.enqueue(ERROR_PACKET);\n                    break;\n                }\n            }\n        }\n    });\n}\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };\n","/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","export const globalThisShim = (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\n","import { globalThisShim as globalThis } from \"./globalThis.js\";\nexport function pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = globalThis.setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = globalThis.clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    }\n    else {\n        obj.setTimeoutFn = globalThis.setTimeout.bind(globalThis);\n        obj.clearTimeoutFn = globalThis.clearTimeout.bind(globalThis);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nexport function byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n","// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nexport function encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nexport function decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n","import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nimport { encode } from \"./contrib/parseqs.js\";\nclass TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     */\n    open() {\n        this.readyState = \"opening\";\n        this.doOpen();\n        return this;\n    }\n    /**\n     * Closes the transport.\n     */\n    close() {\n        if (this.readyState === \"opening\" || this.readyState === \"open\") {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */\n    send(packets) {\n        if (this.readyState === \"open\") {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */\n    pause(onPause) { }\n    createUri(schema, query = {}) {\n        return (schema +\n            \"://\" +\n            this._hostname() +\n            this._port() +\n            this.opts.path +\n            this._query(query));\n    }\n    _hostname() {\n        const hostname = this.opts.hostname;\n        return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    }\n    _port() {\n        if (this.opts.port &&\n            ((this.opts.secure && Number(this.opts.port !== 443)) ||\n                (!this.opts.secure && Number(this.opts.port) !== 80))) {\n            return \":\" + this.opts.port;\n        }\n        else {\n            return \"\";\n        }\n    }\n    _query(query) {\n        const encodedQuery = encode(query);\n        return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    }\n}\n","// imported from https://github.com/unshiftio/yeast\n'use strict';\nconst alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''), length = 64, map = {};\nlet seed = 0, i = 0, prev;\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nexport function encode(num) {\n    let encoded = '';\n    do {\n        encoded = alphabet[num % length] + encoded;\n        num = Math.floor(num / length);\n    } while (num > 0);\n    return encoded;\n}\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nexport function decode(str) {\n    let decoded = 0;\n    for (i = 0; i < str.length; i++) {\n        decoded = decoded * length + map[str.charAt(i)];\n    }\n    return decoded;\n}\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nexport function yeast() {\n    const now = encode(+new Date());\n    if (now !== prev)\n        return seed = 0, prev = now;\n    return now + '.' + encode(seed++);\n}\n//\n// Map each character to its index.\n//\nfor (; i < length; i++)\n    map[alphabet[i]] = i;\n","// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n    value = typeof XMLHttpRequest !== 'undefined' &&\n        'withCredentials' in new XMLHttpRequest();\n}\ncatch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n}\nexport const hasCORS = value;\n","// browser shim for xmlhttprequest module\nimport { hasCORS } from \"../contrib/has-cors.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\nexport function XHR(opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\nexport function createCookieJar() { }\n","import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nimport { createCookieJar, XHR as XMLHttpRequest, } from \"./xmlhttprequest.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\nfunction empty() { }\nconst hasXHR2 = (function () {\n    const xhr = new XMLHttpRequest({\n        xdomain: false,\n    });\n    return null != xhr.responseType;\n})();\nexport class Polling extends Transport {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @package\n     */\n    constructor(opts) {\n        super(opts);\n        this.polling = false;\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n        }\n        /**\n         * XHR supports binary\n         */\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n        if (this.opts.withCredentials) {\n            this.cookieJar = createCookieJar();\n        }\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n    /**\n     * Creates a request.\n     *\n     * @param {String} method\n     * @private\n     */\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd, cookieJar: this.cookieJar }, this.opts);\n        return new Request(this.uri(), opts);\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data,\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexport class Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @package\n     */\n    constructor(uri, opts) {\n        super();\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.method = opts.method || \"GET\";\n        this.uri = uri;\n        this.data = undefined !== opts.data ? opts.data : null;\n        this.create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @private\n     */\n    create() {\n        var _a;\n        const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this.opts.xd;\n        const xhr = (this.xhr = new XMLHttpRequest(opts));\n        try {\n            xhr.open(this.method, this.uri, true);\n            try {\n                if (this.opts.extraHeaders) {\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this.opts.extraHeaders) {\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this.method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            (_a = this.opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this.opts.withCredentials;\n            }\n            if (this.opts.requestTimeout) {\n                xhr.timeout = this.opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                var _a;\n                if (xhr.readyState === 3) {\n                    (_a = this.opts.cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(xhr);\n                }\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this.onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this.data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this.onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this.index = Request.requestsCount++;\n            Request.requests[this.index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @private\n     */\n    onError(err) {\n        this.emitReserved(\"error\", err, this.xhr);\n        this.cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @private\n     */\n    cleanup(fromError) {\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n            return;\n        }\n        this.xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this.xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this.index];\n        }\n        this.xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @private\n     */\n    onLoad() {\n        const data = this.xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this.cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @package\n     */\n    abort() {\n        this.cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\n","import { globalThisShim as globalThis } from \"../globalThis.js\";\nexport const nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return (cb) => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexport const WebSocket = globalThis.WebSocket || globalThis.MozWebSocket;\nexport const usingBrowserWebSocket = true;\nexport const defaultBinaryType = \"arraybuffer\";\n","import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { nextTick, usingBrowserWebSocket, WebSocket, } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @param {Object} opts - connection options\n     * @protected\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @private\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n","import { Transport } from \"../transport.js\";\nimport { nextTick } from \"./websocket-constructor.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream, } from \"engine.io-parser\";\nexport class WT extends Transport {\n    get name() {\n        return \"webtransport\";\n    }\n    doOpen() {\n        // @ts-ignore\n        if (typeof WebTransport !== \"function\") {\n            return;\n        }\n        // @ts-ignore\n        this.transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n        this.transport.closed\n            .then(() => {\n            this.onClose();\n        })\n            .catch((err) => {\n            this.onError(\"webtransport error\", err);\n        });\n        // note: we could have used async/await, but that would require some additional polyfills\n        this.transport.ready.then(() => {\n            this.transport.createBidirectionalStream().then((stream) => {\n                const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n                const reader = stream.readable.pipeThrough(decoderStream).getReader();\n                const encoderStream = createPacketEncoderStream();\n                encoderStream.readable.pipeTo(stream.writable);\n                this.writer = encoderStream.writable.getWriter();\n                const read = () => {\n                    reader\n                        .read()\n                        .then(({ done, value }) => {\n                        if (done) {\n                            return;\n                        }\n                        this.onPacket(value);\n                        read();\n                    })\n                        .catch((err) => {\n                    });\n                };\n                read();\n                const packet = { type: \"open\" };\n                if (this.query.sid) {\n                    packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n                }\n                this.writer.write(packet).then(() => this.onOpen());\n            });\n        });\n    }\n    write(packets) {\n        this.writable = false;\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            this.writer.write(packet).then(() => {\n                if (lastPacket) {\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        var _a;\n        (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n}\n","import { Polling } from \"./polling.js\";\nimport { WS } from \"./websocket.js\";\nimport { WT } from \"./webtransport.js\";\nexport const transports = {\n    websocket: WS,\n    webtransport: WT,\n    polling: Polling,\n};\n","// imported from https://github.com/galkn/parseuri\n/**\n * Parses a URI\n *\n * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.\n *\n * See:\n * - https://developer.mozilla.org/en-US/docs/Web/API/URL\n * - https://caniuse.com/url\n * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B\n *\n * History of the parse() method:\n * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c\n * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3\n * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n","import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { defaultBinaryType } from \"./transports/websocket-constructor.js\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts = {}) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\n            \"polling\",\n            \"websocket\",\n            \"webtransport\",\n        ];\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this.beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", (reason) => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this.upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            this.resetPingTimeout();\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\n","import { Socket } from \"./socket.js\";\nexport { Socket };\nexport const protocol = Socket.protocol;\nexport { Transport } from \"./transport.js\";\nexport { transports } from \"./transports/index.js\";\nexport { installTimerFunctions } from \"./util.js\";\nexport { parse } from \"./contrib/parseuri.js\";\nexport { nextTick } from \"./transports/websocket-constructor.js\";\n","import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n","const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n","import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n","export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n","import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        // the timeout flag is optional\n        const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n        return new Promise((resolve, reject) => {\n            args.push((arg1, arg2) => {\n                if (withErr) {\n                    return arg1 ? reject(arg1) : resolve(arg2);\n                }\n                else {\n                    return resolve(arg1);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n","/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n","import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n","import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\n"],"names":["TEXT_ENCODER","TEXT_DECODER","PacketType","PACKET_TYPES","Object","create","PACKET_TYPES_REVERSE","keys","forEach","key","ERROR_PACKET","type","data","withNativeBlob","Blob","prototype","toString","call","withNativeArrayBuffer","ArrayBuffer","isView","obj","buffer","encodePacket","supportsBinary","callback","encodeBlobAsBase64","fileReader","FileReader","onload","content","result","split","readAsDataURL","toArray","Uint8Array","byteOffset","byteLength","chars","lookup","i","length","charCodeAt","decode","bufferLength","base64","len","p","encoded1","encoded2","encoded3","encoded4","arraybuffer","bytes","decodePacket_browser_withNativeArrayBuffer","decodePacket","encodedPacket","binaryType","mapBinary","charAt","decodeBase64Packet","substring","encodePayload","packets","encodedPackets","count","packet","join","String","decodePayload","encodedPayload","decodedPacket","push","totalLength","chunks","reduce","acc","chunk","concatChunks","size","shift","j","slice","Emitter","mixin","on","addEventListener","event","fn","_callbacks","once","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","cb","callbacks","splice","emit","args","emitReserved","listeners","hasListeners","globalThisShim","self","window","Function","pick","attr","k","hasOwnProperty","NATIVE_SET_TIMEOUT","setTimeout","NATIVE_CLEAR_TIMEOUT","clearTimeout","installTimerFunctions","opts","useNativeTimers","setTimeoutFn","bind","clearTimeoutFn","TransportError","Error","constructor","reason","description","context","Transport","writable","query","socket","onError","open","readyState","doOpen","close","doClose","onClose","send","write","onOpen","onData","onPacket","details","pause","onPause","createUri","schema","_hostname","_port","path","_query","hostname","indexOf","port","secure","Number","encodedQuery","parseqs_encode","str","encodeURIComponent","alphabet","map","seed","prev","yeast_encode","num","encoded","Math","floor","yeast","now","Date","value","XMLHttpRequest","err","hasCORS","XHR","xdomain","e","concat","empty","hasXHR2","xhr","responseType","Polling","polling","location","isSSL","protocol","xd","forceBase64","withCredentials","cookieJar","name","poll","total","doPoll","doWrite","uri","timestampRequests","timestampParam","sid","b64","request","assign","Request","req","method","xhrStatus","pollXhr","undefined","_a","extraHeaders","setDisableHeaderCheck","setRequestHeader","addCookies","requestTimeout","timeout","onreadystatechange","parseCookies","status","onLoad","document","index","requestsCount","requests","cleanup","fromError","abort","responseText","unloadHandler","attachEvent","nextTick","Promise","resolve","then","WebSocket","MozWebSocket","isReactNative","navigator","product","toLowerCase","WS","check","protocols","headers","ws","usingBrowserWebSocket","addEventListeners","onopen","autoUnref","_socket","unref","onclose","closeEvent","onmessage","ev","onerror","lastPacket","WT","WebTransport","transport","transportOptions","closed","catch","ready","createBidirectionalStream","decoderStream","createPacketDecoderStream","maxPayload","TextDecoder","state","expectedLength","isBinary","TransformStream","transform","controller","header","headerArray","DataView","getUint16","view","n","getUint32","enqueue","MAX_SAFE_INTEGER","reader","stream","readable","pipeThrough","getReader","encoderStream","payloadLength","setUint8","setUint16","setBigUint64","BigInt","arrayBuffer","TextEncoder","encode","pipeTo","writer","getWriter","read","done","transports","websocket","webtransport","re","parts","parse","src","b","replace","m","exec","source","host","authority","ipv6uri","pathNames","names","queryKey","$0","$1","$2","Socket","writeBuffer","prevBufferLen","agent","upgrade","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","closeOnBeforeunload","parseqs_decode","qs","qry","pairs","l","pair","decodeURIComponent","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","beforeunloadEventListener","offlineEventListener","createTransport","EIO","priorWebsocketSuccess","setTransport","onDrain","probe","failed","onTransportOpen","msg","upgrading","flush","freezeTransport","error","onTransportClose","onupgrade","to","resetPingTimeout","onHandshake","JSON","sendPacket","code","filterUpgrades","getWritablePackets","payloadSize","utf8Length","c","ceil","options","compress","cleanupAndClose","waitForUpgrade","filteredUpgrades","is_binary_withNativeArrayBuffer","is_binary_isView","is_binary_toString","is_binary_withNativeBlob","withNativeFile","File","RESERVED_EVENTS","build_esm_protocol","Encoder","replacer","EVENT","ACK","hasBinary","toJSON","Array","isArray","encodeAsBinary","BINARY_EVENT","BINARY_ACK","nsp","encodeAsString","attachments","stringify","deconstruction","deconstructPacket","buffers","packetData","pack","_deconstructPacket","placeholder","_placeholder","newData","unshift","isObject","Decoder","reviver","add","reconstructor","isBinaryEvent","decodeString","BinaryReconstructor","takeBinaryData","start","buf","next","payload","tryParse","substr","isPayloadValid","CONNECT","DISCONNECT","CONNECT_ERROR","destroy","finishedReconstruction","reconPack","binData","_reconstructPacket","socket_RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","socket_Socket","io","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","_autoConnect","disconnected","subEvents","subs","onpacket","active","_readyState","retries","fromQueue","volatile","_addToQueue","ack","pop","_registerAckCallback","isTransportWritable","engine","notifyOutgoingListeners","ackTimeout","timer","emitWithAck","withErr","reject","arg1","arg2","tryCount","pending","responseArgs","_drainQueue","force","_packet","_sendConnectPacket","_pid","pid","offset","_lastOffset","onconnect","onevent","onack","ondisconnect","message","emitEvent","_anyListeners","listener","sent","emitBuffered","subDestroy","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing","Backoff","ms","min","max","factor","jitter","attempts","duration","pow","rand","random","deviation","reset","setMin","setMax","setJitter","Manager","nsps","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","_parser","parser","socket_io_parser_build_esm_namespaceObject","encoder","decoder","autoConnect","v","_reconnection","_reconnectionAttempts","_reconnectionDelay","_randomizationFactor","_reconnectionDelayMax","_timeout","maybeReconnectOnOpen","_reconnecting","reconnect","skipReconnect","openSubDestroy","errorSub","onping","ondata","ondecoded","_destroy","_close","delay","onreconnect","attempt","cache","esm_lookup","parsed","url","loc","test","ipv6","href","sameNamespace","forceNew","multiplex"],"sourceRoot":""}