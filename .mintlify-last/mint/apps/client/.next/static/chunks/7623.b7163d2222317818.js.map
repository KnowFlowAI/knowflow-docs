{"version":3,"file":"static/chunks/7623.b7163d2222317818.js","mappings":"+gBAOO,SAASA,EAAQ,CAAEC,MAAAA,CAAK,CAAqB,EAClD,IAAMC,EAAKC,CAAAA,EAAAA,EAAAA,KAAAA,IACL,CAACC,EAAKC,EAAO,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACzBC,EAAeC,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MAC7CC,EAAcC,SAASC,eAAe,CACtC,CAACC,EAAaC,EAAe,CAAGP,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC7CI,SAASC,eAAe,CAACG,SAAS,CAACC,QAAQ,CAAC,SAGxCC,EAAcC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAO9B,GAAI,CACFC,EAAAA,CAAOA,CAACC,UAAU,CAPiB,CACnCC,YAAa,GACbC,WAAY,UACZC,MAAOV,EAAc,OAAS,SAChC,GAKE,GAAM,CAAER,IAAAA,CAAG,CAAE,CAAG,MAAMc,EAAAA,CAAOA,CAACK,MAAM,CAElCrB,EAAGsB,UAAU,CAAC,IAAK,IACnBvB,EACAM,EAAakB,OAAO,EAAIC,KAAAA,GAG1BrB,EAAOD,EACT,CAAE,MAAOuB,EAAO,CACdC,QAAQD,KAAK,CAAC,gCAAiCA,EACjD,CACF,EAAG,CAAC1B,EAAOC,EAAIU,EAAY,EAuB3B,MArBAiB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,IAAMC,EAAmB,IAAIC,iBAAiB,IAC5C,IAAK,IAAMC,KAAYC,EAAW,CAEhC,IAAMC,EAAWpB,EADWqB,MAAM,CAAiBrB,SAAS,CACjCC,QAAQ,CAAC,QAChCmB,IAAatB,GACfC,EAAeqB,EAEnB,CACF,GAOA,OANAJ,EAAiBM,OAAO,CAAC3B,EAAa,CAAE4B,WAAY,GAAMC,gBAAiB,CAAC,QAAQ,GAEpFtB,IAAcuB,KAAK,CAAC,IAClBX,QAAQD,KAAK,CAAC,gCAAiCA,EACjD,GAEO,KACLG,EAAiBU,UAAU,EAC7B,CACF,EAAG,CAAC/B,EAAaG,EAAaI,EAAY,EAGxC,GAAAyB,EAAAC,GAAA,EAACC,MAAAA,CAAIC,IAAKrC,EAAcsC,wBAAyB,CAAEC,OAAQ1C,CAAI,EAAG2C,UAAWC,EAAAA,CAAOA,CAAChD,OAAO,EAEhG","sources":["webpack://_N_E/./src/components/Mermaid/Mermaid.tsx"],"sourcesContent":["'use client';\n\nimport mermaid, { MermaidConfig } from 'mermaid';\nimport { ReactElement, useCallback, useEffect, useId, useRef, useState } from 'react';\n\nimport { Classes } from '@/lib/local/selectors';\n\nexport function Mermaid({ chart }: { chart: string }): ReactElement {\n  const id = useId();\n  const [svg, setSvg] = useState('');\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const htmlElement = document.documentElement;\n  const [isDarkTheme, setIsDarkTheme] = useState(() =>\n    document.documentElement.classList.contains('dark')\n  );\n\n  const renderChart = useCallback(async () => {\n    const mermaidConfig: MermaidConfig = {\n      startOnLoad: false,\n      fontFamily: 'inherit',\n      theme: isDarkTheme ? 'dark' : 'default',\n    };\n\n    try {\n      mermaid.initialize(mermaidConfig);\n\n      const { svg } = await mermaid.render(\n        // Strip invalid characters for `id` attribute.\n        id.replaceAll(':', ''),\n        chart,\n        containerRef.current || undefined\n      );\n\n      setSvg(svg);\n    } catch (error) {\n      console.error('Error while rendering mermaid', error);\n    }\n  }, [chart, id, isDarkTheme]);\n\n  useEffect(() => {\n    const mutationObserver = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        const classList = (mutation.target as HTMLElement).classList;\n        const darkMode = classList.contains('dark');\n        if (darkMode !== isDarkTheme) {\n          setIsDarkTheme(darkMode);\n        }\n      }\n    });\n    mutationObserver.observe(htmlElement, { attributes: true, attributeFilter: ['class'] });\n\n    renderChart().catch((error) => {\n      console.error('Error while rendering mermaid', error);\n    });\n\n    return () => {\n      mutationObserver.disconnect();\n    };\n  }, [htmlElement, isDarkTheme, renderChart]);\n\n  return (\n    <div ref={containerRef} dangerouslySetInnerHTML={{ __html: svg }} className={Classes.Mermaid} />\n  );\n}\n"],"names":["Mermaid","chart","id","useId","svg","setSvg","useState","containerRef","useRef","htmlElement","document","documentElement","isDarkTheme","setIsDarkTheme","classList","contains","renderChart","useCallback","mermaid","initialize","startOnLoad","fontFamily","theme","render","replaceAll","current","undefined","error","console","useEffect","mutationObserver","MutationObserver","mutation","mutations","darkMode","target","observe","attributes","attributeFilter","catch","disconnect","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","ref","dangerouslySetInnerHTML","__html","className","Classes"],"sourceRoot":""}