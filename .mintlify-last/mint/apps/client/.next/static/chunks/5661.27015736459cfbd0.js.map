{"version":3,"file":"static/chunks/5661.27015736459cfbd0.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/mermaid/dist/chunks/mermaid.core/chunk-KFBOBJHC.mjs","webpack://_N_E/../../node_modules/mermaid/dist/chunks/mermaid.core/chunk-TMUBEWPD.mjs","webpack://_N_E/../../node_modules/mermaid/dist/chunks/mermaid.core/gitGraphDiagram-NRZ2UAAF.mjs"],"sourcesContent":["import {\n  __name\n} from \"./chunk-6DBFFHIP.mjs\";\n\n// src/utils/imperativeState.ts\nvar ImperativeState = class {\n  /**\n   * @param init - Function that creates the default state.\n   */\n  constructor(init) {\n    this.init = init;\n    this.records = this.init();\n  }\n  static {\n    __name(this, \"ImperativeState\");\n  }\n  reset() {\n    this.records = this.init();\n  }\n};\n\nexport {\n  ImperativeState\n};\n","import {\n  __name\n} from \"./chunk-6DBFFHIP.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  populateCommonDb\n} from \"./chunk-TMUBEWPD.mjs\";\nimport {\n  ImperativeState\n} from \"./chunk-KFBOBJHC.mjs\";\nimport {\n  cleanAndMerge,\n  random,\n  utils_default\n} from \"./chunk-7DKRZKHE.mjs\";\nimport {\n  __name,\n  clear,\n  common_default,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getConfig2,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle,\n  setupGraphViewbox2 as setupGraphViewbox\n} from \"./chunk-6DBFFHIP.mjs\";\n\n// src/diagrams/git/gitGraphParser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/git/gitGraphTypes.ts\nvar commitType = {\n  NORMAL: 0,\n  REVERSE: 1,\n  HIGHLIGHT: 2,\n  MERGE: 3,\n  CHERRY_PICK: 4\n};\n\n// src/diagrams/git/gitGraphAst.ts\nvar DEFAULT_GITGRAPH_CONFIG = defaultConfig_default.gitGraph;\nvar getConfig3 = /* @__PURE__ */ __name(() => {\n  const config = cleanAndMerge({\n    ...DEFAULT_GITGRAPH_CONFIG,\n    ...getConfig().gitGraph\n  });\n  return config;\n}, \"getConfig\");\nvar state = new ImperativeState(() => {\n  const config = getConfig3();\n  const mainBranchName = config.mainBranchName;\n  const mainBranchOrder = config.mainBranchOrder;\n  return {\n    mainBranchName,\n    commits: /* @__PURE__ */ new Map(),\n    head: null,\n    branchConfig: /* @__PURE__ */ new Map([[mainBranchName, { name: mainBranchName, order: mainBranchOrder }]]),\n    branches: /* @__PURE__ */ new Map([[mainBranchName, null]]),\n    currBranch: mainBranchName,\n    direction: \"LR\",\n    seq: 0,\n    options: {}\n  };\n});\nfunction getID() {\n  return random({ length: 7 });\n}\n__name(getID, \"getID\");\nfunction uniqBy(list, fn) {\n  const recordMap = /* @__PURE__ */ Object.create(null);\n  return list.reduce((out, item) => {\n    const key = fn(item);\n    if (!recordMap[key]) {\n      recordMap[key] = true;\n      out.push(item);\n    }\n    return out;\n  }, []);\n}\n__name(uniqBy, \"uniqBy\");\nvar setDirection = /* @__PURE__ */ __name(function(dir2) {\n  state.records.direction = dir2;\n}, \"setDirection\");\nvar setOptions = /* @__PURE__ */ __name(function(rawOptString) {\n  log.debug(\"options str\", rawOptString);\n  rawOptString = rawOptString?.trim();\n  rawOptString = rawOptString || \"{}\";\n  try {\n    state.records.options = JSON.parse(rawOptString);\n  } catch (e) {\n    log.error(\"error while parsing gitGraph options\", e.message);\n  }\n}, \"setOptions\");\nvar getOptions = /* @__PURE__ */ __name(function() {\n  return state.records.options;\n}, \"getOptions\");\nvar commit = /* @__PURE__ */ __name(function(commitDB) {\n  let msg = commitDB.msg;\n  let id = commitDB.id;\n  const type = commitDB.type;\n  let tags = commitDB.tags;\n  log.info(\"commit\", msg, id, type, tags);\n  log.debug(\"Entering commit:\", msg, id, type, tags);\n  const config = getConfig3();\n  id = common_default.sanitizeText(id, config);\n  msg = common_default.sanitizeText(msg, config);\n  tags = tags?.map((tag) => common_default.sanitizeText(tag, config));\n  const newCommit = {\n    id: id ? id : state.records.seq + \"-\" + getID(),\n    message: msg,\n    seq: state.records.seq++,\n    type: type ?? commitType.NORMAL,\n    tags: tags ?? [],\n    parents: state.records.head == null ? [] : [state.records.head.id],\n    branch: state.records.currBranch\n  };\n  state.records.head = newCommit;\n  log.info(\"main branch\", config.mainBranchName);\n  state.records.commits.set(newCommit.id, newCommit);\n  state.records.branches.set(state.records.currBranch, newCommit.id);\n  log.debug(\"in pushCommit \" + newCommit.id);\n}, \"commit\");\nvar branch = /* @__PURE__ */ __name(function(branchDB) {\n  let name = branchDB.name;\n  const order = branchDB.order;\n  name = common_default.sanitizeText(name, getConfig3());\n  if (state.records.branches.has(name)) {\n    throw new Error(\n      `Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using \"checkout ${name}\")`\n    );\n  }\n  state.records.branches.set(name, state.records.head != null ? state.records.head.id : null);\n  state.records.branchConfig.set(name, { name, order });\n  checkout(name);\n  log.debug(\"in createBranch\");\n}, \"branch\");\nvar merge = /* @__PURE__ */ __name((mergeDB) => {\n  let otherBranch = mergeDB.branch;\n  let customId = mergeDB.id;\n  const overrideType = mergeDB.type;\n  const customTags = mergeDB.tags;\n  const config = getConfig3();\n  otherBranch = common_default.sanitizeText(otherBranch, config);\n  if (customId) {\n    customId = common_default.sanitizeText(customId, config);\n  }\n  const currentBranchCheck = state.records.branches.get(state.records.currBranch);\n  const otherBranchCheck = state.records.branches.get(otherBranch);\n  const currentCommit = currentBranchCheck ? state.records.commits.get(currentBranchCheck) : void 0;\n  const otherCommit = otherBranchCheck ? state.records.commits.get(otherBranchCheck) : void 0;\n  if (currentCommit && otherCommit && currentCommit.branch === otherBranch) {\n    throw new Error(`Cannot merge branch '${otherBranch}' into itself.`);\n  }\n  if (state.records.currBranch === otherBranch) {\n    const error = new Error('Incorrect usage of \"merge\". Cannot merge a branch to itself');\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: [\"branch abc\"]\n    };\n    throw error;\n  }\n  if (currentCommit === void 0 || !currentCommit) {\n    const error = new Error(\n      `Incorrect usage of \"merge\". Current branch (${state.records.currBranch})has no commits`\n    );\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: [\"commit\"]\n    };\n    throw error;\n  }\n  if (!state.records.branches.has(otherBranch)) {\n    const error = new Error(\n      'Incorrect usage of \"merge\". Branch to be merged (' + otherBranch + \") does not exist\"\n    );\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: [`branch ${otherBranch}`]\n    };\n    throw error;\n  }\n  if (otherCommit === void 0 || !otherCommit) {\n    const error = new Error(\n      'Incorrect usage of \"merge\". Branch to be merged (' + otherBranch + \") has no commits\"\n    );\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: ['\"commit\"']\n    };\n    throw error;\n  }\n  if (currentCommit === otherCommit) {\n    const error = new Error('Incorrect usage of \"merge\". Both branches have same head');\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: [\"branch abc\"]\n    };\n    throw error;\n  }\n  if (customId && state.records.commits.has(customId)) {\n    const error = new Error(\n      'Incorrect usage of \"merge\". Commit with id:' + customId + \" already exists, use different custom Id\"\n    );\n    error.hash = {\n      text: `merge ${otherBranch} ${customId} ${overrideType} ${customTags?.join(\" \")}`,\n      token: `merge ${otherBranch} ${customId} ${overrideType} ${customTags?.join(\" \")}`,\n      expected: [\n        `merge ${otherBranch} ${customId}_UNIQUE ${overrideType} ${customTags?.join(\" \")}`\n      ]\n    };\n    throw error;\n  }\n  const verifiedBranch = otherBranchCheck ? otherBranchCheck : \"\";\n  const commit2 = {\n    id: customId || `${state.records.seq}-${getID()}`,\n    message: `merged branch ${otherBranch} into ${state.records.currBranch}`,\n    seq: state.records.seq++,\n    parents: state.records.head == null ? [] : [state.records.head.id, verifiedBranch],\n    branch: state.records.currBranch,\n    type: commitType.MERGE,\n    customType: overrideType,\n    customId: customId ? true : false,\n    tags: customTags ?? []\n  };\n  state.records.head = commit2;\n  state.records.commits.set(commit2.id, commit2);\n  state.records.branches.set(state.records.currBranch, commit2.id);\n  log.debug(state.records.branches);\n  log.debug(\"in mergeBranch\");\n}, \"merge\");\nvar cherryPick = /* @__PURE__ */ __name(function(cherryPickDB) {\n  let sourceId = cherryPickDB.id;\n  let targetId = cherryPickDB.targetId;\n  let tags = cherryPickDB.tags;\n  let parentCommitId = cherryPickDB.parent;\n  log.debug(\"Entering cherryPick:\", sourceId, targetId, tags);\n  const config = getConfig3();\n  sourceId = common_default.sanitizeText(sourceId, config);\n  targetId = common_default.sanitizeText(targetId, config);\n  tags = tags?.map((tag) => common_default.sanitizeText(tag, config));\n  parentCommitId = common_default.sanitizeText(parentCommitId, config);\n  if (!sourceId || !state.records.commits.has(sourceId)) {\n    const error = new Error(\n      'Incorrect usage of \"cherryPick\". Source commit id should exist and provided'\n    );\n    error.hash = {\n      text: `cherryPick ${sourceId} ${targetId}`,\n      token: `cherryPick ${sourceId} ${targetId}`,\n      expected: [\"cherry-pick abc\"]\n    };\n    throw error;\n  }\n  const sourceCommit = state.records.commits.get(sourceId);\n  if (sourceCommit === void 0 || !sourceCommit) {\n    throw new Error('Incorrect usage of \"cherryPick\". Source commit id should exist and provided');\n  }\n  if (parentCommitId && !(Array.isArray(sourceCommit.parents) && sourceCommit.parents.includes(parentCommitId))) {\n    const error = new Error(\n      \"Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.\"\n    );\n    throw error;\n  }\n  const sourceCommitBranch = sourceCommit.branch;\n  if (sourceCommit.type === commitType.MERGE && !parentCommitId) {\n    const error = new Error(\n      \"Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.\"\n    );\n    throw error;\n  }\n  if (!targetId || !state.records.commits.has(targetId)) {\n    if (sourceCommitBranch === state.records.currBranch) {\n      const error = new Error(\n        'Incorrect usage of \"cherryPick\". Source commit is already on current branch'\n      );\n      error.hash = {\n        text: `cherryPick ${sourceId} ${targetId}`,\n        token: `cherryPick ${sourceId} ${targetId}`,\n        expected: [\"cherry-pick abc\"]\n      };\n      throw error;\n    }\n    const currentCommitId = state.records.branches.get(state.records.currBranch);\n    if (currentCommitId === void 0 || !currentCommitId) {\n      const error = new Error(\n        `Incorrect usage of \"cherry-pick\". Current branch (${state.records.currBranch})has no commits`\n      );\n      error.hash = {\n        text: `cherryPick ${sourceId} ${targetId}`,\n        token: `cherryPick ${sourceId} ${targetId}`,\n        expected: [\"cherry-pick abc\"]\n      };\n      throw error;\n    }\n    const currentCommit = state.records.commits.get(currentCommitId);\n    if (currentCommit === void 0 || !currentCommit) {\n      const error = new Error(\n        `Incorrect usage of \"cherry-pick\". Current branch (${state.records.currBranch})has no commits`\n      );\n      error.hash = {\n        text: `cherryPick ${sourceId} ${targetId}`,\n        token: `cherryPick ${sourceId} ${targetId}`,\n        expected: [\"cherry-pick abc\"]\n      };\n      throw error;\n    }\n    const commit2 = {\n      id: state.records.seq + \"-\" + getID(),\n      message: `cherry-picked ${sourceCommit?.message} into ${state.records.currBranch}`,\n      seq: state.records.seq++,\n      parents: state.records.head == null ? [] : [state.records.head.id, sourceCommit.id],\n      branch: state.records.currBranch,\n      type: commitType.CHERRY_PICK,\n      tags: tags ? tags.filter(Boolean) : [\n        `cherry-pick:${sourceCommit.id}${sourceCommit.type === commitType.MERGE ? `|parent:${parentCommitId}` : \"\"}`\n      ]\n    };\n    state.records.head = commit2;\n    state.records.commits.set(commit2.id, commit2);\n    state.records.branches.set(state.records.currBranch, commit2.id);\n    log.debug(state.records.branches);\n    log.debug(\"in cherryPick\");\n  }\n}, \"cherryPick\");\nvar checkout = /* @__PURE__ */ __name(function(branch2) {\n  branch2 = common_default.sanitizeText(branch2, getConfig3());\n  if (!state.records.branches.has(branch2)) {\n    const error = new Error(\n      `Trying to checkout branch which is not yet created. (Help try using \"branch ${branch2}\")`\n    );\n    error.hash = {\n      text: `checkout ${branch2}`,\n      token: `checkout ${branch2}`,\n      expected: [`branch ${branch2}`]\n    };\n    throw error;\n  } else {\n    state.records.currBranch = branch2;\n    const id = state.records.branches.get(state.records.currBranch);\n    if (id === void 0 || !id) {\n      state.records.head = null;\n    } else {\n      state.records.head = state.records.commits.get(id) ?? null;\n    }\n  }\n}, \"checkout\");\nfunction upsert(arr, key, newVal) {\n  const index = arr.indexOf(key);\n  if (index === -1) {\n    arr.push(newVal);\n  } else {\n    arr.splice(index, 1, newVal);\n  }\n}\n__name(upsert, \"upsert\");\nfunction prettyPrintCommitHistory(commitArr) {\n  const commit2 = commitArr.reduce((out, commit3) => {\n    if (out.seq > commit3.seq) {\n      return out;\n    }\n    return commit3;\n  }, commitArr[0]);\n  let line = \"\";\n  commitArr.forEach(function(c) {\n    if (c === commit2) {\n      line += \"\t*\";\n    } else {\n      line += \"\t|\";\n    }\n  });\n  const label = [line, commit2.id, commit2.seq];\n  for (const branch2 in state.records.branches) {\n    if (state.records.branches.get(branch2) === commit2.id) {\n      label.push(branch2);\n    }\n  }\n  log.debug(label.join(\" \"));\n  if (commit2.parents && commit2.parents.length == 2 && commit2.parents[0] && commit2.parents[1]) {\n    const newCommit = state.records.commits.get(commit2.parents[0]);\n    upsert(commitArr, commit2, newCommit);\n    if (commit2.parents[1]) {\n      commitArr.push(state.records.commits.get(commit2.parents[1]));\n    }\n  } else if (commit2.parents.length == 0) {\n    return;\n  } else {\n    if (commit2.parents[0]) {\n      const newCommit = state.records.commits.get(commit2.parents[0]);\n      upsert(commitArr, commit2, newCommit);\n    }\n  }\n  commitArr = uniqBy(commitArr, (c) => c.id);\n  prettyPrintCommitHistory(commitArr);\n}\n__name(prettyPrintCommitHistory, \"prettyPrintCommitHistory\");\nvar prettyPrint = /* @__PURE__ */ __name(function() {\n  log.debug(state.records.commits);\n  const node = getCommitsArray()[0];\n  prettyPrintCommitHistory([node]);\n}, \"prettyPrint\");\nvar clear2 = /* @__PURE__ */ __name(function() {\n  state.reset();\n  clear();\n}, \"clear\");\nvar getBranchesAsObjArray = /* @__PURE__ */ __name(function() {\n  const branchesArray = [...state.records.branchConfig.values()].map((branchConfig, i) => {\n    if (branchConfig.order !== null && branchConfig.order !== void 0) {\n      return branchConfig;\n    }\n    return {\n      ...branchConfig,\n      order: parseFloat(`0.${i}`)\n    };\n  }).sort((a, b) => (a.order ?? 0) - (b.order ?? 0)).map(({ name }) => ({ name }));\n  return branchesArray;\n}, \"getBranchesAsObjArray\");\nvar getBranches = /* @__PURE__ */ __name(function() {\n  return state.records.branches;\n}, \"getBranches\");\nvar getCommits = /* @__PURE__ */ __name(function() {\n  return state.records.commits;\n}, \"getCommits\");\nvar getCommitsArray = /* @__PURE__ */ __name(function() {\n  const commitArr = [...state.records.commits.values()];\n  commitArr.forEach(function(o) {\n    log.debug(o.id);\n  });\n  commitArr.sort((a, b) => a.seq - b.seq);\n  return commitArr;\n}, \"getCommitsArray\");\nvar getCurrentBranch = /* @__PURE__ */ __name(function() {\n  return state.records.currBranch;\n}, \"getCurrentBranch\");\nvar getDirection = /* @__PURE__ */ __name(function() {\n  return state.records.direction;\n}, \"getDirection\");\nvar getHead = /* @__PURE__ */ __name(function() {\n  return state.records.head;\n}, \"getHead\");\nvar db = {\n  commitType,\n  getConfig: getConfig3,\n  setDirection,\n  setOptions,\n  getOptions,\n  commit,\n  branch,\n  merge,\n  cherryPick,\n  checkout,\n  //reset,\n  prettyPrint,\n  clear: clear2,\n  getBranchesAsObjArray,\n  getBranches,\n  getCommits,\n  getCommitsArray,\n  getCurrentBranch,\n  getDirection,\n  getHead,\n  setAccTitle,\n  getAccTitle,\n  getAccDescription,\n  setAccDescription,\n  setDiagramTitle,\n  getDiagramTitle\n};\n\n// src/diagrams/git/gitGraphParser.ts\nvar populate = /* @__PURE__ */ __name((ast, db2) => {\n  populateCommonDb(ast, db2);\n  if (ast.dir) {\n    db2.setDirection(ast.dir);\n  }\n  for (const statement of ast.statements) {\n    parseStatement(statement, db2);\n  }\n}, \"populate\");\nvar parseStatement = /* @__PURE__ */ __name((statement, db2) => {\n  const parsers = {\n    Commit: /* @__PURE__ */ __name((stmt) => db2.commit(parseCommit(stmt)), \"Commit\"),\n    Branch: /* @__PURE__ */ __name((stmt) => db2.branch(parseBranch(stmt)), \"Branch\"),\n    Merge: /* @__PURE__ */ __name((stmt) => db2.merge(parseMerge(stmt)), \"Merge\"),\n    Checkout: /* @__PURE__ */ __name((stmt) => db2.checkout(parseCheckout(stmt)), \"Checkout\"),\n    CherryPicking: /* @__PURE__ */ __name((stmt) => db2.cherryPick(parseCherryPicking(stmt)), \"CherryPicking\")\n  };\n  const parser2 = parsers[statement.$type];\n  if (parser2) {\n    parser2(statement);\n  } else {\n    log.error(`Unknown statement type: ${statement.$type}`);\n  }\n}, \"parseStatement\");\nvar parseCommit = /* @__PURE__ */ __name((commit2) => {\n  const commitDB = {\n    id: commit2.id,\n    msg: commit2.message ?? \"\",\n    type: commit2.type !== void 0 ? commitType[commit2.type] : commitType.NORMAL,\n    tags: commit2.tags ?? void 0\n  };\n  return commitDB;\n}, \"parseCommit\");\nvar parseBranch = /* @__PURE__ */ __name((branch2) => {\n  const branchDB = {\n    name: branch2.name,\n    order: branch2.order ?? 0\n  };\n  return branchDB;\n}, \"parseBranch\");\nvar parseMerge = /* @__PURE__ */ __name((merge2) => {\n  const mergeDB = {\n    branch: merge2.branch,\n    id: merge2.id ?? \"\",\n    type: merge2.type !== void 0 ? commitType[merge2.type] : void 0,\n    tags: merge2.tags ?? void 0\n  };\n  return mergeDB;\n}, \"parseMerge\");\nvar parseCheckout = /* @__PURE__ */ __name((checkout2) => {\n  const branch2 = checkout2.branch;\n  return branch2;\n}, \"parseCheckout\");\nvar parseCherryPicking = /* @__PURE__ */ __name((cherryPicking) => {\n  const cherryPickDB = {\n    id: cherryPicking.id,\n    targetId: \"\",\n    tags: cherryPicking.tags?.length === 0 ? void 0 : cherryPicking.tags,\n    parent: cherryPicking.parent\n  };\n  return cherryPickDB;\n}, \"parseCherryPicking\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"gitGraph\", input);\n    log.debug(ast);\n    populate(ast, db);\n  }, \"parse\")\n};\nif (void 0) {\n  const { it, expect, describe } = void 0;\n  const mockDB = {\n    commitType,\n    setDirection: vi.fn(),\n    commit: vi.fn(),\n    branch: vi.fn(),\n    merge: vi.fn(),\n    cherryPick: vi.fn(),\n    checkout: vi.fn()\n  };\n  describe(\"GitGraph Parser\", () => {\n    it(\"should parse a commit statement\", () => {\n      const commit2 = {\n        $type: \"Commit\",\n        id: \"1\",\n        message: \"test\",\n        tags: [\"tag1\", \"tag2\"],\n        type: \"NORMAL\"\n      };\n      parseStatement(commit2, mockDB);\n      expect(mockDB.commit).toHaveBeenCalledWith({\n        id: \"1\",\n        msg: \"test\",\n        tags: [\"tag1\", \"tag2\"],\n        type: 0\n      });\n    });\n    it(\"should parse a branch statement\", () => {\n      const branch2 = {\n        $type: \"Branch\",\n        name: \"newBranch\",\n        order: 1\n      };\n      parseStatement(branch2, mockDB);\n      expect(mockDB.branch).toHaveBeenCalledWith({ name: \"newBranch\", order: 1 });\n    });\n    it(\"should parse a checkout statement\", () => {\n      const checkout2 = {\n        $type: \"Checkout\",\n        branch: \"newBranch\"\n      };\n      parseStatement(checkout2, mockDB);\n      expect(mockDB.checkout).toHaveBeenCalledWith(\"newBranch\");\n    });\n    it(\"should parse a merge statement\", () => {\n      const merge2 = {\n        $type: \"Merge\",\n        branch: \"newBranch\",\n        id: \"1\",\n        tags: [\"tag1\", \"tag2\"],\n        type: \"NORMAL\"\n      };\n      parseStatement(merge2, mockDB);\n      expect(mockDB.merge).toHaveBeenCalledWith({\n        branch: \"newBranch\",\n        id: \"1\",\n        tags: [\"tag1\", \"tag2\"],\n        type: 0\n      });\n    });\n    it(\"should parse a cherry picking statement\", () => {\n      const cherryPick2 = {\n        $type: \"CherryPicking\",\n        id: \"1\",\n        tags: [\"tag1\", \"tag2\"],\n        parent: \"2\"\n      };\n      parseStatement(cherryPick2, mockDB);\n      expect(mockDB.cherryPick).toHaveBeenCalledWith({\n        id: \"1\",\n        targetId: \"\",\n        parent: \"2\",\n        tags: [\"tag1\", \"tag2\"]\n      });\n    });\n    it(\"should parse a langium generated gitGraph ast\", () => {\n      const dummy = {\n        $type: \"GitGraph\",\n        statements: []\n      };\n      const gitGraphAst = {\n        $type: \"GitGraph\",\n        statements: [\n          {\n            $container: dummy,\n            $type: \"Commit\",\n            id: \"1\",\n            message: \"test\",\n            tags: [\"tag1\", \"tag2\"],\n            type: \"NORMAL\"\n          },\n          {\n            $container: dummy,\n            $type: \"Branch\",\n            name: \"newBranch\",\n            order: 1\n          },\n          {\n            $container: dummy,\n            $type: \"Merge\",\n            branch: \"newBranch\",\n            id: \"1\",\n            tags: [\"tag1\", \"tag2\"],\n            type: \"NORMAL\"\n          },\n          {\n            $container: dummy,\n            $type: \"Checkout\",\n            branch: \"newBranch\"\n          },\n          {\n            $container: dummy,\n            $type: \"CherryPicking\",\n            id: \"1\",\n            tags: [\"tag1\", \"tag2\"],\n            parent: \"2\"\n          }\n        ]\n      };\n      populate(gitGraphAst, mockDB);\n      expect(mockDB.commit).toHaveBeenCalledWith({\n        id: \"1\",\n        msg: \"test\",\n        tags: [\"tag1\", \"tag2\"],\n        type: 0\n      });\n      expect(mockDB.branch).toHaveBeenCalledWith({ name: \"newBranch\", order: 1 });\n      expect(mockDB.merge).toHaveBeenCalledWith({\n        branch: \"newBranch\",\n        id: \"1\",\n        tags: [\"tag1\", \"tag2\"],\n        type: 0\n      });\n      expect(mockDB.checkout).toHaveBeenCalledWith(\"newBranch\");\n    });\n  });\n}\n\n// src/diagrams/git/gitGraphRenderer.ts\nimport { select } from \"d3\";\nvar DEFAULT_CONFIG = getConfig2();\nvar DEFAULT_GITGRAPH_CONFIG2 = DEFAULT_CONFIG?.gitGraph;\nvar LAYOUT_OFFSET = 10;\nvar COMMIT_STEP = 40;\nvar PX = 4;\nvar PY = 2;\nvar THEME_COLOR_LIMIT = 8;\nvar branchPos = /* @__PURE__ */ new Map();\nvar commitPos = /* @__PURE__ */ new Map();\nvar defaultPos = 30;\nvar allCommitsDict = /* @__PURE__ */ new Map();\nvar lanes = [];\nvar maxPos = 0;\nvar dir = \"LR\";\nvar clear3 = /* @__PURE__ */ __name(() => {\n  branchPos.clear();\n  commitPos.clear();\n  allCommitsDict.clear();\n  maxPos = 0;\n  lanes = [];\n  dir = \"LR\";\n}, \"clear\");\nvar drawText = /* @__PURE__ */ __name((txt) => {\n  const svgLabel = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n  const rows = typeof txt === \"string\" ? txt.split(/\\\\n|\\n|<br\\s*\\/?>/gi) : txt;\n  rows.forEach((row) => {\n    const tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n    tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n    tspan.setAttribute(\"dy\", \"1em\");\n    tspan.setAttribute(\"x\", \"0\");\n    tspan.setAttribute(\"class\", \"row\");\n    tspan.textContent = row.trim();\n    svgLabel.appendChild(tspan);\n  });\n  return svgLabel;\n}, \"drawText\");\nvar findClosestParent = /* @__PURE__ */ __name((parents) => {\n  let closestParent;\n  let comparisonFunc;\n  let targetPosition;\n  if (dir === \"BT\") {\n    comparisonFunc = /* @__PURE__ */ __name((a, b) => a <= b, \"comparisonFunc\");\n    targetPosition = Infinity;\n  } else {\n    comparisonFunc = /* @__PURE__ */ __name((a, b) => a >= b, \"comparisonFunc\");\n    targetPosition = 0;\n  }\n  parents.forEach((parent) => {\n    const parentPosition = dir === \"TB\" || dir == \"BT\" ? commitPos.get(parent)?.y : commitPos.get(parent)?.x;\n    if (parentPosition !== void 0 && comparisonFunc(parentPosition, targetPosition)) {\n      closestParent = parent;\n      targetPosition = parentPosition;\n    }\n  });\n  return closestParent;\n}, \"findClosestParent\");\nvar findClosestParentBT = /* @__PURE__ */ __name((parents) => {\n  let closestParent = \"\";\n  let maxPosition = Infinity;\n  parents.forEach((parent) => {\n    const parentPosition = commitPos.get(parent).y;\n    if (parentPosition <= maxPosition) {\n      closestParent = parent;\n      maxPosition = parentPosition;\n    }\n  });\n  return closestParent || void 0;\n}, \"findClosestParentBT\");\nvar setParallelBTPos = /* @__PURE__ */ __name((sortedKeys, commits, defaultPos2) => {\n  let curPos = defaultPos2;\n  let maxPosition = defaultPos2;\n  const roots = [];\n  sortedKeys.forEach((key) => {\n    const commit2 = commits.get(key);\n    if (!commit2) {\n      throw new Error(`Commit not found for key ${key}`);\n    }\n    if (commit2.parents.length) {\n      curPos = calculateCommitPosition(commit2);\n      maxPosition = Math.max(curPos, maxPosition);\n    } else {\n      roots.push(commit2);\n    }\n    setCommitPosition(commit2, curPos);\n  });\n  curPos = maxPosition;\n  roots.forEach((commit2) => {\n    setRootPosition(commit2, curPos, defaultPos2);\n  });\n  sortedKeys.forEach((key) => {\n    const commit2 = commits.get(key);\n    if (commit2?.parents.length) {\n      const closestParent = findClosestParentBT(commit2.parents);\n      curPos = commitPos.get(closestParent).y - COMMIT_STEP;\n      if (curPos <= maxPosition) {\n        maxPosition = curPos;\n      }\n      const x = branchPos.get(commit2.branch).pos;\n      const y = curPos - LAYOUT_OFFSET;\n      commitPos.set(commit2.id, { x, y });\n    }\n  });\n}, \"setParallelBTPos\");\nvar findClosestParentPos = /* @__PURE__ */ __name((commit2) => {\n  const closestParent = findClosestParent(commit2.parents.filter((p) => p !== null));\n  if (!closestParent) {\n    throw new Error(`Closest parent not found for commit ${commit2.id}`);\n  }\n  const closestParentPos = commitPos.get(closestParent)?.y;\n  if (closestParentPos === void 0) {\n    throw new Error(`Closest parent position not found for commit ${commit2.id}`);\n  }\n  return closestParentPos;\n}, \"findClosestParentPos\");\nvar calculateCommitPosition = /* @__PURE__ */ __name((commit2) => {\n  const closestParentPos = findClosestParentPos(commit2);\n  return closestParentPos + COMMIT_STEP;\n}, \"calculateCommitPosition\");\nvar setCommitPosition = /* @__PURE__ */ __name((commit2, curPos) => {\n  const branch2 = branchPos.get(commit2.branch);\n  if (!branch2) {\n    throw new Error(`Branch not found for commit ${commit2.id}`);\n  }\n  const x = branch2.pos;\n  const y = curPos + LAYOUT_OFFSET;\n  commitPos.set(commit2.id, { x, y });\n  return { x, y };\n}, \"setCommitPosition\");\nvar setRootPosition = /* @__PURE__ */ __name((commit2, curPos, defaultPos2) => {\n  const branch2 = branchPos.get(commit2.branch);\n  if (!branch2) {\n    throw new Error(`Branch not found for commit ${commit2.id}`);\n  }\n  const y = curPos + defaultPos2;\n  const x = branch2.pos;\n  commitPos.set(commit2.id, { x, y });\n}, \"setRootPosition\");\nvar drawCommitBullet = /* @__PURE__ */ __name((gBullets, commit2, commitPosition, typeClass, branchIndex, commitSymbolType) => {\n  if (commitSymbolType === commitType.HIGHLIGHT) {\n    gBullets.append(\"rect\").attr(\"x\", commitPosition.x - 10).attr(\"y\", commitPosition.y - 10).attr(\"width\", 20).attr(\"height\", 20).attr(\n      \"class\",\n      `commit ${commit2.id} commit-highlight${branchIndex % THEME_COLOR_LIMIT} ${typeClass}-outer`\n    );\n    gBullets.append(\"rect\").attr(\"x\", commitPosition.x - 6).attr(\"y\", commitPosition.y - 6).attr(\"width\", 12).attr(\"height\", 12).attr(\n      \"class\",\n      `commit ${commit2.id} commit${branchIndex % THEME_COLOR_LIMIT} ${typeClass}-inner`\n    );\n  } else if (commitSymbolType === commitType.CHERRY_PICK) {\n    gBullets.append(\"circle\").attr(\"cx\", commitPosition.x).attr(\"cy\", commitPosition.y).attr(\"r\", 10).attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n    gBullets.append(\"circle\").attr(\"cx\", commitPosition.x - 3).attr(\"cy\", commitPosition.y + 2).attr(\"r\", 2.75).attr(\"fill\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n    gBullets.append(\"circle\").attr(\"cx\", commitPosition.x + 3).attr(\"cy\", commitPosition.y + 2).attr(\"r\", 2.75).attr(\"fill\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n    gBullets.append(\"line\").attr(\"x1\", commitPosition.x + 3).attr(\"y1\", commitPosition.y + 1).attr(\"x2\", commitPosition.x).attr(\"y2\", commitPosition.y - 5).attr(\"stroke\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n    gBullets.append(\"line\").attr(\"x1\", commitPosition.x - 3).attr(\"y1\", commitPosition.y + 1).attr(\"x2\", commitPosition.x).attr(\"y2\", commitPosition.y - 5).attr(\"stroke\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n  } else {\n    const circle = gBullets.append(\"circle\");\n    circle.attr(\"cx\", commitPosition.x);\n    circle.attr(\"cy\", commitPosition.y);\n    circle.attr(\"r\", commit2.type === commitType.MERGE ? 9 : 10);\n    circle.attr(\"class\", `commit ${commit2.id} commit${branchIndex % THEME_COLOR_LIMIT}`);\n    if (commitSymbolType === commitType.MERGE) {\n      const circle2 = gBullets.append(\"circle\");\n      circle2.attr(\"cx\", commitPosition.x);\n      circle2.attr(\"cy\", commitPosition.y);\n      circle2.attr(\"r\", 6);\n      circle2.attr(\n        \"class\",\n        `commit ${typeClass} ${commit2.id} commit${branchIndex % THEME_COLOR_LIMIT}`\n      );\n    }\n    if (commitSymbolType === commitType.REVERSE) {\n      const cross = gBullets.append(\"path\");\n      cross.attr(\n        \"d\",\n        `M ${commitPosition.x - 5},${commitPosition.y - 5}L${commitPosition.x + 5},${commitPosition.y + 5}M${commitPosition.x - 5},${commitPosition.y + 5}L${commitPosition.x + 5},${commitPosition.y - 5}`\n      ).attr(\"class\", `commit ${typeClass} ${commit2.id} commit${branchIndex % THEME_COLOR_LIMIT}`);\n    }\n  }\n}, \"drawCommitBullet\");\nvar drawCommitLabel = /* @__PURE__ */ __name((gLabels, commit2, commitPosition, pos) => {\n  if (commit2.type !== commitType.CHERRY_PICK && (commit2.customId && commit2.type === commitType.MERGE || commit2.type !== commitType.MERGE) && DEFAULT_GITGRAPH_CONFIG2?.showCommitLabel) {\n    const wrapper = gLabels.append(\"g\");\n    const labelBkg = wrapper.insert(\"rect\").attr(\"class\", \"commit-label-bkg\");\n    const text = wrapper.append(\"text\").attr(\"x\", pos).attr(\"y\", commitPosition.y + 25).attr(\"class\", \"commit-label\").text(commit2.id);\n    const bbox = text.node()?.getBBox();\n    if (bbox) {\n      labelBkg.attr(\"x\", commitPosition.posWithOffset - bbox.width / 2 - PY).attr(\"y\", commitPosition.y + 13.5).attr(\"width\", bbox.width + 2 * PY).attr(\"height\", bbox.height + 2 * PY);\n      if (dir === \"TB\" || dir === \"BT\") {\n        labelBkg.attr(\"x\", commitPosition.x - (bbox.width + 4 * PX + 5)).attr(\"y\", commitPosition.y - 12);\n        text.attr(\"x\", commitPosition.x - (bbox.width + 4 * PX)).attr(\"y\", commitPosition.y + bbox.height - 12);\n      } else {\n        text.attr(\"x\", commitPosition.posWithOffset - bbox.width / 2);\n      }\n      if (DEFAULT_GITGRAPH_CONFIG2.rotateCommitLabel) {\n        if (dir === \"TB\" || dir === \"BT\") {\n          text.attr(\n            \"transform\",\n            \"rotate(-45, \" + commitPosition.x + \", \" + commitPosition.y + \")\"\n          );\n          labelBkg.attr(\n            \"transform\",\n            \"rotate(-45, \" + commitPosition.x + \", \" + commitPosition.y + \")\"\n          );\n        } else {\n          const r_x = -7.5 - (bbox.width + 10) / 25 * 9.5;\n          const r_y = 10 + bbox.width / 25 * 8.5;\n          wrapper.attr(\n            \"transform\",\n            \"translate(\" + r_x + \", \" + r_y + \") rotate(-45, \" + pos + \", \" + commitPosition.y + \")\"\n          );\n        }\n      }\n    }\n  }\n}, \"drawCommitLabel\");\nvar drawCommitTags = /* @__PURE__ */ __name((gLabels, commit2, commitPosition, pos) => {\n  if (commit2.tags.length > 0) {\n    let yOffset = 0;\n    let maxTagBboxWidth = 0;\n    let maxTagBboxHeight = 0;\n    const tagElements = [];\n    for (const tagValue of commit2.tags.reverse()) {\n      const rect = gLabels.insert(\"polygon\");\n      const hole = gLabels.append(\"circle\");\n      const tag = gLabels.append(\"text\").attr(\"y\", commitPosition.y - 16 - yOffset).attr(\"class\", \"tag-label\").text(tagValue);\n      const tagBbox = tag.node()?.getBBox();\n      if (!tagBbox) {\n        throw new Error(\"Tag bbox not found\");\n      }\n      maxTagBboxWidth = Math.max(maxTagBboxWidth, tagBbox.width);\n      maxTagBboxHeight = Math.max(maxTagBboxHeight, tagBbox.height);\n      tag.attr(\"x\", commitPosition.posWithOffset - tagBbox.width / 2);\n      tagElements.push({\n        tag,\n        hole,\n        rect,\n        yOffset\n      });\n      yOffset += 20;\n    }\n    for (const { tag, hole, rect, yOffset: yOffset2 } of tagElements) {\n      const h2 = maxTagBboxHeight / 2;\n      const ly = commitPosition.y - 19.2 - yOffset2;\n      rect.attr(\"class\", \"tag-label-bkg\").attr(\n        \"points\",\n        `\n      ${pos - maxTagBboxWidth / 2 - PX / 2},${ly + PY}  \n      ${pos - maxTagBboxWidth / 2 - PX / 2},${ly - PY}\n      ${commitPosition.posWithOffset - maxTagBboxWidth / 2 - PX},${ly - h2 - PY}\n      ${commitPosition.posWithOffset + maxTagBboxWidth / 2 + PX},${ly - h2 - PY}\n      ${commitPosition.posWithOffset + maxTagBboxWidth / 2 + PX},${ly + h2 + PY}\n      ${commitPosition.posWithOffset - maxTagBboxWidth / 2 - PX},${ly + h2 + PY}`\n      );\n      hole.attr(\"cy\", ly).attr(\"cx\", pos - maxTagBboxWidth / 2 + PX / 2).attr(\"r\", 1.5).attr(\"class\", \"tag-hole\");\n      if (dir === \"TB\" || dir === \"BT\") {\n        const yOrigin = pos + yOffset2;\n        rect.attr(\"class\", \"tag-label-bkg\").attr(\n          \"points\",\n          `\n        ${commitPosition.x},${yOrigin + 2}\n        ${commitPosition.x},${yOrigin - 2}\n        ${commitPosition.x + LAYOUT_OFFSET},${yOrigin - h2 - 2}\n        ${commitPosition.x + LAYOUT_OFFSET + maxTagBboxWidth + 4},${yOrigin - h2 - 2}\n        ${commitPosition.x + LAYOUT_OFFSET + maxTagBboxWidth + 4},${yOrigin + h2 + 2}\n        ${commitPosition.x + LAYOUT_OFFSET},${yOrigin + h2 + 2}`\n        ).attr(\"transform\", \"translate(12,12) rotate(45, \" + commitPosition.x + \",\" + pos + \")\");\n        hole.attr(\"cx\", commitPosition.x + PX / 2).attr(\"cy\", yOrigin).attr(\"transform\", \"translate(12,12) rotate(45, \" + commitPosition.x + \",\" + pos + \")\");\n        tag.attr(\"x\", commitPosition.x + 5).attr(\"y\", yOrigin + 3).attr(\"transform\", \"translate(14,14) rotate(45, \" + commitPosition.x + \",\" + pos + \")\");\n      }\n    }\n  }\n}, \"drawCommitTags\");\nvar getCommitClassType = /* @__PURE__ */ __name((commit2) => {\n  const commitSymbolType = commit2.customType ?? commit2.type;\n  switch (commitSymbolType) {\n    case commitType.NORMAL:\n      return \"commit-normal\";\n    case commitType.REVERSE:\n      return \"commit-reverse\";\n    case commitType.HIGHLIGHT:\n      return \"commit-highlight\";\n    case commitType.MERGE:\n      return \"commit-merge\";\n    case commitType.CHERRY_PICK:\n      return \"commit-cherry-pick\";\n    default:\n      return \"commit-normal\";\n  }\n}, \"getCommitClassType\");\nvar calculatePosition = /* @__PURE__ */ __name((commit2, dir2, pos, commitPos2) => {\n  const defaultCommitPosition = { x: 0, y: 0 };\n  if (commit2.parents.length > 0) {\n    const closestParent = findClosestParent(commit2.parents);\n    if (closestParent) {\n      const parentPosition = commitPos2.get(closestParent) ?? defaultCommitPosition;\n      if (dir2 === \"TB\") {\n        return parentPosition.y + COMMIT_STEP;\n      } else if (dir2 === \"BT\") {\n        const currentPosition = commitPos2.get(commit2.id) ?? defaultCommitPosition;\n        return currentPosition.y - COMMIT_STEP;\n      } else {\n        return parentPosition.x + COMMIT_STEP;\n      }\n    }\n  } else {\n    if (dir2 === \"TB\") {\n      return defaultPos;\n    } else if (dir2 === \"BT\") {\n      const currentPosition = commitPos2.get(commit2.id) ?? defaultCommitPosition;\n      return currentPosition.y - COMMIT_STEP;\n    } else {\n      return 0;\n    }\n  }\n  return 0;\n}, \"calculatePosition\");\nvar getCommitPosition = /* @__PURE__ */ __name((commit2, pos, isParallelCommits) => {\n  const posWithOffset = dir === \"BT\" && isParallelCommits ? pos : pos + LAYOUT_OFFSET;\n  const y = dir === \"TB\" || dir === \"BT\" ? posWithOffset : branchPos.get(commit2.branch)?.pos;\n  const x = dir === \"TB\" || dir === \"BT\" ? branchPos.get(commit2.branch)?.pos : posWithOffset;\n  if (x === void 0 || y === void 0) {\n    throw new Error(`Position were undefined for commit ${commit2.id}`);\n  }\n  return { x, y, posWithOffset };\n}, \"getCommitPosition\");\nvar drawCommits = /* @__PURE__ */ __name((svg, commits, modifyGraph) => {\n  if (!DEFAULT_GITGRAPH_CONFIG2) {\n    throw new Error(\"GitGraph config not found\");\n  }\n  const gBullets = svg.append(\"g\").attr(\"class\", \"commit-bullets\");\n  const gLabels = svg.append(\"g\").attr(\"class\", \"commit-labels\");\n  let pos = dir === \"TB\" || dir === \"BT\" ? defaultPos : 0;\n  const keys = [...commits.keys()];\n  const isParallelCommits = DEFAULT_GITGRAPH_CONFIG2?.parallelCommits ?? false;\n  const sortKeys = /* @__PURE__ */ __name((a, b) => {\n    const seqA = commits.get(a)?.seq;\n    const seqB = commits.get(b)?.seq;\n    return seqA !== void 0 && seqB !== void 0 ? seqA - seqB : 0;\n  }, \"sortKeys\");\n  let sortedKeys = keys.sort(sortKeys);\n  if (dir === \"BT\") {\n    if (isParallelCommits) {\n      setParallelBTPos(sortedKeys, commits, pos);\n    }\n    sortedKeys = sortedKeys.reverse();\n  }\n  sortedKeys.forEach((key) => {\n    const commit2 = commits.get(key);\n    if (!commit2) {\n      throw new Error(`Commit not found for key ${key}`);\n    }\n    if (isParallelCommits) {\n      pos = calculatePosition(commit2, dir, pos, commitPos);\n    }\n    const commitPosition = getCommitPosition(commit2, pos, isParallelCommits);\n    if (modifyGraph) {\n      const typeClass = getCommitClassType(commit2);\n      const commitSymbolType = commit2.customType ?? commit2.type;\n      const branchIndex = branchPos.get(commit2.branch)?.index ?? 0;\n      drawCommitBullet(gBullets, commit2, commitPosition, typeClass, branchIndex, commitSymbolType);\n      drawCommitLabel(gLabels, commit2, commitPosition, pos);\n      drawCommitTags(gLabels, commit2, commitPosition, pos);\n    }\n    if (dir === \"TB\" || dir === \"BT\") {\n      commitPos.set(commit2.id, { x: commitPosition.x, y: commitPosition.posWithOffset });\n    } else {\n      commitPos.set(commit2.id, { x: commitPosition.posWithOffset, y: commitPosition.y });\n    }\n    pos = dir === \"BT\" && isParallelCommits ? pos + COMMIT_STEP : pos + COMMIT_STEP + LAYOUT_OFFSET;\n    if (pos > maxPos) {\n      maxPos = pos;\n    }\n  });\n}, \"drawCommits\");\nvar shouldRerouteArrow = /* @__PURE__ */ __name((commitA, commitB, p1, p2, allCommits) => {\n  const commitBIsFurthest = dir === \"TB\" || dir === \"BT\" ? p1.x < p2.x : p1.y < p2.y;\n  const branchToGetCurve = commitBIsFurthest ? commitB.branch : commitA.branch;\n  const isOnBranchToGetCurve = /* @__PURE__ */ __name((x) => x.branch === branchToGetCurve, \"isOnBranchToGetCurve\");\n  const isBetweenCommits = /* @__PURE__ */ __name((x) => x.seq > commitA.seq && x.seq < commitB.seq, \"isBetweenCommits\");\n  return [...allCommits.values()].some((commitX) => {\n    return isBetweenCommits(commitX) && isOnBranchToGetCurve(commitX);\n  });\n}, \"shouldRerouteArrow\");\nvar findLane = /* @__PURE__ */ __name((y1, y2, depth = 0) => {\n  const candidate = y1 + Math.abs(y1 - y2) / 2;\n  if (depth > 5) {\n    return candidate;\n  }\n  const ok = lanes.every((lane) => Math.abs(lane - candidate) >= 10);\n  if (ok) {\n    lanes.push(candidate);\n    return candidate;\n  }\n  const diff = Math.abs(y1 - y2);\n  return findLane(y1, y2 - diff / 5, depth + 1);\n}, \"findLane\");\nvar drawArrow = /* @__PURE__ */ __name((svg, commitA, commitB, allCommits) => {\n  const p1 = commitPos.get(commitA.id);\n  const p2 = commitPos.get(commitB.id);\n  if (p1 === void 0 || p2 === void 0) {\n    throw new Error(`Commit positions not found for commits ${commitA.id} and ${commitB.id}`);\n  }\n  const arrowNeedsRerouting = shouldRerouteArrow(commitA, commitB, p1, p2, allCommits);\n  let arc = \"\";\n  let arc2 = \"\";\n  let radius = 0;\n  let offset = 0;\n  let colorClassNum = branchPos.get(commitB.branch)?.index;\n  if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n    colorClassNum = branchPos.get(commitA.branch)?.index;\n  }\n  let lineDef;\n  if (arrowNeedsRerouting) {\n    arc = \"A 10 10, 0, 0, 0,\";\n    arc2 = \"A 10 10, 0, 0, 1,\";\n    radius = 10;\n    offset = 10;\n    const lineY = p1.y < p2.y ? findLane(p1.y, p2.y) : findLane(p2.y, p1.y);\n    const lineX = p1.x < p2.x ? findLane(p1.x, p2.x) : findLane(p2.x, p1.x);\n    if (dir === \"TB\") {\n      if (p1.x < p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX - radius} ${p1.y} ${arc2} ${lineX} ${p1.y + offset} L ${lineX} ${p2.y - radius} ${arc} ${lineX + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      } else {\n        colorClassNum = branchPos.get(commitA.branch)?.index;\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX + radius} ${p1.y} ${arc} ${lineX} ${p1.y + offset} L ${lineX} ${p2.y - radius} ${arc2} ${lineX - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      }\n    } else if (dir === \"BT\") {\n      if (p1.x < p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX - radius} ${p1.y} ${arc} ${lineX} ${p1.y - offset} L ${lineX} ${p2.y + radius} ${arc2} ${lineX + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      } else {\n        colorClassNum = branchPos.get(commitA.branch)?.index;\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX + radius} ${p1.y} ${arc2} ${lineX} ${p1.y - offset} L ${lineX} ${p2.y + radius} ${arc} ${lineX - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      }\n    } else {\n      if (p1.y < p2.y) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${lineY - radius} ${arc} ${p1.x + offset} ${lineY} L ${p2.x - radius} ${lineY} ${arc2} ${p2.x} ${lineY + offset} L ${p2.x} ${p2.y}`;\n      } else {\n        colorClassNum = branchPos.get(commitA.branch)?.index;\n        lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${lineY + radius} ${arc2} ${p1.x + offset} ${lineY} L ${p2.x - radius} ${lineY} ${arc} ${p2.x} ${lineY - offset} L ${p2.x} ${p2.y}`;\n      }\n    }\n  } else {\n    arc = \"A 20 20, 0, 0, 0,\";\n    arc2 = \"A 20 20, 0, 0, 1,\";\n    radius = 20;\n    offset = 20;\n    if (dir === \"TB\") {\n      if (p1.x < p2.x) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc2} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x > p2.x) {\n        arc = \"A 20 20, 0, 0, 0,\";\n        arc2 = \"A 20 20, 0, 0, 1,\";\n        radius = 20;\n        offset = 20;\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc2} ${p1.x - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x + radius} ${p1.y} ${arc} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x === p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n      }\n    } else if (dir === \"BT\") {\n      if (p1.x < p2.x) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y + radius} ${arc2} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc} ${p2.x} ${p1.y - offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x > p2.x) {\n        arc = \"A 20 20, 0, 0, 0,\";\n        arc2 = \"A 20 20, 0, 0, 1,\";\n        radius = 20;\n        offset = 20;\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y + radius} ${arc} ${p1.x - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc} ${p2.x} ${p1.y - offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x === p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n      }\n    } else {\n      if (p1.y < p2.y) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc2} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.y > p2.y) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc} ${p2.x} ${p1.y - offset} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y + radius} ${arc2} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.y === p2.y) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n      }\n    }\n  }\n  if (lineDef === void 0) {\n    throw new Error(\"Line definition not found\");\n  }\n  svg.append(\"path\").attr(\"d\", lineDef).attr(\"class\", \"arrow arrow\" + colorClassNum % THEME_COLOR_LIMIT);\n}, \"drawArrow\");\nvar drawArrows = /* @__PURE__ */ __name((svg, commits) => {\n  const gArrows = svg.append(\"g\").attr(\"class\", \"commit-arrows\");\n  [...commits.keys()].forEach((key) => {\n    const commit2 = commits.get(key);\n    if (commit2.parents && commit2.parents.length > 0) {\n      commit2.parents.forEach((parent) => {\n        drawArrow(gArrows, commits.get(parent), commit2, commits);\n      });\n    }\n  });\n}, \"drawArrows\");\nvar drawBranches = /* @__PURE__ */ __name((svg, branches) => {\n  const g = svg.append(\"g\");\n  branches.forEach((branch2, index) => {\n    const adjustIndexForTheme = index % THEME_COLOR_LIMIT;\n    const pos = branchPos.get(branch2.name)?.pos;\n    if (pos === void 0) {\n      throw new Error(`Position not found for branch ${branch2.name}`);\n    }\n    const line = g.append(\"line\");\n    line.attr(\"x1\", 0);\n    line.attr(\"y1\", pos);\n    line.attr(\"x2\", maxPos);\n    line.attr(\"y2\", pos);\n    line.attr(\"class\", \"branch branch\" + adjustIndexForTheme);\n    if (dir === \"TB\") {\n      line.attr(\"y1\", defaultPos);\n      line.attr(\"x1\", pos);\n      line.attr(\"y2\", maxPos);\n      line.attr(\"x2\", pos);\n    } else if (dir === \"BT\") {\n      line.attr(\"y1\", maxPos);\n      line.attr(\"x1\", pos);\n      line.attr(\"y2\", defaultPos);\n      line.attr(\"x2\", pos);\n    }\n    lanes.push(pos);\n    const name = branch2.name;\n    const labelElement = drawText(name);\n    const bkg = g.insert(\"rect\");\n    const branchLabel = g.insert(\"g\").attr(\"class\", \"branchLabel\");\n    const label = branchLabel.insert(\"g\").attr(\"class\", \"label branch-label\" + adjustIndexForTheme);\n    label.node().appendChild(labelElement);\n    const bbox = labelElement.getBBox();\n    bkg.attr(\"class\", \"branchLabelBkg label\" + adjustIndexForTheme).attr(\"rx\", 4).attr(\"ry\", 4).attr(\"x\", -bbox.width - 4 - (DEFAULT_GITGRAPH_CONFIG2?.rotateCommitLabel === true ? 30 : 0)).attr(\"y\", -bbox.height / 2 + 8).attr(\"width\", bbox.width + 18).attr(\"height\", bbox.height + 4);\n    label.attr(\n      \"transform\",\n      \"translate(\" + (-bbox.width - 14 - (DEFAULT_GITGRAPH_CONFIG2?.rotateCommitLabel === true ? 30 : 0)) + \", \" + (pos - bbox.height / 2 - 1) + \")\"\n    );\n    if (dir === \"TB\") {\n      bkg.attr(\"x\", pos - bbox.width / 2 - 10).attr(\"y\", 0);\n      label.attr(\"transform\", \"translate(\" + (pos - bbox.width / 2 - 5) + \", 0)\");\n    } else if (dir === \"BT\") {\n      bkg.attr(\"x\", pos - bbox.width / 2 - 10).attr(\"y\", maxPos);\n      label.attr(\"transform\", \"translate(\" + (pos - bbox.width / 2 - 5) + \", \" + maxPos + \")\");\n    } else {\n      bkg.attr(\"transform\", \"translate(-19, \" + (pos - bbox.height / 2) + \")\");\n    }\n  });\n}, \"drawBranches\");\nvar setBranchPosition = /* @__PURE__ */ __name(function(name, pos, index, bbox, rotateCommitLabel) {\n  branchPos.set(name, { pos, index });\n  pos += 50 + (rotateCommitLabel ? 40 : 0) + (dir === \"TB\" || dir === \"BT\" ? bbox.width / 2 : 0);\n  return pos;\n}, \"setBranchPosition\");\nvar draw = /* @__PURE__ */ __name(function(txt, id, ver, diagObj) {\n  clear3();\n  log.debug(\"in gitgraph renderer\", txt + \"\\n\", \"id:\", id, ver);\n  if (!DEFAULT_GITGRAPH_CONFIG2) {\n    throw new Error(\"GitGraph config not found\");\n  }\n  const rotateCommitLabel = DEFAULT_GITGRAPH_CONFIG2.rotateCommitLabel ?? false;\n  const db2 = diagObj.db;\n  allCommitsDict = db2.getCommits();\n  const branches = db2.getBranchesAsObjArray();\n  dir = db2.getDirection();\n  const diagram2 = select(`[id=\"${id}\"]`);\n  let pos = 0;\n  branches.forEach((branch2, index) => {\n    const labelElement = drawText(branch2.name);\n    const g = diagram2.append(\"g\");\n    const branchLabel = g.insert(\"g\").attr(\"class\", \"branchLabel\");\n    const label = branchLabel.insert(\"g\").attr(\"class\", \"label branch-label\");\n    label.node()?.appendChild(labelElement);\n    const bbox = labelElement.getBBox();\n    pos = setBranchPosition(branch2.name, pos, index, bbox, rotateCommitLabel);\n    label.remove();\n    branchLabel.remove();\n    g.remove();\n  });\n  drawCommits(diagram2, allCommitsDict, false);\n  if (DEFAULT_GITGRAPH_CONFIG2.showBranches) {\n    drawBranches(diagram2, branches);\n  }\n  drawArrows(diagram2, allCommitsDict);\n  drawCommits(diagram2, allCommitsDict, true);\n  utils_default.insertTitle(\n    diagram2,\n    \"gitTitleText\",\n    DEFAULT_GITGRAPH_CONFIG2.titleTopMargin ?? 0,\n    db2.getDiagramTitle()\n  );\n  setupGraphViewbox(\n    void 0,\n    diagram2,\n    DEFAULT_GITGRAPH_CONFIG2.diagramPadding,\n    DEFAULT_GITGRAPH_CONFIG2.useMaxWidth\n  );\n}, \"draw\");\nvar gitGraphRenderer_default = {\n  draw\n};\nif (void 0) {\n  const { it, expect, describe } = void 0;\n  describe(\"drawText\", () => {\n    it(\"should drawText\", () => {\n      const svgLabel = drawText(\"main\");\n      expect(svgLabel).toBeDefined();\n      expect(svgLabel.children[0].innerHTML).toBe(\"main\");\n    });\n  });\n  describe(\"branchPosition\", () => {\n    const bbox = {\n      x: 0,\n      y: 0,\n      width: 10,\n      height: 10,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      toJSON: /* @__PURE__ */ __name(() => \"\", \"toJSON\")\n    };\n    it(\"should setBranchPositions LR with two branches\", () => {\n      dir = \"LR\";\n      const pos = setBranchPosition(\"main\", 0, 0, bbox, true);\n      expect(pos).toBe(90);\n      expect(branchPos.get(\"main\")).toEqual({ pos: 0, index: 0 });\n      const posNext = setBranchPosition(\"develop\", pos, 1, bbox, true);\n      expect(posNext).toBe(180);\n      expect(branchPos.get(\"develop\")).toEqual({ pos, index: 1 });\n    });\n    it(\"should setBranchPositions TB with two branches\", () => {\n      dir = \"TB\";\n      bbox.width = 34.9921875;\n      const pos = setBranchPosition(\"main\", 0, 0, bbox, true);\n      expect(pos).toBe(107.49609375);\n      expect(branchPos.get(\"main\")).toEqual({ pos: 0, index: 0 });\n      bbox.width = 56.421875;\n      const posNext = setBranchPosition(\"develop\", pos, 1, bbox, true);\n      expect(posNext).toBe(225.70703125);\n      expect(branchPos.get(\"develop\")).toEqual({ pos, index: 1 });\n    });\n  });\n  describe(\"commitPosition\", () => {\n    const commits = /* @__PURE__ */ new Map([\n      [\n        \"commitZero\",\n        {\n          id: \"ZERO\",\n          message: \"\",\n          seq: 0,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [],\n          branch: \"main\"\n        }\n      ],\n      [\n        \"commitA\",\n        {\n          id: \"A\",\n          message: \"\",\n          seq: 1,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [\"ZERO\"],\n          branch: \"feature\"\n        }\n      ],\n      [\n        \"commitB\",\n        {\n          id: \"B\",\n          message: \"\",\n          seq: 2,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [\"A\"],\n          branch: \"feature\"\n        }\n      ],\n      [\n        \"commitM\",\n        {\n          id: \"M\",\n          message: \"merged branch feature into main\",\n          seq: 3,\n          type: commitType.MERGE,\n          tags: [],\n          parents: [\"ZERO\", \"B\"],\n          branch: \"main\",\n          customId: true\n        }\n      ],\n      [\n        \"commitC\",\n        {\n          id: \"C\",\n          message: \"\",\n          seq: 4,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [\"ZERO\"],\n          branch: \"release\"\n        }\n      ],\n      [\n        \"commit5_8928ea0\",\n        {\n          id: \"5-8928ea0\",\n          message: \"cherry-picked [object Object] into release\",\n          seq: 5,\n          type: commitType.CHERRY_PICK,\n          tags: [],\n          parents: [\"C\", \"M\"],\n          branch: \"release\"\n        }\n      ],\n      [\n        \"commitD\",\n        {\n          id: \"D\",\n          message: \"\",\n          seq: 6,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [\"5-8928ea0\"],\n          branch: \"release\"\n        }\n      ],\n      [\n        \"commit7_ed848ba\",\n        {\n          id: \"7-ed848ba\",\n          message: \"cherry-picked [object Object] into release\",\n          seq: 7,\n          type: commitType.CHERRY_PICK,\n          tags: [],\n          parents: [\"D\", \"M\"],\n          branch: \"release\"\n        }\n      ]\n    ]);\n    let pos = 0;\n    branchPos.set(\"main\", { pos: 0, index: 0 });\n    branchPos.set(\"feature\", { pos: 107.49609375, index: 1 });\n    branchPos.set(\"release\", { pos: 224.03515625, index: 2 });\n    describe(\"TB\", () => {\n      pos = 30;\n      dir = \"TB\";\n      const expectedCommitPositionTB = /* @__PURE__ */ new Map([\n        [\"commitZero\", { x: 0, y: 40, posWithOffset: 40 }],\n        [\"commitA\", { x: 107.49609375, y: 90, posWithOffset: 90 }],\n        [\"commitB\", { x: 107.49609375, y: 140, posWithOffset: 140 }],\n        [\"commitM\", { x: 0, y: 190, posWithOffset: 190 }],\n        [\"commitC\", { x: 224.03515625, y: 240, posWithOffset: 240 }],\n        [\"commit5_8928ea0\", { x: 224.03515625, y: 290, posWithOffset: 290 }],\n        [\"commitD\", { x: 224.03515625, y: 340, posWithOffset: 340 }],\n        [\"commit7_ed848ba\", { x: 224.03515625, y: 390, posWithOffset: 390 }]\n      ]);\n      commits.forEach((commit2, key) => {\n        it(`should give the correct position for commit ${key}`, () => {\n          const position = getCommitPosition(commit2, pos, false);\n          expect(position).toEqual(expectedCommitPositionTB.get(key));\n          pos += 50;\n        });\n      });\n    });\n    describe(\"LR\", () => {\n      let pos2 = 30;\n      dir = \"LR\";\n      const expectedCommitPositionLR = /* @__PURE__ */ new Map([\n        [\"commitZero\", { x: 0, y: 40, posWithOffset: 40 }],\n        [\"commitA\", { x: 107.49609375, y: 90, posWithOffset: 90 }],\n        [\"commitB\", { x: 107.49609375, y: 140, posWithOffset: 140 }],\n        [\"commitM\", { x: 0, y: 190, posWithOffset: 190 }],\n        [\"commitC\", { x: 224.03515625, y: 240, posWithOffset: 240 }],\n        [\"commit5_8928ea0\", { x: 224.03515625, y: 290, posWithOffset: 290 }],\n        [\"commitD\", { x: 224.03515625, y: 340, posWithOffset: 340 }],\n        [\"commit7_ed848ba\", { x: 224.03515625, y: 390, posWithOffset: 390 }]\n      ]);\n      commits.forEach((commit2, key) => {\n        it(`should give the correct position for commit ${key}`, () => {\n          const position = getCommitPosition(commit2, pos2, false);\n          expect(position).toEqual(expectedCommitPositionLR.get(key));\n          pos2 += 50;\n        });\n      });\n    });\n    describe(\"getCommitClassType\", () => {\n      const expectedCommitClassType = /* @__PURE__ */ new Map([\n        [\"commitZero\", \"commit-normal\"],\n        [\"commitA\", \"commit-normal\"],\n        [\"commitB\", \"commit-normal\"],\n        [\"commitM\", \"commit-merge\"],\n        [\"commitC\", \"commit-normal\"],\n        [\"commit5_8928ea0\", \"commit-cherry-pick\"],\n        [\"commitD\", \"commit-normal\"],\n        [\"commit7_ed848ba\", \"commit-cherry-pick\"]\n      ]);\n      commits.forEach((commit2, key) => {\n        it(`should give the correct class type for commit ${key}`, () => {\n          const classType = getCommitClassType(commit2);\n          expect(classType).toBe(expectedCommitClassType.get(key));\n        });\n      });\n    });\n  });\n  describe(\"building BT parallel commit diagram\", () => {\n    const commits = /* @__PURE__ */ new Map([\n      [\n        \"1-abcdefg\",\n        {\n          id: \"1-abcdefg\",\n          message: \"\",\n          seq: 0,\n          type: 0,\n          tags: [],\n          parents: [],\n          branch: \"main\"\n        }\n      ],\n      [\n        \"2-abcdefg\",\n        {\n          id: \"2-abcdefg\",\n          message: \"\",\n          seq: 1,\n          type: 0,\n          tags: [],\n          parents: [\"1-abcdefg\"],\n          branch: \"main\"\n        }\n      ],\n      [\n        \"3-abcdefg\",\n        {\n          id: \"3-abcdefg\",\n          message: \"\",\n          seq: 2,\n          type: 0,\n          tags: [],\n          parents: [\"2-abcdefg\"],\n          branch: \"develop\"\n        }\n      ],\n      [\n        \"4-abcdefg\",\n        {\n          id: \"4-abcdefg\",\n          message: \"\",\n          seq: 3,\n          type: 0,\n          tags: [],\n          parents: [\"3-abcdefg\"],\n          branch: \"develop\"\n        }\n      ],\n      [\n        \"5-abcdefg\",\n        {\n          id: \"5-abcdefg\",\n          message: \"\",\n          seq: 4,\n          type: 0,\n          tags: [],\n          parents: [\"2-abcdefg\"],\n          branch: \"feature\"\n        }\n      ],\n      [\n        \"6-abcdefg\",\n        {\n          id: \"6-abcdefg\",\n          message: \"\",\n          seq: 5,\n          type: 0,\n          tags: [],\n          parents: [\"5-abcdefg\"],\n          branch: \"feature\"\n        }\n      ],\n      [\n        \"7-abcdefg\",\n        {\n          id: \"7-abcdefg\",\n          message: \"\",\n          seq: 6,\n          type: 0,\n          tags: [],\n          parents: [\"2-abcdefg\"],\n          branch: \"main\"\n        }\n      ],\n      [\n        \"8-abcdefg\",\n        {\n          id: \"8-abcdefg\",\n          message: \"\",\n          seq: 7,\n          type: 0,\n          tags: [],\n          parents: [\"7-abcdefg\"],\n          branch: \"main\"\n        }\n      ]\n    ]);\n    const expectedCommitPosition = /* @__PURE__ */ new Map([\n      [\"1-abcdefg\", { x: 0, y: 40 }],\n      [\"2-abcdefg\", { x: 0, y: 90 }],\n      [\"3-abcdefg\", { x: 107.49609375, y: 140 }],\n      [\"4-abcdefg\", { x: 107.49609375, y: 190 }],\n      [\"5-abcdefg\", { x: 225.70703125, y: 140 }],\n      [\"6-abcdefg\", { x: 225.70703125, y: 190 }],\n      [\"7-abcdefg\", { x: 0, y: 140 }],\n      [\"8-abcdefg\", { x: 0, y: 190 }]\n    ]);\n    const expectedCommitPositionAfterParallel = /* @__PURE__ */ new Map([\n      [\"1-abcdefg\", { x: 0, y: 210 }],\n      [\"2-abcdefg\", { x: 0, y: 160 }],\n      [\"3-abcdefg\", { x: 107.49609375, y: 110 }],\n      [\"4-abcdefg\", { x: 107.49609375, y: 60 }],\n      [\"5-abcdefg\", { x: 225.70703125, y: 110 }],\n      [\"6-abcdefg\", { x: 225.70703125, y: 60 }],\n      [\"7-abcdefg\", { x: 0, y: 110 }],\n      [\"8-abcdefg\", { x: 0, y: 60 }]\n    ]);\n    const expectedCommitCurrentPosition = /* @__PURE__ */ new Map([\n      [\"1-abcdefg\", 30],\n      [\"2-abcdefg\", 80],\n      [\"3-abcdefg\", 130],\n      [\"4-abcdefg\", 180],\n      [\"5-abcdefg\", 130],\n      [\"6-abcdefg\", 180],\n      [\"7-abcdefg\", 130],\n      [\"8-abcdefg\", 180]\n    ]);\n    const sortedKeys = [...expectedCommitPosition.keys()];\n    it(\"should get the correct commit position and current position\", () => {\n      dir = \"BT\";\n      let curPos = 30;\n      commitPos.clear();\n      branchPos.clear();\n      branchPos.set(\"main\", { pos: 0, index: 0 });\n      branchPos.set(\"develop\", { pos: 107.49609375, index: 1 });\n      branchPos.set(\"feature\", { pos: 225.70703125, index: 2 });\n      DEFAULT_GITGRAPH_CONFIG2.parallelCommits = true;\n      commits.forEach((commit2, key) => {\n        if (commit2.parents.length > 0) {\n          curPos = calculateCommitPosition(commit2);\n        }\n        const position = setCommitPosition(commit2, curPos);\n        expect(position).toEqual(expectedCommitPosition.get(key));\n        expect(curPos).toEqual(expectedCommitCurrentPosition.get(key));\n      });\n    });\n    it(\"should get the correct commit position after parallel commits\", () => {\n      commitPos.clear();\n      branchPos.clear();\n      dir = \"BT\";\n      const curPos = 30;\n      commitPos.clear();\n      branchPos.clear();\n      branchPos.set(\"main\", { pos: 0, index: 0 });\n      branchPos.set(\"develop\", { pos: 107.49609375, index: 1 });\n      branchPos.set(\"feature\", { pos: 225.70703125, index: 2 });\n      setParallelBTPos(sortedKeys, commits, curPos);\n      sortedKeys.forEach((commit2) => {\n        const position = commitPos.get(commit2);\n        expect(position).toEqual(expectedCommitPositionAfterParallel.get(commit2));\n      });\n    });\n  });\n  DEFAULT_GITGRAPH_CONFIG2.parallelCommits = false;\n  it(\"add\", () => {\n    commitPos.set(\"parent1\", { x: 1, y: 1 });\n    commitPos.set(\"parent2\", { x: 2, y: 2 });\n    commitPos.set(\"parent3\", { x: 3, y: 3 });\n    dir = \"LR\";\n    const parents = [\"parent1\", \"parent2\", \"parent3\"];\n    const closestParent = findClosestParent(parents);\n    expect(closestParent).toBe(\"parent3\");\n    commitPos.clear();\n  });\n}\n\n// src/diagrams/git/styles.js\nvar getStyles = /* @__PURE__ */ __name((options) => `\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0, 1, 2, 3, 4, 5, 6, 7].map(\n  (i) => `\n        .branch-label${i} { fill: ${options[\"gitBranchLabel\" + i]}; }\n        .commit${i} { stroke: ${options[\"git\" + i]}; fill: ${options[\"git\" + i]}; }\n        .commit-highlight${i} { stroke: ${options[\"gitInv\" + i]}; fill: ${options[\"gitInv\" + i]}; }\n        .label${i}  { fill: ${options[\"git\" + i]}; }\n        .arrow${i} { stroke: ${options[\"git\" + i]}; }\n        `\n).join(\"\\n\")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${options.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${options.commitLabelFontSize}; fill: ${options.commitLabelColor};}\n  .commit-label-bkg { font-size: ${options.commitLabelFontSize}; fill: ${options.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${options.tagLabelFontSize}; fill: ${options.tagLabelColor};}\n  .tag-label-bkg { fill: ${options.tagLabelBackground}; stroke: ${options.tagLabelBorder}; }\n  .tag-hole { fill: ${options.textColor}; }\n\n  .commit-merge {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/git/gitGraphDiagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer: gitGraphRenderer_default,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n"],"names":["ImperativeState","constructor","init","records","_chunk_6DBFFHIP_mjs__WEBPACK_IMPORTED_MODULE_0__","eW","populateCommonDb","ast","db","accDescr","setAccDescription","accTitle","setAccTitle","title","setDiagramTitle","commitType","NORMAL","REVERSE","HIGHLIGHT","MERGE","CHERRY_PICK","DEFAULT_GITGRAPH_CONFIG","_chunk_6DBFFHIP_mjs__WEBPACK_IMPORTED_MODULE_3__","vZ","gitGraph","getConfig3","_chunk_7DKRZKHE_mjs__WEBPACK_IMPORTED_MODULE_2__","Rb","iE","state","_chunk_KFBOBJHC_mjs__WEBPACK_IMPORTED_MODULE_1__","A","config","mainBranchName","mainBranchOrder","commits","Map","head","branchConfig","name","order","branches","currBranch","direction","seq","options","getID","MX","length","uniqBy","list","fn","recordMap","Object","create","reduce","out","item","key","push","setDirection","dir2","setOptions","rawOptString","cM","debug","trim","JSON","parse","e","error","message","getOptions","commit","commitDB","msg","id","type","tags","info","SY","sanitizeText","map","tag","newCommit","parents","branch","set","branchDB","has","checkout","merge","otherBranch","mergeDB","customId","overrideType","customTags","currentBranchCheck","get","otherBranchCheck","currentCommit","otherCommit","hash","text","token","expected","join","commit2","customType","cherryPick","cherryPickDB","sourceId","targetId","parentCommitId","parent","sourceCommit","Array","isArray","includes","sourceCommitBranch","currentCommitId","filter","Boolean","branch2","upsert","arr","newVal","index","indexOf","splice","prettyPrintCommitHistory","commitArr","commit3","line","forEach","c","label","prettyPrint","getCommitsArray","clear2","reset","ZH","getBranchesAsObjArray","values","i","parseFloat","sort","a","b","getBranches","getCommits","o","getConfig","clear","getCurrentBranch","getDirection","getHead","GN","getAccTitle","eu","getAccDescription","Mx","U$","g2","getDiagramTitle","Kr","populate","db2","statement","_chunk_TMUBEWPD_mjs__WEBPACK_IMPORTED_MODULE_0__","dir","statements","parseStatement","parser2","parsers","Commit","parseCommit","stmt","Branch","parseBranch","Merge","parseMerge","Checkout","parseCheckout","CherryPicking","parseCherryPicking","$type","merge2","checkout2","cherryPicking","parser","input","_mermaid_js_parser__WEBPACK_IMPORTED_MODULE_4__","Qc","DEFAULT_CONFIG","nV","DEFAULT_GITGRAPH_CONFIG2","branchPos","commitPos","allCommitsDict","lanes","maxPos","clear3","drawText","svgLabel","document","createElementNS","rows","txt","split","tspan","setAttributeNS","setAttribute","textContent","row","appendChild","findClosestParent","closestParent","comparisonFunc","targetPosition","Infinity","parentPosition","y","x","findClosestParentBT","maxPosition","setParallelBTPos","sortedKeys","defaultPos2","curPos","roots","Math","max","calculateCommitPosition","setCommitPosition","setRootPosition","pos","findClosestParentPos","p","closestParentPos","drawCommitBullet","gBullets","commitPosition","typeClass","branchIndex","commitSymbolType","append","attr","circle","circle2","cross","drawCommitLabel","gLabels","showCommitLabel","wrapper","labelBkg","insert","bbox","node","getBBox","posWithOffset","width","height","rotateCommitLabel","r_x","r_y","drawCommitTags","yOffset","maxTagBboxWidth","maxTagBboxHeight","tagElements","tagValue","reverse","rect","hole","tagBbox","yOffset2","h2","ly","PX","yOrigin","getCommitClassType","calculatePosition","commitPos2","defaultCommitPosition","currentPosition","getCommitPosition","isParallelCommits","drawCommits","svg","modifyGraph","keys","parallelCommits","seqA","seqB","shouldRerouteArrow","commitA","commitB","p1","p2","allCommits","branchToGetCurve","commitBIsFurthest","isOnBranchToGetCurve","isBetweenCommits","some","commitX","findLane","y1","y2","depth","candidate","abs","every","lane","diff","drawArrow","lineDef","arrowNeedsRerouting","arc","arc2","radius","offset","colorClassNum","lineY","lineX","drawArrows","gArrows","drawBranches","g","adjustIndexForTheme","labelElement","bkg","branchLabel","setBranchPosition","diagram","renderer","draw","ver","diagObj","diagram2","d3__WEBPACK_IMPORTED_MODULE_5__","Ys","remove","showBranches","w8","insertTitle","titleTopMargin","Rw","diagramPadding","useMaxWidth","styles","lineColor","commitLabelFontSize","commitLabelColor","commitLabelBackground","tagLabelFontSize","tagLabelColor","tagLabelBackground","tagLabelBorder","textColor","primaryColor"],"sourceRoot":""}