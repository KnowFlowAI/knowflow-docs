{"version":3,"file":"static/chunks/5042.c2be7bb043bdf59a.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/vscode-jsonrpc/lib/common/cancellation.js","webpack://_N_E/../../node_modules/vscode-jsonrpc/lib/common/events.js","webpack://_N_E/../../node_modules/vscode-jsonrpc/lib/common/is.js","webpack://_N_E/../../node_modules/vscode-jsonrpc/lib/common/ral.js","webpack://_N_E/../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-4YFB5VUC.mjs","webpack://_N_E/../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-BI6EQKOQ.mjs","webpack://_N_E/../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-EQFLFMNE.mjs","webpack://_N_E/../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-FF7BQXOH.mjs","webpack://_N_E/../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-NCMFTTUW.mjs","webpack://_N_E/../../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-Y27MQZ3U.mjs","webpack://_N_E/../../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","webpack://_N_E/../../node_modules/langium/lib/syntax-tree.js","webpack://_N_E/../../node_modules/langium/lib/utils/stream.js","webpack://_N_E/../../node_modules/langium/lib/utils/cst-utils.js","webpack://_N_E/../../node_modules/langium/lib/utils/errors.js","webpack://_N_E/../../node_modules/langium/lib/languages/generated/ast.js","webpack://_N_E/../../node_modules/langium/lib/utils/ast-utils.js","webpack://_N_E/../../node_modules/@chevrotain/regexp-to-ast/lib/src/utils.js","webpack://_N_E/../../node_modules/@chevrotain/regexp-to-ast/lib/src/character-classes.js","webpack://_N_E/../../node_modules/@chevrotain/regexp-to-ast/lib/src/regexp-parser.js","webpack://_N_E/../../node_modules/@chevrotain/regexp-to-ast/lib/src/base-regexp-visitor.js","webpack://_N_E/../../node_modules/@chevrotain/regexp-to-ast/lib/src/api.js","webpack://_N_E/../../node_modules/langium/lib/utils/regexp-utils.js","webpack://_N_E/../../node_modules/langium/lib/utils/grammar-utils.js","webpack://_N_E/../../node_modules/langium/lib/languages/grammar-config.js","webpack://_N_E/../../node_modules/@chevrotain/utils/lib/src/to-fast-properties.js","webpack://_N_E/../../node_modules/lodash-es/_baseSlice.js","webpack://_N_E/../../node_modules/lodash-es/drop.js","webpack://_N_E/../../node_modules/lodash-es/assign.js","webpack://_N_E/../../node_modules/lodash-es/pickBy.js","webpack://_N_E/../../node_modules/lodash-es/_baseIsRegExp.js","webpack://_N_E/../../node_modules/lodash-es/isRegExp.js","webpack://_N_E/../../node_modules/@chevrotain/gast/lib/src/model.js","webpack://_N_E/../../node_modules/@chevrotain/gast/lib/src/visitor.js","webpack://_N_E/../../node_modules/lodash-es/_baseSome.js","webpack://_N_E/../../node_modules/lodash-es/some.js","webpack://_N_E/../../node_modules/lodash-es/includes.js","webpack://_N_E/../../node_modules/lodash-es/_arrayEvery.js","webpack://_N_E/../../node_modules/lodash-es/_baseEvery.js","webpack://_N_E/../../node_modules/lodash-es/every.js","webpack://_N_E/../../node_modules/@chevrotain/gast/lib/src/helpers.js","webpack://_N_E/../../node_modules/@chevrotain/gast/lib/src/api.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/rest.js","webpack://_N_E/../../node_modules/lodash-es/uniq.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/first.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/constants.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/follow.js","webpack://_N_E/../../node_modules/lodash-es/negate.js","webpack://_N_E/../../node_modules/lodash-es/reject.js","webpack://_N_E/../../node_modules/lodash-es/indexOf.js","webpack://_N_E/../../node_modules/lodash-es/_baseDifference.js","webpack://_N_E/../../node_modules/lodash-es/difference.js","webpack://_N_E/../../node_modules/lodash-es/compact.js","webpack://_N_E/../../node_modules/lodash-es/head.js","webpack://_N_E/../../node_modules/@chevrotain/utils/lib/src/print.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/scan/reg_exp_parser.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/scan/reg_exp.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/scan/lexer.js","webpack://_N_E/../../node_modules/@chevrotain/utils/lib/src/timer.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/scan/tokens.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/scan/lexer_errors_public.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/scan/lexer_public.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/scan/tokens_public.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/errors_public.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/resolver.js","webpack://_N_E/../../node_modules/lodash-es/flatMap.js","webpack://_N_E/../../node_modules/lodash-es/_arrayAggregator.js","webpack://_N_E/../../node_modules/lodash-es/_baseAggregator.js","webpack://_N_E/../../node_modules/lodash-es/_createAggregator.js","webpack://_N_E/../../node_modules/lodash-es/groupBy.js","webpack://_N_E/../../node_modules/lodash-es/dropRight.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/interpreter.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/lookahead.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/checks.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/gast/gast_resolver_public.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/exceptions_public.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/recoverable.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/keys.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/grammar/llk_lookahead.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/looksahead.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/cst/cst.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/lang/lang_extensions.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/tree_builder.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/lexer_adapter.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_api.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/recognizer_engine.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/context_assist.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/gast_recorder.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/utils/apply_mixins.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/parse/parser/parser.js","webpack://_N_E/../../node_modules/@chevrotain/cst-dts-gen/lib/src/model.js","webpack://_N_E/../../node_modules/@chevrotain/cst-dts-gen/lib/src/api.js","webpack://_N_E/../../node_modules/chevrotain/lib/src/api.js","webpack://_N_E/../../node_modules/chevrotain-allstar/lib/atn.js","webpack://_N_E/../../node_modules/chevrotain-allstar/lib/dfa.js","webpack://_N_E/../../node_modules/lodash-es/uniqBy.js","webpack://_N_E/../../node_modules/chevrotain-allstar/lib/all-star-lookahead.js","webpack://_N_E/../../node_modules/chevrotain-allstar/lib/index.js","webpack://_N_E/../../node_modules/vscode-languageserver-types/lib/esm/main.js","webpack://_N_E/../../node_modules/langium/lib/parser/cst-node-builder.js","webpack://_N_E/../../node_modules/langium/lib/parser/langium-parser.js","webpack://_N_E/../../node_modules/langium/lib/parser/parser-builder-base.js","webpack://_N_E/../../node_modules/langium/lib/parser/completion-parser-builder.js","webpack://_N_E/../../node_modules/langium/lib/parser/langium-parser-builder.js","webpack://_N_E/../../node_modules/langium/lib/parser/token-builder.js","webpack://_N_E/../../node_modules/langium/lib/parser/value-converter.js","webpack://_N_E/../../node_modules/langium/lib/utils/cancellation.js","webpack://_N_E/../../node_modules/langium/lib/utils/promise-utils.js","webpack://_N_E/../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","webpack://_N_E/../../node_modules/vscode-uri/lib/esm/index.mjs","webpack://_N_E/../../node_modules/langium/lib/utils/uri-utils.js","webpack://_N_E/../../node_modules/langium/lib/workspace/documents.js","webpack://_N_E/../../node_modules/langium/lib/references/linker.js","webpack://_N_E/../../node_modules/langium/lib/references/name-provider.js","webpack://_N_E/../../node_modules/langium/lib/references/references.js","webpack://_N_E/../../node_modules/langium/lib/utils/collections.js","webpack://_N_E/../../node_modules/langium/lib/references/scope-computation.js","webpack://_N_E/../../node_modules/langium/lib/references/scope.js","webpack://_N_E/../../node_modules/langium/lib/utils/caching.js","webpack://_N_E/../../node_modules/langium/lib/references/scope-provider.js","webpack://_N_E/../../node_modules/langium/lib/serializer/json-serializer.js","webpack://_N_E/../../node_modules/langium/lib/service-registry.js","webpack://_N_E/../../node_modules/langium/lib/validation/validation-registry.js","webpack://_N_E/../../node_modules/langium/lib/validation/document-validator.js","webpack://_N_E/../../node_modules/langium/lib/workspace/ast-descriptions.js","webpack://_N_E/../../node_modules/langium/lib/workspace/ast-node-locator.js","webpack://_N_E/../../node_modules/langium/lib/workspace/configuration.js","webpack://_N_E/../../node_modules/langium/lib/utils/disposable.js","webpack://_N_E/../../node_modules/langium/lib/workspace/document-builder.js","webpack://_N_E/../../node_modules/langium/lib/workspace/index-manager.js","webpack://_N_E/../../node_modules/langium/lib/workspace/workspace-manager.js","webpack://_N_E/../../node_modules/langium/lib/parser/lexer.js","webpack://_N_E/../../node_modules/langium/lib/documentation/jsdoc.js","webpack://_N_E/../../node_modules/langium/lib/documentation/documentation-provider.js","webpack://_N_E/../../node_modules/langium/lib/documentation/comment-provider.js","webpack://_N_E/../../node_modules/langium/lib/utils/event.js","webpack://_N_E/../../node_modules/langium/lib/parser/async-parser.js","webpack://_N_E/../../node_modules/langium/lib/workspace/workspace-lock.js","webpack://_N_E/../../node_modules/langium/lib/serializer/hydrator.js","webpack://_N_E/../../node_modules/langium/lib/default-module.js","webpack://_N_E/../../node_modules/langium/lib/dependency-injection.js","webpack://_N_E/../../node_modules/langium/lib/documentation/index.js","webpack://_N_E/../../node_modules/langium/lib/languages/index.js","webpack://_N_E/../../node_modules/langium/lib/parser/index.js","webpack://_N_E/../../node_modules/langium/lib/references/index.js","webpack://_N_E/../../node_modules/langium/lib/serializer/index.js","webpack://_N_E/../../node_modules/langium/lib/workspace/file-system-provider.js","webpack://_N_E/../../node_modules/langium/lib/utils/grammar-loader.js","webpack://_N_E/../../node_modules/langium/lib/utils/index.js","webpack://_N_E/../../node_modules/langium/lib/validation/index.js","webpack://_N_E/../../node_modules/langium/lib/workspace/index.js","webpack://_N_E/../../node_modules/langium/lib/index.js","webpack://_N_E/../../node_modules/lodash-es/_baseExtremum.js","webpack://_N_E/../../node_modules/lodash-es/_baseLt.js","webpack://_N_E/../../node_modules/lodash-es/_baseMap.js","webpack://_N_E/../../node_modules/lodash-es/_baseSet.js","webpack://_N_E/../../node_modules/lodash-es/_basePickBy.js","webpack://_N_E/../../node_modules/lodash-es/clone.js","webpack://_N_E/../../node_modules/lodash-es/defaults.js","webpack://_N_E/../../node_modules/lodash-es/_createFind.js","webpack://_N_E/../../node_modules/lodash-es/findIndex.js","webpack://_N_E/../../node_modules/lodash-es/find.js","webpack://_N_E/../../node_modules/lodash-es/flatten.js","webpack://_N_E/../../node_modules/lodash-es/_baseHas.js","webpack://_N_E/../../node_modules/lodash-es/has.js","webpack://_N_E/../../node_modules/lodash-es/isString.js","webpack://_N_E/../../node_modules/lodash-es/last.js","webpack://_N_E/../../node_modules/lodash-es/map.js","webpack://_N_E/../../node_modules/lodash-es/min.js","webpack://_N_E/../../node_modules/lodash-es/_trimmedEndIndex.js","webpack://_N_E/../../node_modules/lodash-es/_baseTrim.js","webpack://_N_E/../../node_modules/lodash-es/toNumber.js","webpack://_N_E/../../node_modules/lodash-es/toFinite.js","webpack://_N_E/../../node_modules/lodash-es/toInteger.js"],"sourcesContent":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet-beta\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Common = \"Common\";\nfunction isCommon(item) {\n  return reflection.isInstance(item, Common);\n}\n__name(isCommon, \"isCommon\");\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Direction = \"Direction\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [\"Architecture\", \"Branch\", \"Checkout\", \"CherryPicking\", \"Commit\", \"Common\", \"Direction\", \"Edge\", \"GitGraph\", \"Group\", \"Info\", \"Junction\", \"Merge\", \"Packet\", \"PacketBlock\", \"Pie\", \"PieSection\", \"Service\", \"Statement\"];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case \"Architecture\": {\n        return {\n          name: \"Architecture\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Branch\": {\n        return {\n          name: \"Branch\",\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case \"Checkout\": {\n        return {\n          name: \"Checkout\",\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case \"CherryPicking\": {\n        return {\n          name: \"CherryPicking\",\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case \"Commit\": {\n        return {\n          name: \"Commit\",\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case \"Common\": {\n        return {\n          name: \"Common\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Edge\": {\n        return {\n          name: \"Edge\",\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"GitGraph\": {\n        return {\n          name: \"GitGraph\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Group\": {\n        return {\n          name: \"Group\",\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Info\": {\n        return {\n          name: \"Info\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Junction\": {\n        return {\n          name: \"Junction\",\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case \"Merge\": {\n        return {\n          name: \"Merge\",\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case \"Packet\": {\n        return {\n          name: \"Packet\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"PacketBlock\": {\n        return {\n          name: \"PacketBlock\",\n          properties: [\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case \"Pie\": {\n        return {\n          name: \"Pie\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"PieSection\": {\n        return {\n          name: \"PieSection\",\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case \"Service\": {\n        return {\n          name: \"Service\",\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Direction\": {\n        return {\n          name: \"Direction\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Info\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Packet\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Pie\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_LABEL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]+\\\\\"/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_VALUE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/(0|[1-9][0-9]*)(\\\\\\\\.[0-9]+)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Architecture\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"fragment\":true,\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"LeftPort\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"RightPort\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Arrow\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ID\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TEXT_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\(\\\\\"[^\\\\\"]+\\\\\"\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"GitGraph\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+(?=\\\\\\\\s)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  isCommon,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-NCMFTTUW.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-4YFB5VUC.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-EQFLFMNE.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-BI6EQKOQ.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-FF7BQXOH.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Statement,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection\n} from \"./chunks/mermaid-parser.core/chunk-Y27MQZ3U.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-46DW6VJ7.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-W2GHVCYJ.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-BEWT4RHE.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-I3QFYML2.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-YCYPL57B.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Statement,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  parse\n};\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport function isAstNode(obj) {\n    return typeof obj === 'object' && obj !== null && typeof obj.$type === 'string';\n}\nexport function isReference(obj) {\n    return typeof obj === 'object' && obj !== null && typeof obj.$refText === 'string';\n}\nexport function isAstNodeDescription(obj) {\n    return typeof obj === 'object' && obj !== null\n        && typeof obj.name === 'string'\n        && typeof obj.type === 'string'\n        && typeof obj.path === 'string';\n}\nexport function isLinkingError(obj) {\n    return typeof obj === 'object' && obj !== null\n        && isAstNode(obj.container)\n        && isReference(obj.reference)\n        && typeof obj.message === 'string';\n}\n/**\n * An abstract implementation of the {@link AstReflection} interface.\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\n */\nexport class AbstractAstReflection {\n    constructor() {\n        this.subtypes = {};\n        this.allSubtypes = {};\n    }\n    isInstance(node, type) {\n        return isAstNode(node) && this.isSubtype(node.$type, type);\n    }\n    isSubtype(subtype, supertype) {\n        if (subtype === supertype) {\n            return true;\n        }\n        let nested = this.subtypes[subtype];\n        if (!nested) {\n            nested = this.subtypes[subtype] = {};\n        }\n        const existing = nested[supertype];\n        if (existing !== undefined) {\n            return existing;\n        }\n        else {\n            const result = this.computeIsSubtype(subtype, supertype);\n            nested[supertype] = result;\n            return result;\n        }\n    }\n    getAllSubTypes(type) {\n        const existing = this.allSubtypes[type];\n        if (existing) {\n            return existing;\n        }\n        else {\n            const allTypes = this.getAllTypes();\n            const types = [];\n            for (const possibleSubType of allTypes) {\n                if (this.isSubtype(possibleSubType, type)) {\n                    types.push(possibleSubType);\n                }\n            }\n            this.allSubtypes[type] = types;\n            return types;\n        }\n    }\n}\nexport function isCompositeCstNode(node) {\n    return typeof node === 'object' && node !== null && Array.isArray(node.content);\n}\nexport function isLeafCstNode(node) {\n    return typeof node === 'object' && node !== null && typeof node.tokenType === 'object';\n}\nexport function isRootCstNode(node) {\n    return isCompositeCstNode(node) && typeof node.fullText === 'string';\n}\n//# sourceMappingURL=syntax-tree.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n/**\n * The default implementation of `Stream` works with two input functions:\n *  - The first function creates the initial state of an iteration.\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\n */\nexport class StreamImpl {\n    constructor(startFn, nextFn) {\n        this.startFn = startFn;\n        this.nextFn = nextFn;\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n    [Symbol.iterator]() {\n        return this.iterator();\n    }\n    isEmpty() {\n        const iterator = this.iterator();\n        return Boolean(iterator.next().done);\n    }\n    count() {\n        const iterator = this.iterator();\n        let count = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            count++;\n            next = iterator.next();\n        }\n        return count;\n    }\n    toArray() {\n        const result = [];\n        const iterator = this.iterator();\n        let next;\n        do {\n            next = iterator.next();\n            if (next.value !== undefined) {\n                result.push(next.value);\n            }\n        } while (!next.done);\n        return result;\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap(keyFn, valueFn) {\n        const entryStream = this.map(element => [\n            keyFn ? keyFn(element) : element,\n            valueFn ? valueFn(element) : element\n        ]);\n        return new Map(entryStream);\n    }\n    toString() {\n        return this.join();\n    }\n    concat(other) {\n        const iterator = other[Symbol.iterator]();\n        return new StreamImpl(() => ({ first: this.startFn(), firstDone: false }), state => {\n            let result;\n            if (!state.firstDone) {\n                do {\n                    result = this.nextFn(state.first);\n                    if (!result.done) {\n                        return result;\n                    }\n                } while (!result.done);\n                state.firstDone = true;\n            }\n            do {\n                result = iterator.next();\n                if (!result.done) {\n                    return result;\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    join(separator = ',') {\n        const iterator = this.iterator();\n        let value = '';\n        let result;\n        let addSeparator = false;\n        do {\n            result = iterator.next();\n            if (!result.done) {\n                if (addSeparator) {\n                    value += separator;\n                }\n                value += toString(result.value);\n            }\n            addSeparator = true;\n        } while (!result.done);\n        return value;\n    }\n    indexOf(searchElement, fromIndex = 0) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (index >= fromIndex && next.value === searchElement) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    every(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (!predicate(next.value)) {\n                return false;\n            }\n            next = iterator.next();\n        }\n        return true;\n    }\n    some(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    forEach(callbackfn) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            callbackfn(next.value, index);\n            next = iterator.next();\n            index++;\n        }\n    }\n    map(callbackfn) {\n        return new StreamImpl(this.startFn, (state) => {\n            const { done, value } = this.nextFn(state);\n            if (done) {\n                return DONE_RESULT;\n            }\n            else {\n                return { done: false, value: callbackfn(value) };\n            }\n        });\n    }\n    filter(predicate) {\n        return new StreamImpl(this.startFn, state => {\n            let result;\n            do {\n                result = this.nextFn(state);\n                if (!result.done && predicate(result.value)) {\n                    return result;\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    nonNullable() {\n        return this.filter(e => e !== undefined && e !== null);\n    }\n    reduce(callbackfn, initialValue) {\n        const iterator = this.iterator();\n        let previousValue = initialValue;\n        let next = iterator.next();\n        while (!next.done) {\n            if (previousValue === undefined) {\n                previousValue = next.value;\n            }\n            else {\n                previousValue = callbackfn(previousValue, next.value);\n            }\n            next = iterator.next();\n        }\n        return previousValue;\n    }\n    reduceRight(callbackfn, initialValue) {\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\n    }\n    recursiveReduce(iterator, callbackfn, initialValue) {\n        const next = iterator.next();\n        if (next.done) {\n            return initialValue;\n        }\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\n        if (previousValue === undefined) {\n            return next.value;\n        }\n        return callbackfn(previousValue, next.value);\n    }\n    find(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return next.value;\n            }\n            next = iterator.next();\n        }\n        return undefined;\n    }\n    findIndex(predicate) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    includes(searchElement) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (next.value === searchElement) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    flatMap(callbackfn) {\n        return new StreamImpl(() => ({ this: this.startFn() }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    }\n                    else {\n                        return next;\n                    }\n                }\n                const { done, value } = this.nextFn(state.this);\n                if (!done) {\n                    const mapped = callbackfn(value);\n                    if (isIterable(mapped)) {\n                        state.iterator = mapped[Symbol.iterator]();\n                    }\n                    else {\n                        return { done: false, value: mapped };\n                    }\n                }\n            } while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    flat(depth) {\n        if (depth === undefined) {\n            depth = 1;\n        }\n        if (depth <= 0) {\n            return this;\n        }\n        const stream = depth > 1 ? this.flat(depth - 1) : this;\n        return new StreamImpl(() => ({ this: stream.startFn() }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    }\n                    else {\n                        return next;\n                    }\n                }\n                const { done, value } = stream.nextFn(state.this);\n                if (!done) {\n                    if (isIterable(value)) {\n                        state.iterator = value[Symbol.iterator]();\n                    }\n                    else {\n                        return { done: false, value: value };\n                    }\n                }\n            } while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    head() {\n        const iterator = this.iterator();\n        const result = iterator.next();\n        if (result.done) {\n            return undefined;\n        }\n        return result.value;\n    }\n    tail(skipCount = 1) {\n        return new StreamImpl(() => {\n            const state = this.startFn();\n            for (let i = 0; i < skipCount; i++) {\n                const next = this.nextFn(state);\n                if (next.done) {\n                    return state;\n                }\n            }\n            return state;\n        }, this.nextFn);\n    }\n    limit(maxSize) {\n        return new StreamImpl(() => ({ size: 0, state: this.startFn() }), state => {\n            state.size++;\n            if (state.size > maxSize) {\n                return DONE_RESULT;\n            }\n            return this.nextFn(state.state);\n        });\n    }\n    distinct(by) {\n        const set = new Set();\n        return this.filter(e => {\n            const value = by ? by(e) : e;\n            if (set.has(value)) {\n                return false;\n            }\n            else {\n                set.add(value);\n                return true;\n            }\n        });\n    }\n    exclude(other, key) {\n        const otherKeySet = new Set();\n        for (const item of other) {\n            const value = key ? key(item) : item;\n            otherKeySet.add(value);\n        }\n        return this.filter(e => {\n            const ownKey = key ? key(e) : e;\n            return !otherKeySet.has(ownKey);\n        });\n    }\n}\nfunction toString(item) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    if (typeof item === 'undefined') {\n        return 'undefined';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof item.toString === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return item.toString();\n    }\n    return Object.prototype.toString.call(item);\n}\nfunction isIterable(obj) {\n    return !!obj && typeof obj[Symbol.iterator] === 'function';\n}\n/**\n * An empty stream of any type.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const EMPTY_STREAM = new StreamImpl(() => undefined, () => DONE_RESULT);\n/**\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\n */\nexport const DONE_RESULT = Object.freeze({ done: true, value: undefined });\n/**\n * Create a stream from one or more iterables or array-likes.\n */\nexport function stream(...collections) {\n    if (collections.length === 1) {\n        const collection = collections[0];\n        if (collection instanceof StreamImpl) {\n            return collection;\n        }\n        if (isIterable(collection)) {\n            return new StreamImpl(() => collection[Symbol.iterator](), (iterator) => iterator.next());\n        }\n        if (typeof collection.length === 'number') {\n            return new StreamImpl(() => ({ index: 0 }), (state) => {\n                if (state.index < collection.length) {\n                    return { done: false, value: collection[state.index++] };\n                }\n                else {\n                    return DONE_RESULT;\n                }\n            });\n        }\n    }\n    if (collections.length > 1) {\n        return new StreamImpl(() => ({ collIndex: 0, arrIndex: 0 }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (!next.done) {\n                        return next;\n                    }\n                    state.iterator = undefined;\n                }\n                if (state.array) {\n                    if (state.arrIndex < state.array.length) {\n                        return { done: false, value: state.array[state.arrIndex++] };\n                    }\n                    state.array = undefined;\n                    state.arrIndex = 0;\n                }\n                if (state.collIndex < collections.length) {\n                    const collection = collections[state.collIndex++];\n                    if (isIterable(collection)) {\n                        state.iterator = collection[Symbol.iterator]();\n                    }\n                    else if (collection && typeof collection.length === 'number') {\n                        state.array = collection;\n                    }\n                }\n            } while (state.iterator || state.array || state.collIndex < collections.length);\n            return DONE_RESULT;\n        });\n    }\n    return EMPTY_STREAM;\n}\n/**\n * The default implementation of `TreeStream` takes a root element and a function that computes the\n * children of its argument. Whether the root node included in the stream is controlled with the\n * `includeRoot` option, which defaults to `false`.\n */\nexport class TreeStreamImpl extends StreamImpl {\n    constructor(root, children, options) {\n        super(() => ({\n            iterators: (options === null || options === void 0 ? void 0 : options.includeRoot) ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\n            pruned: false\n        }), state => {\n            if (state.pruned) {\n                state.iterators.pop();\n                state.pruned = false;\n            }\n            while (state.iterators.length > 0) {\n                const iterator = state.iterators[state.iterators.length - 1];\n                const next = iterator.next();\n                if (next.done) {\n                    state.iterators.pop();\n                }\n                else {\n                    state.iterators.push(children(next.value)[Symbol.iterator]());\n                    return next;\n                }\n            }\n            return DONE_RESULT;\n        });\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            prune: () => {\n                iterator.state.pruned = true;\n            },\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n}\n/**\n * A set of utility functions that reduce a stream to a single value.\n */\nexport var Reduction;\n(function (Reduction) {\n    /**\n     * Compute the sum of a number stream.\n     */\n    function sum(stream) {\n        return stream.reduce((a, b) => a + b, 0);\n    }\n    Reduction.sum = sum;\n    /**\n     * Compute the product of a number stream.\n     */\n    function product(stream) {\n        return stream.reduce((a, b) => a * b, 0);\n    }\n    Reduction.product = product;\n    /**\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    function min(stream) {\n        return stream.reduce((a, b) => Math.min(a, b));\n    }\n    Reduction.min = min;\n    /**\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    function max(stream) {\n        return stream.reduce((a, b) => Math.max(a, b));\n    }\n    Reduction.max = max;\n})(Reduction || (Reduction = {}));\n//# sourceMappingURL=stream.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\nimport { TreeStreamImpl } from './stream.js';\n/**\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamCst(node) {\n    return new TreeStreamImpl(node, element => {\n        if (isCompositeCstNode(element)) {\n            return element.content;\n        }\n        else {\n            return [];\n        }\n    }, { includeRoot: true });\n}\n/**\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\n */\nexport function flattenCst(node) {\n    return streamCst(node).filter(isLeafCstNode);\n}\n/**\n * Determines whether the specified cst node is a child of the specified parent node.\n */\nexport function isChildNode(child, parent) {\n    while (child.container) {\n        child = child.container;\n        if (child === parent) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tokenToRange(token) {\n    // Chevrotain uses 1-based indices everywhere\n    // So we subtract 1 from every value to align with the LSP\n    return {\n        start: {\n            character: token.startColumn - 1,\n            line: token.startLine - 1\n        },\n        end: {\n            character: token.endColumn,\n            line: token.endLine - 1\n        }\n    };\n}\nexport function toDocumentSegment(node) {\n    if (!node) {\n        return undefined;\n    }\n    const { offset, end, range } = node;\n    return {\n        range,\n        offset,\n        end,\n        length: end - offset\n    };\n}\nexport var RangeComparison;\n(function (RangeComparison) {\n    RangeComparison[RangeComparison[\"Before\"] = 0] = \"Before\";\n    RangeComparison[RangeComparison[\"After\"] = 1] = \"After\";\n    RangeComparison[RangeComparison[\"OverlapFront\"] = 2] = \"OverlapFront\";\n    RangeComparison[RangeComparison[\"OverlapBack\"] = 3] = \"OverlapBack\";\n    RangeComparison[RangeComparison[\"Inside\"] = 4] = \"Inside\";\n})(RangeComparison || (RangeComparison = {}));\nexport function compareRange(range, to) {\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character < range.start.character)) {\n        return RangeComparison.Before;\n    }\n    else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character > to.end.character)) {\n        return RangeComparison.After;\n    }\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\n    if (startInside && endInside) {\n        return RangeComparison.Inside;\n    }\n    else if (startInside) {\n        return RangeComparison.OverlapBack;\n    }\n    else {\n        return RangeComparison.OverlapFront;\n    }\n}\nexport function inRange(range, to) {\n    const comparison = compareRange(range, to);\n    return comparison > RangeComparison.After;\n}\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\n// Together with \\w it matches any kind of character which can commonly appear in IDs\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\n/**\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\n * it will instead return the leaf node at the `offset - 1` position.\n *\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\n */\nexport function findDeclarationNodeAtOffset(cstNode, offset, nameRegexp = DefaultNameRegexp) {\n    if (cstNode) {\n        if (offset > 0) {\n            const localOffset = offset - cstNode.offset;\n            const textAtOffset = cstNode.text.charAt(localOffset);\n            if (!nameRegexp.test(textAtOffset)) {\n                offset--;\n            }\n        }\n        return findLeafNodeAtOffset(cstNode, offset);\n    }\n    return undefined;\n}\nexport function findCommentNode(cstNode, commentNames) {\n    if (cstNode) {\n        const previous = getPreviousNode(cstNode, true);\n        if (previous && isCommentNode(previous, commentNames)) {\n            return previous;\n        }\n        if (isRootCstNode(cstNode)) {\n            // Go from the first non-hidden node through all nodes in reverse order\n            // We do this to find the comment node which directly precedes the root node\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\n            for (let i = endIndex - 1; i >= 0; i--) {\n                const child = cstNode.content[i];\n                if (isCommentNode(child, commentNames)) {\n                    return child;\n                }\n            }\n        }\n    }\n    return undefined;\n}\nexport function isCommentNode(cstNode, commentNames) {\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * Note that the given offset will be within the range of the returned leaf node.\n *\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node at the specified offset.\n */\nexport function findLeafNodeAtOffset(node, offset) {\n    if (isLeafCstNode(node)) {\n        return node;\n    }\n    else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, false);\n        if (searchResult) {\n            return findLeafNodeAtOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * If no CST node exists at the specified position, it will return the leaf node before it.\n *\n * If there is no leaf node before the specified offset, this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node closest to the specified offset.\n */\nexport function findLeafNodeBeforeOffset(node, offset) {\n    if (isLeafCstNode(node)) {\n        return node;\n    }\n    else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, true);\n        if (searchResult) {\n            return findLeafNodeBeforeOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\nfunction binarySearch(node, offset, closest) {\n    let left = 0;\n    let right = node.content.length - 1;\n    let closestNode = undefined;\n    while (left <= right) {\n        const middle = Math.floor((left + right) / 2);\n        const middleNode = node.content[middle];\n        if (middleNode.offset <= offset && middleNode.end > offset) {\n            // Found an exact match\n            return middleNode;\n        }\n        if (middleNode.end <= offset) {\n            // Update the closest node (less than offset) and move to the right half\n            closestNode = closest ? middleNode : undefined;\n            left = middle + 1;\n        }\n        else {\n            // Move to the left half\n            right = middle - 1;\n        }\n    }\n    return closestNode;\n}\nexport function getPreviousNode(node, hidden = true) {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        while (index > 0) {\n            index--;\n            const previous = parent.content[index];\n            if (hidden || !previous.hidden) {\n                return previous;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nexport function getNextNode(node, hidden = true) {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        const last = parent.content.length - 1;\n        while (index < last) {\n            index++;\n            const next = parent.content[index];\n            if (hidden || !next.hidden) {\n                return next;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nexport function getStartlineNode(node) {\n    if (node.range.start.character === 0) {\n        return node;\n    }\n    const line = node.range.start.line;\n    let last = node;\n    let index;\n    while (node.container) {\n        const parent = node.container;\n        const selfIndex = index !== null && index !== void 0 ? index : parent.content.indexOf(node);\n        if (selfIndex === 0) {\n            node = parent;\n            index = undefined;\n        }\n        else {\n            index = selfIndex - 1;\n            node = parent.content[index];\n        }\n        if (node.range.start.line !== line) {\n            break;\n        }\n        last = node;\n    }\n    return last;\n}\nexport function getInteriorNodes(start, end) {\n    const commonParent = getCommonParent(start, end);\n    if (!commonParent) {\n        return [];\n    }\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\n}\nfunction getCommonParent(a, b) {\n    const aParents = getParentChain(a);\n    const bParents = getParentChain(b);\n    let current;\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\n        const aParent = aParents[i];\n        const bParent = bParents[i];\n        if (aParent.parent === bParent.parent) {\n            current = {\n                parent: aParent.parent,\n                a: aParent.index,\n                b: bParent.index\n            };\n        }\n        else {\n            break;\n        }\n    }\n    return current;\n}\nfunction getParentChain(node) {\n    const chain = [];\n    while (node.container) {\n        const parent = node.container;\n        const index = parent.content.indexOf(node);\n        chain.push({\n            parent,\n            index\n        });\n        node = parent;\n    }\n    return chain.reverse();\n}\n//# sourceMappingURL=cst-utils.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport class ErrorWithLocation extends Error {\n    constructor(node, message) {\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\n    }\n}\nexport function assertUnreachable(_) {\n    throw new Error('Error! The input value was not handled.');\n}\n//# sourceMappingURL=errors.js.map","/******************************************************************************\n * This file was generated by langium-cli 3.0.0.\n * DO NOT EDIT MANUALLY!\n ******************************************************************************/\nimport { AbstractAstReflection } from '../../syntax-tree.js';\nexport const LangiumGrammarTerminals = {\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\n    WS: /\\s+/,\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\n};\nexport const AbstractRule = 'AbstractRule';\nexport function isAbstractRule(item) {\n    return reflection.isInstance(item, AbstractRule);\n}\nexport const AbstractType = 'AbstractType';\nexport function isAbstractType(item) {\n    return reflection.isInstance(item, AbstractType);\n}\nexport const Condition = 'Condition';\nexport function isCondition(item) {\n    return reflection.isInstance(item, Condition);\n}\nexport function isFeatureName(item) {\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\n}\nexport function isPrimitiveType(item) {\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\n}\nexport const TypeDefinition = 'TypeDefinition';\nexport function isTypeDefinition(item) {\n    return reflection.isInstance(item, TypeDefinition);\n}\nexport const ValueLiteral = 'ValueLiteral';\nexport function isValueLiteral(item) {\n    return reflection.isInstance(item, ValueLiteral);\n}\nexport const AbstractElement = 'AbstractElement';\nexport function isAbstractElement(item) {\n    return reflection.isInstance(item, AbstractElement);\n}\nexport const ArrayLiteral = 'ArrayLiteral';\nexport function isArrayLiteral(item) {\n    return reflection.isInstance(item, ArrayLiteral);\n}\nexport const ArrayType = 'ArrayType';\nexport function isArrayType(item) {\n    return reflection.isInstance(item, ArrayType);\n}\nexport const BooleanLiteral = 'BooleanLiteral';\nexport function isBooleanLiteral(item) {\n    return reflection.isInstance(item, BooleanLiteral);\n}\nexport const Conjunction = 'Conjunction';\nexport function isConjunction(item) {\n    return reflection.isInstance(item, Conjunction);\n}\nexport const Disjunction = 'Disjunction';\nexport function isDisjunction(item) {\n    return reflection.isInstance(item, Disjunction);\n}\nexport const Grammar = 'Grammar';\nexport function isGrammar(item) {\n    return reflection.isInstance(item, Grammar);\n}\nexport const GrammarImport = 'GrammarImport';\nexport function isGrammarImport(item) {\n    return reflection.isInstance(item, GrammarImport);\n}\nexport const InferredType = 'InferredType';\nexport function isInferredType(item) {\n    return reflection.isInstance(item, InferredType);\n}\nexport const Interface = 'Interface';\nexport function isInterface(item) {\n    return reflection.isInstance(item, Interface);\n}\nexport const NamedArgument = 'NamedArgument';\nexport function isNamedArgument(item) {\n    return reflection.isInstance(item, NamedArgument);\n}\nexport const Negation = 'Negation';\nexport function isNegation(item) {\n    return reflection.isInstance(item, Negation);\n}\nexport const NumberLiteral = 'NumberLiteral';\nexport function isNumberLiteral(item) {\n    return reflection.isInstance(item, NumberLiteral);\n}\nexport const Parameter = 'Parameter';\nexport function isParameter(item) {\n    return reflection.isInstance(item, Parameter);\n}\nexport const ParameterReference = 'ParameterReference';\nexport function isParameterReference(item) {\n    return reflection.isInstance(item, ParameterReference);\n}\nexport const ParserRule = 'ParserRule';\nexport function isParserRule(item) {\n    return reflection.isInstance(item, ParserRule);\n}\nexport const ReferenceType = 'ReferenceType';\nexport function isReferenceType(item) {\n    return reflection.isInstance(item, ReferenceType);\n}\nexport const ReturnType = 'ReturnType';\nexport function isReturnType(item) {\n    return reflection.isInstance(item, ReturnType);\n}\nexport const SimpleType = 'SimpleType';\nexport function isSimpleType(item) {\n    return reflection.isInstance(item, SimpleType);\n}\nexport const StringLiteral = 'StringLiteral';\nexport function isStringLiteral(item) {\n    return reflection.isInstance(item, StringLiteral);\n}\nexport const TerminalRule = 'TerminalRule';\nexport function isTerminalRule(item) {\n    return reflection.isInstance(item, TerminalRule);\n}\nexport const Type = 'Type';\nexport function isType(item) {\n    return reflection.isInstance(item, Type);\n}\nexport const TypeAttribute = 'TypeAttribute';\nexport function isTypeAttribute(item) {\n    return reflection.isInstance(item, TypeAttribute);\n}\nexport const UnionType = 'UnionType';\nexport function isUnionType(item) {\n    return reflection.isInstance(item, UnionType);\n}\nexport const Action = 'Action';\nexport function isAction(item) {\n    return reflection.isInstance(item, Action);\n}\nexport const Alternatives = 'Alternatives';\nexport function isAlternatives(item) {\n    return reflection.isInstance(item, Alternatives);\n}\nexport const Assignment = 'Assignment';\nexport function isAssignment(item) {\n    return reflection.isInstance(item, Assignment);\n}\nexport const CharacterRange = 'CharacterRange';\nexport function isCharacterRange(item) {\n    return reflection.isInstance(item, CharacterRange);\n}\nexport const CrossReference = 'CrossReference';\nexport function isCrossReference(item) {\n    return reflection.isInstance(item, CrossReference);\n}\nexport const EndOfFile = 'EndOfFile';\nexport function isEndOfFile(item) {\n    return reflection.isInstance(item, EndOfFile);\n}\nexport const Group = 'Group';\nexport function isGroup(item) {\n    return reflection.isInstance(item, Group);\n}\nexport const Keyword = 'Keyword';\nexport function isKeyword(item) {\n    return reflection.isInstance(item, Keyword);\n}\nexport const NegatedToken = 'NegatedToken';\nexport function isNegatedToken(item) {\n    return reflection.isInstance(item, NegatedToken);\n}\nexport const RegexToken = 'RegexToken';\nexport function isRegexToken(item) {\n    return reflection.isInstance(item, RegexToken);\n}\nexport const RuleCall = 'RuleCall';\nexport function isRuleCall(item) {\n    return reflection.isInstance(item, RuleCall);\n}\nexport const TerminalAlternatives = 'TerminalAlternatives';\nexport function isTerminalAlternatives(item) {\n    return reflection.isInstance(item, TerminalAlternatives);\n}\nexport const TerminalGroup = 'TerminalGroup';\nexport function isTerminalGroup(item) {\n    return reflection.isInstance(item, TerminalGroup);\n}\nexport const TerminalRuleCall = 'TerminalRuleCall';\nexport function isTerminalRuleCall(item) {\n    return reflection.isInstance(item, TerminalRuleCall);\n}\nexport const UnorderedGroup = 'UnorderedGroup';\nexport function isUnorderedGroup(item) {\n    return reflection.isInstance(item, UnorderedGroup);\n}\nexport const UntilToken = 'UntilToken';\nexport function isUntilToken(item) {\n    return reflection.isInstance(item, UntilToken);\n}\nexport const Wildcard = 'Wildcard';\nexport function isWildcard(item) {\n    return reflection.isInstance(item, Wildcard);\n}\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\n    getAllTypes() {\n        return ['AbstractElement', 'AbstractRule', 'AbstractType', 'Action', 'Alternatives', 'ArrayLiteral', 'ArrayType', 'Assignment', 'BooleanLiteral', 'CharacterRange', 'Condition', 'Conjunction', 'CrossReference', 'Disjunction', 'EndOfFile', 'Grammar', 'GrammarImport', 'Group', 'InferredType', 'Interface', 'Keyword', 'NamedArgument', 'NegatedToken', 'Negation', 'NumberLiteral', 'Parameter', 'ParameterReference', 'ParserRule', 'ReferenceType', 'RegexToken', 'ReturnType', 'RuleCall', 'SimpleType', 'StringLiteral', 'TerminalAlternatives', 'TerminalGroup', 'TerminalRule', 'TerminalRuleCall', 'Type', 'TypeAttribute', 'TypeDefinition', 'UnionType', 'UnorderedGroup', 'UntilToken', 'ValueLiteral', 'Wildcard'];\n    }\n    computeIsSubtype(subtype, supertype) {\n        switch (subtype) {\n            case Action:\n            case Alternatives:\n            case Assignment:\n            case CharacterRange:\n            case CrossReference:\n            case EndOfFile:\n            case Group:\n            case Keyword:\n            case NegatedToken:\n            case RegexToken:\n            case RuleCall:\n            case TerminalAlternatives:\n            case TerminalGroup:\n            case TerminalRuleCall:\n            case UnorderedGroup:\n            case UntilToken:\n            case Wildcard: {\n                return this.isSubtype(AbstractElement, supertype);\n            }\n            case ArrayLiteral:\n            case NumberLiteral:\n            case StringLiteral: {\n                return this.isSubtype(ValueLiteral, supertype);\n            }\n            case ArrayType:\n            case ReferenceType:\n            case SimpleType:\n            case UnionType: {\n                return this.isSubtype(TypeDefinition, supertype);\n            }\n            case BooleanLiteral: {\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\n            }\n            case Conjunction:\n            case Disjunction:\n            case Negation:\n            case ParameterReference: {\n                return this.isSubtype(Condition, supertype);\n            }\n            case InferredType:\n            case Interface:\n            case Type: {\n                return this.isSubtype(AbstractType, supertype);\n            }\n            case ParserRule: {\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\n            }\n            case TerminalRule: {\n                return this.isSubtype(AbstractRule, supertype);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n    getReferenceType(refInfo) {\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n        switch (referenceId) {\n            case 'Action:type':\n            case 'CrossReference:type':\n            case 'Interface:superTypes':\n            case 'ParserRule:returnType':\n            case 'SimpleType:typeRef': {\n                return AbstractType;\n            }\n            case 'Grammar:hiddenTokens':\n            case 'ParserRule:hiddenTokens':\n            case 'RuleCall:rule': {\n                return AbstractRule;\n            }\n            case 'Grammar:usedGrammars': {\n                return Grammar;\n            }\n            case 'NamedArgument:parameter':\n            case 'ParameterReference:parameter': {\n                return Parameter;\n            }\n            case 'TerminalRuleCall:rule': {\n                return TerminalRule;\n            }\n            default: {\n                throw new Error(`${referenceId} is not a valid reference id.`);\n            }\n        }\n    }\n    getTypeMetaData(type) {\n        switch (type) {\n            case 'AbstractElement': {\n                return {\n                    name: 'AbstractElement',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'ArrayLiteral': {\n                return {\n                    name: 'ArrayLiteral',\n                    properties: [\n                        { name: 'elements', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'ArrayType': {\n                return {\n                    name: 'ArrayType',\n                    properties: [\n                        { name: 'elementType' }\n                    ]\n                };\n            }\n            case 'BooleanLiteral': {\n                return {\n                    name: 'BooleanLiteral',\n                    properties: [\n                        { name: 'true', defaultValue: false }\n                    ]\n                };\n            }\n            case 'Conjunction': {\n                return {\n                    name: 'Conjunction',\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'Disjunction': {\n                return {\n                    name: 'Disjunction',\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'Grammar': {\n                return {\n                    name: 'Grammar',\n                    properties: [\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'imports', defaultValue: [] },\n                        { name: 'interfaces', defaultValue: [] },\n                        { name: 'isDeclared', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'rules', defaultValue: [] },\n                        { name: 'types', defaultValue: [] },\n                        { name: 'usedGrammars', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'GrammarImport': {\n                return {\n                    name: 'GrammarImport',\n                    properties: [\n                        { name: 'path' }\n                    ]\n                };\n            }\n            case 'InferredType': {\n                return {\n                    name: 'InferredType',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'Interface': {\n                return {\n                    name: 'Interface',\n                    properties: [\n                        { name: 'attributes', defaultValue: [] },\n                        { name: 'name' },\n                        { name: 'superTypes', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'NamedArgument': {\n                return {\n                    name: 'NamedArgument',\n                    properties: [\n                        { name: 'calledByName', defaultValue: false },\n                        { name: 'parameter' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'Negation': {\n                return {\n                    name: 'Negation',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'NumberLiteral': {\n                return {\n                    name: 'NumberLiteral',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'Parameter': {\n                return {\n                    name: 'Parameter',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'ParameterReference': {\n                return {\n                    name: 'ParameterReference',\n                    properties: [\n                        { name: 'parameter' }\n                    ]\n                };\n            }\n            case 'ParserRule': {\n                return {\n                    name: 'ParserRule',\n                    properties: [\n                        { name: 'dataType' },\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'definition' },\n                        { name: 'entry', defaultValue: false },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'inferredType' },\n                        { name: 'name' },\n                        { name: 'parameters', defaultValue: [] },\n                        { name: 'returnType' },\n                        { name: 'wildcard', defaultValue: false }\n                    ]\n                };\n            }\n            case 'ReferenceType': {\n                return {\n                    name: 'ReferenceType',\n                    properties: [\n                        { name: 'referenceType' }\n                    ]\n                };\n            }\n            case 'ReturnType': {\n                return {\n                    name: 'ReturnType',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'SimpleType': {\n                return {\n                    name: 'SimpleType',\n                    properties: [\n                        { name: 'primitiveType' },\n                        { name: 'stringType' },\n                        { name: 'typeRef' }\n                    ]\n                };\n            }\n            case 'StringLiteral': {\n                return {\n                    name: 'StringLiteral',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'TerminalRule': {\n                return {\n                    name: 'TerminalRule',\n                    properties: [\n                        { name: 'definition' },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hidden', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'Type': {\n                return {\n                    name: 'Type',\n                    properties: [\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'TypeAttribute': {\n                return {\n                    name: 'TypeAttribute',\n                    properties: [\n                        { name: 'defaultValue' },\n                        { name: 'isOptional', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'UnionType': {\n                return {\n                    name: 'UnionType',\n                    properties: [\n                        { name: 'types', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'Action': {\n                return {\n                    name: 'Action',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'inferredType' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'Alternatives': {\n                return {\n                    name: 'Alternatives',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Assignment': {\n                return {\n                    name: 'Assignment',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'CharacterRange': {\n                return {\n                    name: 'CharacterRange',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'left' },\n                        { name: 'lookahead' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'CrossReference': {\n                return {\n                    name: 'CrossReference',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'deprecatedSyntax', defaultValue: false },\n                        { name: 'lookahead' },\n                        { name: 'terminal' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'EndOfFile': {\n                return {\n                    name: 'EndOfFile',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Group': {\n                return {\n                    name: 'Group',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'guardCondition' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Keyword': {\n                return {\n                    name: 'Keyword',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'NegatedToken': {\n                return {\n                    name: 'NegatedToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'RegexToken': {\n                return {\n                    name: 'RegexToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'regex' }\n                    ]\n                };\n            }\n            case 'RuleCall': {\n                return {\n                    name: 'RuleCall',\n                    properties: [\n                        { name: 'arguments', defaultValue: [] },\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case 'TerminalAlternatives': {\n                return {\n                    name: 'TerminalAlternatives',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'TerminalGroup': {\n                return {\n                    name: 'TerminalGroup',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'TerminalRuleCall': {\n                return {\n                    name: 'TerminalRuleCall',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case 'UnorderedGroup': {\n                return {\n                    name: 'UnorderedGroup',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'UntilToken': {\n                return {\n                    name: 'UntilToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'Wildcard': {\n                return {\n                    name: 'Wildcard',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            default: {\n                return {\n                    name: type,\n                    properties: []\n                };\n            }\n        }\n    }\n}\nexport const reflection = new LangiumGrammarAstReflection();\n//# sourceMappingURL=ast.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\nimport { inRange } from './cst-utils.js';\n/**\n * Link the `$container` and other related properties of every AST node that is directly contained\n * in the given `node`.\n */\nexport function linkContentToContainer(node) {\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (Array.isArray(value)) {\n                value.forEach((item, index) => {\n                    if (isAstNode(item)) {\n                        item.$container = node;\n                        item.$containerProperty = name;\n                        item.$containerIndex = index;\n                    }\n                });\n            }\n            else if (isAstNode(value)) {\n                value.$container = node;\n                value.$containerProperty = name;\n            }\n        }\n    }\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\n * node that matches the type predicate. If the start node itself matches, it is returned.\n * If no container matches, `undefined` is returned.\n */\nexport function getContainerOfType(node, typePredicate) {\n    let item = node;\n    while (item) {\n        if (typePredicate(item)) {\n            return item;\n        }\n        item = item.$container;\n    }\n    return undefined;\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\n * of a container that matches the given predicate. The start node is included in the checks.\n */\nexport function hasContainerOfType(node, predicate) {\n    let item = node;\n    while (item) {\n        if (predicate(item)) {\n            return true;\n        }\n        item = item.$container;\n    }\n    return false;\n}\n/**\n * Retrieve the document in which the given AST node is contained. A reference to the document is\n * usually held by the root node of the AST.\n *\n * @throws an error if the node is not contained in a document.\n */\nexport function getDocument(node) {\n    const rootNode = findRootNode(node);\n    const result = rootNode.$document;\n    if (!result) {\n        throw new Error('AST node has no document.');\n    }\n    return result;\n}\n/**\n * Returns the root node of the given AST node by following the `$container` references.\n */\nexport function findRootNode(node) {\n    while (node.$container) {\n        node = node.$container;\n    }\n    return node;\n}\n/**\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamContents(node, options) {\n    if (!node) {\n        throw new Error('Node must be an AstNode.');\n    }\n    const range = options === null || options === void 0 ? void 0 : options.range;\n    return new StreamImpl(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = node[property];\n                if (isAstNode(value)) {\n                    state.keyIndex++;\n                    if (isAstNodeInRange(value, range)) {\n                        return { done: false, value };\n                    }\n                }\n                else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\n                            return { done: false, value: element };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\n * This does not include the root node itself.\n */\nexport function streamAllContents(root, options) {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options));\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamAst(root, options) {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.range) && !isAstNodeInRange(root, options.range)) {\n        // Return an empty stream if the root node isn't in range\n        return new TreeStreamImpl(root, () => []);\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\n}\nfunction isAstNodeInRange(astNode, range) {\n    var _a;\n    if (!range) {\n        return true;\n    }\n    const nodeRange = (_a = astNode.$cstNode) === null || _a === void 0 ? void 0 : _a.range;\n    if (!nodeRange) {\n        return false;\n    }\n    return inRange(nodeRange, range);\n}\n/**\n * Create a stream of all cross-references that are held by the given AST node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamReferences(node) {\n    return new StreamImpl(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = node[property];\n                if (isReference(value)) {\n                    state.keyIndex++;\n                    return { done: false, value: { reference: value, container: node, property } };\n                }\n                else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isReference(element)) {\n                            return { done: false, value: { reference: element, container: node, property, index } };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n/**\n * Returns a Stream of references to the target node from the AstNode tree\n *\n * @param targetNode AstNode we are looking for\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\n */\nexport function findLocalReferences(targetNode, lookup = getDocument(targetNode).parseResult.value) {\n    const refs = [];\n    streamAst(lookup).forEach(node => {\n        streamReferences(node).forEach(refInfo => {\n            if (refInfo.reference.ref === targetNode) {\n                refs.push(refInfo.reference);\n            }\n        });\n    });\n    return stream(refs);\n}\n/**\n * Assigns all mandatory AST properties to the specified node.\n *\n * @param reflection Reflection object used to gather mandatory properties for the node.\n * @param node Specified node is modified in place and properties are directly assigned.\n */\nexport function assignMandatoryProperties(reflection, node) {\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\n    const genericNode = node;\n    for (const property of typeMetaData.properties) {\n        // Only set the value if the property is not already set and if it has a default value\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\n        }\n    }\n}\nfunction copyDefaultValue(propertyType) {\n    if (Array.isArray(propertyType)) {\n        return [...propertyType.map(copyDefaultValue)];\n    }\n    else {\n        return propertyType;\n    }\n}\n/**\n * Creates a deep copy of the specified AST node.\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\n *\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\n */\nexport function copyAstNode(node, buildReference) {\n    const copy = { $type: node.$type };\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (isAstNode(value)) {\n                copy[name] = copyAstNode(value, buildReference);\n            }\n            else if (isReference(value)) {\n                copy[name] = buildReference(copy, name, value.$refNode, value.$refText);\n            }\n            else if (Array.isArray(value)) {\n                const copiedArray = [];\n                for (const element of value) {\n                    if (isAstNode(element)) {\n                        copiedArray.push(copyAstNode(element, buildReference));\n                    }\n                    else if (isReference(element)) {\n                        copiedArray.push(buildReference(copy, name, element.$refNode, element.$refText));\n                    }\n                    else {\n                        copiedArray.push(element);\n                    }\n                }\n                copy[name] = copiedArray;\n            }\n            else {\n                copy[name] = value;\n            }\n        }\n    }\n    linkContentToContainer(copy);\n    return copy;\n}\n//# sourceMappingURL=ast-utils.js.map","export function cc(char) {\n    return char.charCodeAt(0);\n}\nexport function insertToSet(item, set) {\n    if (Array.isArray(item)) {\n        item.forEach(function (subItem) {\n            set.push(subItem);\n        });\n    }\n    else {\n        set.push(item);\n    }\n}\nexport function addFlag(flagObj, flagKey) {\n    if (flagObj[flagKey] === true) {\n        throw \"duplicate flag \" + flagKey;\n    }\n    const x = flagObj[flagKey];\n    flagObj[flagKey] = true;\n}\nexport function ASSERT_EXISTS(obj) {\n    // istanbul ignore next\n    if (obj === undefined) {\n        throw Error(\"Internal Error - Should never get here!\");\n    }\n    return true;\n}\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE() {\n    throw Error(\"Internal Error - Should never get here!\");\n}\nexport function isCharacter(obj) {\n    return obj[\"type\"] === \"Character\";\n}\n//# sourceMappingURL=utils.js.map","import { cc } from \"./utils.js\";\nexport const digitsCharCodes = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n    digitsCharCodes.push(i);\n}\nexport const wordCharCodes = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n    wordCharCodes.push(i);\n}\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n    wordCharCodes.push(i);\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes = [\n    cc(\" \"),\n    cc(\"\\f\"),\n    cc(\"\\n\"),\n    cc(\"\\r\"),\n    cc(\"\\t\"),\n    cc(\"\\v\"),\n    cc(\"\\t\"),\n    cc(\"\\u00a0\"),\n    cc(\"\\u1680\"),\n    cc(\"\\u2000\"),\n    cc(\"\\u2001\"),\n    cc(\"\\u2002\"),\n    cc(\"\\u2003\"),\n    cc(\"\\u2004\"),\n    cc(\"\\u2005\"),\n    cc(\"\\u2006\"),\n    cc(\"\\u2007\"),\n    cc(\"\\u2008\"),\n    cc(\"\\u2009\"),\n    cc(\"\\u200a\"),\n    cc(\"\\u2028\"),\n    cc(\"\\u2029\"),\n    cc(\"\\u202f\"),\n    cc(\"\\u205f\"),\n    cc(\"\\u3000\"),\n    cc(\"\\ufeff\"),\n];\n//# sourceMappingURL=character-classes.js.map","import { addFlag, ASSERT_EXISTS, ASSERT_NEVER_REACH_HERE, cc, insertToSet, isCharacter, } from \"./utils.js\";\nimport { digitsCharCodes, whitespaceCodes, wordCharCodes, } from \"./character-classes.js\";\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n    constructor() {\n        this.idx = 0;\n        this.input = \"\";\n        this.groupIdx = 0;\n    }\n    saveState() {\n        return {\n            idx: this.idx,\n            input: this.input,\n            groupIdx: this.groupIdx,\n        };\n    }\n    restoreState(newState) {\n        this.idx = newState.idx;\n        this.input = newState.input;\n        this.groupIdx = newState.groupIdx;\n    }\n    pattern(input) {\n        // parser state\n        this.idx = 0;\n        this.input = input;\n        this.groupIdx = 0;\n        this.consumeChar(\"/\");\n        const value = this.disjunction();\n        this.consumeChar(\"/\");\n        const flags = {\n            type: \"Flags\",\n            loc: { begin: this.idx, end: input.length },\n            global: false,\n            ignoreCase: false,\n            multiLine: false,\n            unicode: false,\n            sticky: false,\n        };\n        while (this.isRegExpFlag()) {\n            switch (this.popChar()) {\n                case \"g\":\n                    addFlag(flags, \"global\");\n                    break;\n                case \"i\":\n                    addFlag(flags, \"ignoreCase\");\n                    break;\n                case \"m\":\n                    addFlag(flags, \"multiLine\");\n                    break;\n                case \"u\":\n                    addFlag(flags, \"unicode\");\n                    break;\n                case \"y\":\n                    addFlag(flags, \"sticky\");\n                    break;\n            }\n        }\n        if (this.idx !== this.input.length) {\n            throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n        }\n        return {\n            type: \"Pattern\",\n            flags: flags,\n            value: value,\n            loc: this.loc(0),\n        };\n    }\n    disjunction() {\n        const alts = [];\n        const begin = this.idx;\n        alts.push(this.alternative());\n        while (this.peekChar() === \"|\") {\n            this.consumeChar(\"|\");\n            alts.push(this.alternative());\n        }\n        return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n    }\n    alternative() {\n        const terms = [];\n        const begin = this.idx;\n        while (this.isTerm()) {\n            terms.push(this.term());\n        }\n        return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n    }\n    term() {\n        if (this.isAssertion()) {\n            return this.assertion();\n        }\n        else {\n            return this.atom();\n        }\n    }\n    assertion() {\n        const begin = this.idx;\n        switch (this.popChar()) {\n            case \"^\":\n                return {\n                    type: \"StartAnchor\",\n                    loc: this.loc(begin),\n                };\n            case \"$\":\n                return { type: \"EndAnchor\", loc: this.loc(begin) };\n            // '\\b' or '\\B'\n            case \"\\\\\":\n                switch (this.popChar()) {\n                    case \"b\":\n                        return {\n                            type: \"WordBoundary\",\n                            loc: this.loc(begin),\n                        };\n                    case \"B\":\n                        return {\n                            type: \"NonWordBoundary\",\n                            loc: this.loc(begin),\n                        };\n                }\n                // istanbul ignore next\n                throw Error(\"Invalid Assertion Escape\");\n            // '(?=' or '(?!'\n            case \"(\":\n                this.consumeChar(\"?\");\n                let type;\n                switch (this.popChar()) {\n                    case \"=\":\n                        type = \"Lookahead\";\n                        break;\n                    case \"!\":\n                        type = \"NegativeLookahead\";\n                        break;\n                }\n                ASSERT_EXISTS(type);\n                const disjunction = this.disjunction();\n                this.consumeChar(\")\");\n                return {\n                    type: type,\n                    value: disjunction,\n                    loc: this.loc(begin),\n                };\n        }\n        // istanbul ignore next\n        return ASSERT_NEVER_REACH_HERE();\n    }\n    quantifier(isBacktracking = false) {\n        let range = undefined;\n        const begin = this.idx;\n        switch (this.popChar()) {\n            case \"*\":\n                range = {\n                    atLeast: 0,\n                    atMost: Infinity,\n                };\n                break;\n            case \"+\":\n                range = {\n                    atLeast: 1,\n                    atMost: Infinity,\n                };\n                break;\n            case \"?\":\n                range = {\n                    atLeast: 0,\n                    atMost: 1,\n                };\n                break;\n            case \"{\":\n                const atLeast = this.integerIncludingZero();\n                switch (this.popChar()) {\n                    case \"}\":\n                        range = {\n                            atLeast: atLeast,\n                            atMost: atLeast,\n                        };\n                        break;\n                    case \",\":\n                        let atMost;\n                        if (this.isDigit()) {\n                            atMost = this.integerIncludingZero();\n                            range = {\n                                atLeast: atLeast,\n                                atMost: atMost,\n                            };\n                        }\n                        else {\n                            range = {\n                                atLeast: atLeast,\n                                atMost: Infinity,\n                            };\n                        }\n                        this.consumeChar(\"}\");\n                        break;\n                }\n                // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n                // causes severe performance degradations\n                if (isBacktracking === true && range === undefined) {\n                    return undefined;\n                }\n                ASSERT_EXISTS(range);\n                break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n            return undefined;\n        }\n        // istanbul ignore else\n        if (ASSERT_EXISTS(range)) {\n            if (this.peekChar(0) === \"?\") {\n                this.consumeChar(\"?\");\n                range.greedy = false;\n            }\n            else {\n                range.greedy = true;\n            }\n            range.type = \"Quantifier\";\n            range.loc = this.loc(begin);\n            return range;\n        }\n    }\n    atom() {\n        let atom;\n        const begin = this.idx;\n        switch (this.peekChar()) {\n            case \".\":\n                atom = this.dotAll();\n                break;\n            case \"\\\\\":\n                atom = this.atomEscape();\n                break;\n            case \"[\":\n                atom = this.characterClass();\n                break;\n            case \"(\":\n                atom = this.group();\n                break;\n        }\n        if (atom === undefined && this.isPatternCharacter()) {\n            atom = this.patternCharacter();\n        }\n        // istanbul ignore else\n        if (ASSERT_EXISTS(atom)) {\n            atom.loc = this.loc(begin);\n            if (this.isQuantifier()) {\n                atom.quantifier = this.quantifier();\n            }\n            return atom;\n        }\n        // istanbul ignore next\n        return ASSERT_NEVER_REACH_HERE();\n    }\n    dotAll() {\n        this.consumeChar(\".\");\n        return {\n            type: \"Set\",\n            complement: true,\n            value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n        };\n    }\n    atomEscape() {\n        this.consumeChar(\"\\\\\");\n        switch (this.peekChar()) {\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                return this.decimalEscapeAtom();\n            case \"d\":\n            case \"D\":\n            case \"s\":\n            case \"S\":\n            case \"w\":\n            case \"W\":\n                return this.characterClassEscape();\n            case \"f\":\n            case \"n\":\n            case \"r\":\n            case \"t\":\n            case \"v\":\n                return this.controlEscapeAtom();\n            case \"c\":\n                return this.controlLetterEscapeAtom();\n            case \"0\":\n                return this.nulCharacterAtom();\n            case \"x\":\n                return this.hexEscapeSequenceAtom();\n            case \"u\":\n                return this.regExpUnicodeEscapeSequenceAtom();\n            default:\n                return this.identityEscapeAtom();\n        }\n    }\n    decimalEscapeAtom() {\n        const value = this.positiveInteger();\n        return { type: \"GroupBackReference\", value: value };\n    }\n    characterClassEscape() {\n        let set;\n        let complement = false;\n        switch (this.popChar()) {\n            case \"d\":\n                set = digitsCharCodes;\n                break;\n            case \"D\":\n                set = digitsCharCodes;\n                complement = true;\n                break;\n            case \"s\":\n                set = whitespaceCodes;\n                break;\n            case \"S\":\n                set = whitespaceCodes;\n                complement = true;\n                break;\n            case \"w\":\n                set = wordCharCodes;\n                break;\n            case \"W\":\n                set = wordCharCodes;\n                complement = true;\n                break;\n        }\n        // istanbul ignore else\n        if (ASSERT_EXISTS(set)) {\n            return { type: \"Set\", value: set, complement: complement };\n        }\n        // istanbul ignore next\n        return ASSERT_NEVER_REACH_HERE();\n    }\n    controlEscapeAtom() {\n        let escapeCode;\n        switch (this.popChar()) {\n            case \"f\":\n                escapeCode = cc(\"\\f\");\n                break;\n            case \"n\":\n                escapeCode = cc(\"\\n\");\n                break;\n            case \"r\":\n                escapeCode = cc(\"\\r\");\n                break;\n            case \"t\":\n                escapeCode = cc(\"\\t\");\n                break;\n            case \"v\":\n                escapeCode = cc(\"\\v\");\n                break;\n        }\n        // istanbul ignore else\n        if (ASSERT_EXISTS(escapeCode)) {\n            return { type: \"Character\", value: escapeCode };\n        }\n        // istanbul ignore next\n        return ASSERT_NEVER_REACH_HERE();\n    }\n    controlLetterEscapeAtom() {\n        this.consumeChar(\"c\");\n        const letter = this.popChar();\n        if (/[a-zA-Z]/.test(letter) === false) {\n            throw Error(\"Invalid \");\n        }\n        const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n        return { type: \"Character\", value: letterCode };\n    }\n    nulCharacterAtom() {\n        // TODO implement '[lookahead ∉ DecimalDigit]'\n        // TODO: for the deprecated octal escape sequence\n        this.consumeChar(\"0\");\n        return { type: \"Character\", value: cc(\"\\0\") };\n    }\n    hexEscapeSequenceAtom() {\n        this.consumeChar(\"x\");\n        return this.parseHexDigits(2);\n    }\n    regExpUnicodeEscapeSequenceAtom() {\n        this.consumeChar(\"u\");\n        return this.parseHexDigits(4);\n    }\n    identityEscapeAtom() {\n        // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n        // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n        const escapedChar = this.popChar();\n        return { type: \"Character\", value: cc(escapedChar) };\n    }\n    classPatternCharacterAtom() {\n        switch (this.peekChar()) {\n            // istanbul ignore next\n            case \"\\n\":\n            // istanbul ignore next\n            case \"\\r\":\n            // istanbul ignore next\n            case \"\\u2028\":\n            // istanbul ignore next\n            case \"\\u2029\":\n            // istanbul ignore next\n            case \"\\\\\":\n            // istanbul ignore next\n            case \"]\":\n                throw Error(\"TBD\");\n            default:\n                const nextChar = this.popChar();\n                return { type: \"Character\", value: cc(nextChar) };\n        }\n    }\n    characterClass() {\n        const set = [];\n        let complement = false;\n        this.consumeChar(\"[\");\n        if (this.peekChar(0) === \"^\") {\n            this.consumeChar(\"^\");\n            complement = true;\n        }\n        while (this.isClassAtom()) {\n            const from = this.classAtom();\n            const isFromSingleChar = from.type === \"Character\";\n            if (isCharacter(from) && this.isRangeDash()) {\n                this.consumeChar(\"-\");\n                const to = this.classAtom();\n                const isToSingleChar = to.type === \"Character\";\n                // a range can only be used when both sides are single characters\n                if (isCharacter(to)) {\n                    if (to.value < from.value) {\n                        throw Error(\"Range out of order in character class\");\n                    }\n                    set.push({ from: from.value, to: to.value });\n                }\n                else {\n                    // literal dash\n                    insertToSet(from.value, set);\n                    set.push(cc(\"-\"));\n                    insertToSet(to.value, set);\n                }\n            }\n            else {\n                insertToSet(from.value, set);\n            }\n        }\n        this.consumeChar(\"]\");\n        return { type: \"Set\", complement: complement, value: set };\n    }\n    classAtom() {\n        switch (this.peekChar()) {\n            // istanbul ignore next\n            case \"]\":\n            // istanbul ignore next\n            case \"\\n\":\n            // istanbul ignore next\n            case \"\\r\":\n            // istanbul ignore next\n            case \"\\u2028\":\n            // istanbul ignore next\n            case \"\\u2029\":\n                throw Error(\"TBD\");\n            case \"\\\\\":\n                return this.classEscape();\n            default:\n                return this.classPatternCharacterAtom();\n        }\n    }\n    classEscape() {\n        this.consumeChar(\"\\\\\");\n        switch (this.peekChar()) {\n            // Matches a backspace.\n            // (Not to be confused with \\b word boundary outside characterClass)\n            case \"b\":\n                this.consumeChar(\"b\");\n                return { type: \"Character\", value: cc(\"\\u0008\") };\n            case \"d\":\n            case \"D\":\n            case \"s\":\n            case \"S\":\n            case \"w\":\n            case \"W\":\n                return this.characterClassEscape();\n            case \"f\":\n            case \"n\":\n            case \"r\":\n            case \"t\":\n            case \"v\":\n                return this.controlEscapeAtom();\n            case \"c\":\n                return this.controlLetterEscapeAtom();\n            case \"0\":\n                return this.nulCharacterAtom();\n            case \"x\":\n                return this.hexEscapeSequenceAtom();\n            case \"u\":\n                return this.regExpUnicodeEscapeSequenceAtom();\n            default:\n                return this.identityEscapeAtom();\n        }\n    }\n    group() {\n        let capturing = true;\n        this.consumeChar(\"(\");\n        switch (this.peekChar(0)) {\n            case \"?\":\n                this.consumeChar(\"?\");\n                this.consumeChar(\":\");\n                capturing = false;\n                break;\n            default:\n                this.groupIdx++;\n                break;\n        }\n        const value = this.disjunction();\n        this.consumeChar(\")\");\n        const groupAst = {\n            type: \"Group\",\n            capturing: capturing,\n            value: value,\n        };\n        if (capturing) {\n            groupAst[\"idx\"] = this.groupIdx;\n        }\n        return groupAst;\n    }\n    positiveInteger() {\n        let number = this.popChar();\n        // istanbul ignore next - can't ever get here due to previous lookahead checks\n        // still implementing this error checking in case this ever changes.\n        if (decimalPatternNoZero.test(number) === false) {\n            throw Error(\"Expecting a positive integer\");\n        }\n        while (decimalPattern.test(this.peekChar(0))) {\n            number += this.popChar();\n        }\n        return parseInt(number, 10);\n    }\n    integerIncludingZero() {\n        let number = this.popChar();\n        if (decimalPattern.test(number) === false) {\n            throw Error(\"Expecting an integer\");\n        }\n        while (decimalPattern.test(this.peekChar(0))) {\n            number += this.popChar();\n        }\n        return parseInt(number, 10);\n    }\n    patternCharacter() {\n        const nextChar = this.popChar();\n        switch (nextChar) {\n            // istanbul ignore next\n            case \"\\n\":\n            // istanbul ignore next\n            case \"\\r\":\n            // istanbul ignore next\n            case \"\\u2028\":\n            // istanbul ignore next\n            case \"\\u2029\":\n            // istanbul ignore next\n            case \"^\":\n            // istanbul ignore next\n            case \"$\":\n            // istanbul ignore next\n            case \"\\\\\":\n            // istanbul ignore next\n            case \".\":\n            // istanbul ignore next\n            case \"*\":\n            // istanbul ignore next\n            case \"+\":\n            // istanbul ignore next\n            case \"?\":\n            // istanbul ignore next\n            case \"(\":\n            // istanbul ignore next\n            case \")\":\n            // istanbul ignore next\n            case \"[\":\n            // istanbul ignore next\n            case \"|\":\n                // istanbul ignore next\n                throw Error(\"TBD\");\n            default:\n                return { type: \"Character\", value: cc(nextChar) };\n        }\n    }\n    isRegExpFlag() {\n        switch (this.peekChar(0)) {\n            case \"g\":\n            case \"i\":\n            case \"m\":\n            case \"u\":\n            case \"y\":\n                return true;\n            default:\n                return false;\n        }\n    }\n    isRangeDash() {\n        return this.peekChar() === \"-\" && this.isClassAtom(1);\n    }\n    isDigit() {\n        return decimalPattern.test(this.peekChar(0));\n    }\n    isClassAtom(howMuch = 0) {\n        switch (this.peekChar(howMuch)) {\n            case \"]\":\n            case \"\\n\":\n            case \"\\r\":\n            case \"\\u2028\":\n            case \"\\u2029\":\n                return false;\n            default:\n                return true;\n        }\n    }\n    isTerm() {\n        return this.isAtom() || this.isAssertion();\n    }\n    isAtom() {\n        if (this.isPatternCharacter()) {\n            return true;\n        }\n        switch (this.peekChar(0)) {\n            case \".\":\n            case \"\\\\\": // atomEscape\n            case \"[\": // characterClass\n            // TODO: isAtom must be called before isAssertion - disambiguate\n            case \"(\": // group\n                return true;\n            default:\n                return false;\n        }\n    }\n    isAssertion() {\n        switch (this.peekChar(0)) {\n            case \"^\":\n            case \"$\":\n                return true;\n            // '\\b' or '\\B'\n            case \"\\\\\":\n                switch (this.peekChar(1)) {\n                    case \"b\":\n                    case \"B\":\n                        return true;\n                    default:\n                        return false;\n                }\n            // '(?=' or '(?!'\n            case \"(\":\n                return (this.peekChar(1) === \"?\" &&\n                    (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\"));\n            default:\n                return false;\n        }\n    }\n    isQuantifier() {\n        const prevState = this.saveState();\n        try {\n            return this.quantifier(true) !== undefined;\n        }\n        catch (e) {\n            return false;\n        }\n        finally {\n            this.restoreState(prevState);\n        }\n    }\n    isPatternCharacter() {\n        switch (this.peekChar()) {\n            case \"^\":\n            case \"$\":\n            case \"\\\\\":\n            case \".\":\n            case \"*\":\n            case \"+\":\n            case \"?\":\n            case \"(\":\n            case \")\":\n            case \"[\":\n            case \"|\":\n            case \"/\":\n            case \"\\n\":\n            case \"\\r\":\n            case \"\\u2028\":\n            case \"\\u2029\":\n                return false;\n            default:\n                return true;\n        }\n    }\n    parseHexDigits(howMany) {\n        let hexString = \"\";\n        for (let i = 0; i < howMany; i++) {\n            const hexChar = this.popChar();\n            if (hexDigitPattern.test(hexChar) === false) {\n                throw Error(\"Expecting a HexDecimal digits\");\n            }\n            hexString += hexChar;\n        }\n        const charCode = parseInt(hexString, 16);\n        return { type: \"Character\", value: charCode };\n    }\n    peekChar(howMuch = 0) {\n        return this.input[this.idx + howMuch];\n    }\n    popChar() {\n        const nextChar = this.peekChar(0);\n        this.consumeChar(undefined);\n        return nextChar;\n    }\n    consumeChar(char) {\n        if (char !== undefined && this.input[this.idx] !== char) {\n            throw Error(\"Expected: '\" +\n                char +\n                \"' but found: '\" +\n                this.input[this.idx] +\n                \"' at offset: \" +\n                this.idx);\n        }\n        if (this.idx >= this.input.length) {\n            throw Error(\"Unexpected end of input\");\n        }\n        this.idx++;\n    }\n    loc(begin) {\n        return { begin: begin, end: this.idx };\n    }\n}\n//# sourceMappingURL=regexp-parser.js.map","export class BaseRegExpVisitor {\n    visitChildren(node) {\n        for (const key in node) {\n            const child = node[key];\n            /* istanbul ignore else */\n            if (node.hasOwnProperty(key)) {\n                if (child.type !== undefined) {\n                    this.visit(child);\n                }\n                else if (Array.isArray(child)) {\n                    child.forEach((subChild) => {\n                        this.visit(subChild);\n                    }, this);\n                }\n            }\n        }\n    }\n    visit(node) {\n        switch (node.type) {\n            case \"Pattern\":\n                this.visitPattern(node);\n                break;\n            case \"Flags\":\n                this.visitFlags(node);\n                break;\n            case \"Disjunction\":\n                this.visitDisjunction(node);\n                break;\n            case \"Alternative\":\n                this.visitAlternative(node);\n                break;\n            case \"StartAnchor\":\n                this.visitStartAnchor(node);\n                break;\n            case \"EndAnchor\":\n                this.visitEndAnchor(node);\n                break;\n            case \"WordBoundary\":\n                this.visitWordBoundary(node);\n                break;\n            case \"NonWordBoundary\":\n                this.visitNonWordBoundary(node);\n                break;\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                break;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                break;\n            case \"Character\":\n                this.visitCharacter(node);\n                break;\n            case \"Set\":\n                this.visitSet(node);\n                break;\n            case \"Group\":\n                this.visitGroup(node);\n                break;\n            case \"GroupBackReference\":\n                this.visitGroupBackReference(node);\n                break;\n            case \"Quantifier\":\n                this.visitQuantifier(node);\n                break;\n        }\n        this.visitChildren(node);\n    }\n    visitPattern(node) { }\n    visitFlags(node) { }\n    visitDisjunction(node) { }\n    visitAlternative(node) { }\n    // Assertion\n    visitStartAnchor(node) { }\n    visitEndAnchor(node) { }\n    visitWordBoundary(node) { }\n    visitNonWordBoundary(node) { }\n    visitLookahead(node) { }\n    visitNegativeLookahead(node) { }\n    // atoms\n    visitCharacter(node) { }\n    visitSet(node) { }\n    visitGroup(node) { }\n    visitGroupBackReference(node) { }\n    visitQuantifier(node) { }\n}\n//# sourceMappingURL=base-regexp-visitor.js.map","export { RegExpParser } from \"./regexp-parser.js\";\nexport { BaseRegExpVisitor } from \"./base-regexp-visitor.js\";\n//# sourceMappingURL=api.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\nconst regexpParser = new RegExpParser();\n/**\n * This class is in charge of heuristically identifying start/end tokens of terminals.\n *\n * The way this works is by doing the following:\n * 1. Traverse the regular expression in the \"start state\"\n * 2. Add any encountered sets/single characters to the \"start regexp\"\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\n * 5. If we re-encounter any variable-length content we reset the end stack\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\n *\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\n */\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\n    constructor() {\n        super(...arguments);\n        this.isStarting = true;\n        this.endRegexpStack = [];\n        this.multiline = false;\n    }\n    get endRegex() {\n        return this.endRegexpStack.join('');\n    }\n    reset(regex) {\n        this.multiline = false;\n        this.regex = regex;\n        this.startRegexp = '';\n        this.isStarting = true;\n        this.endRegexpStack = [];\n    }\n    visitGroup(node) {\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n    }\n    visitCharacter(node) {\n        const char = String.fromCharCode(node.value);\n        if (!this.multiline && char === '\\n') {\n            this.multiline = true;\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n        else {\n            const escapedChar = escapeRegExp(char);\n            this.endRegexpStack.push(escapedChar);\n            if (this.isStarting) {\n                this.startRegexp += escapedChar;\n            }\n        }\n    }\n    visitSet(node) {\n        if (!this.multiline) {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            const regex = new RegExp(set);\n            this.multiline = Boolean('\\n'.match(regex));\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n        else {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            this.endRegexpStack.push(set);\n            if (this.isStarting) {\n                this.startRegexp += set;\n            }\n        }\n    }\n    visitChildren(node) {\n        if (node.type === 'Group') {\n            // Ignore children of groups with quantifier (+/*/?)\n            // These groups are unrelated to start/end tokens of terminals\n            const group = node;\n            if (group.quantifier) {\n                return;\n            }\n        }\n        super.visitChildren(node);\n    }\n}\nconst visitor = new TerminalRegExpVisitor();\nexport function getTerminalParts(regexp) {\n    try {\n        if (typeof regexp !== 'string') {\n            regexp = regexp.source;\n        }\n        regexp = `/${regexp}/`;\n        const pattern = regexpParser.pattern(regexp);\n        const parts = [];\n        for (const alternative of pattern.value.value) {\n            visitor.reset(regexp);\n            visitor.visit(alternative);\n            parts.push({\n                start: visitor.startRegexp,\n                end: visitor.endRegex\n            });\n        }\n        return parts;\n    }\n    catch (_a) {\n        return [];\n    }\n}\nexport function isMultilineComment(regexp) {\n    try {\n        if (typeof regexp === 'string') {\n            regexp = new RegExp(regexp);\n        }\n        regexp = regexp.toString();\n        visitor.reset(regexp);\n        // Parsing the pattern might fail (since it's user code)\n        visitor.visit(regexpParser.pattern(regexp));\n        return visitor.multiline;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function isWhitespace(value) {\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\n    return regexp.test(' ');\n}\nexport function escapeRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nexport function getCaseInsensitivePattern(keyword) {\n    return Array.prototype.map.call(keyword, letter => /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)).join('');\n}\n/**\n * Determines whether the given input has a partial match with the specified regex.\n * @param regex The regex to partially match against\n * @param input The input string\n * @returns Whether any match exists.\n */\nexport function partialMatches(regex, input) {\n    const partial = partialRegExp(regex);\n    const match = input.match(partial);\n    return !!match && match[0].length > 0;\n}\n/**\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\n * @param regex The input regex to be converted.\n * @returns A partial regex constructed from the input regex.\n */\nexport function partialRegExp(regex) {\n    if (typeof regex === 'string') {\n        regex = new RegExp(regex);\n    }\n    const re = regex, source = regex.source;\n    let i = 0;\n    function process() {\n        let result = '', tmp;\n        function appendRaw(nbChars) {\n            result += source.substr(i, nbChars);\n            i += nbChars;\n        }\n        function appendOptional(nbChars) {\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\n            i += nbChars;\n        }\n        while (i < source.length) {\n            switch (source[i]) {\n                case '\\\\':\n                    switch (source[i + 1]) {\n                        case 'c':\n                            appendOptional(3);\n                            break;\n                        case 'x':\n                            appendOptional(4);\n                            break;\n                        case 'u':\n                            if (re.unicode) {\n                                if (source[i + 2] === '{') {\n                                    appendOptional(source.indexOf('}', i) - i + 1);\n                                }\n                                else {\n                                    appendOptional(6);\n                                }\n                            }\n                            else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'p':\n                        case 'P':\n                            if (re.unicode) {\n                                appendOptional(source.indexOf('}', i) - i + 1);\n                            }\n                            else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'k':\n                            appendOptional(source.indexOf('>', i) - i + 1);\n                            break;\n                        default:\n                            appendOptional(2);\n                            break;\n                    }\n                    break;\n                case '[':\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source) || [];\n                    appendOptional(tmp[0].length);\n                    break;\n                case '|':\n                case '^':\n                case '$':\n                case '*':\n                case '+':\n                case '?':\n                    appendRaw(1);\n                    break;\n                case '{':\n                    tmp = /\\{\\d+,?\\d*\\}/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source);\n                    if (tmp) {\n                        appendRaw(tmp[0].length);\n                    }\n                    else {\n                        appendOptional(1);\n                    }\n                    break;\n                case '(':\n                    if (source[i + 1] === '?') {\n                        switch (source[i + 2]) {\n                            case ':':\n                                result += '(?:';\n                                i += 3;\n                                result += process() + '|$)';\n                                break;\n                            case '=':\n                                result += '(?=';\n                                i += 3;\n                                result += process() + ')';\n                                break;\n                            case '!':\n                                tmp = i;\n                                i += 3;\n                                process();\n                                result += source.substr(tmp, i - tmp);\n                                break;\n                            case '<':\n                                switch (source[i + 3]) {\n                                    case '=':\n                                    case '!':\n                                        tmp = i;\n                                        i += 4;\n                                        process();\n                                        result += source.substr(tmp, i - tmp);\n                                        break;\n                                    default:\n                                        appendRaw(source.indexOf('>', i) - i + 1);\n                                        result += process() + '|$)';\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    else {\n                        appendRaw(1);\n                        result += process() + '|$)';\n                    }\n                    break;\n                case ')':\n                    ++i;\n                    return result;\n                default:\n                    appendOptional(1);\n                    break;\n            }\n        }\n        return result;\n    }\n    return new RegExp(process(), regex.flags);\n}\n//# sourceMappingURL=regexp-utils.js.map","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { assertUnreachable } from '../utils/errors.js';\nimport * as ast from '../languages/generated/ast.js';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\nimport { streamCst } from './cst-utils.js';\nimport { escapeRegExp } from './regexp-utils.js';\n/**\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\n * the result is `undefined`.\n */\nexport function getEntryRule(grammar) {\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry);\n}\n/**\n * Returns all hidden terminal rules of the given grammar, if any.\n */\nexport function getHiddenRules(grammar) {\n    return grammar.rules.filter((e) => ast.isTerminalRule(e) && e.hidden);\n}\n/**\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\n *\n * @param grammar The grammar that contains all rules\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\n *      this function returns all rules of the specified grammar.\n */\nexport function getAllReachableRules(grammar, allTerminals) {\n    const ruleNames = new Set();\n    const entryRule = getEntryRule(grammar);\n    if (!entryRule) {\n        return new Set(grammar.rules);\n    }\n    const topMostRules = [entryRule].concat(getHiddenRules(grammar));\n    for (const rule of topMostRules) {\n        ruleDfs(rule, ruleNames, allTerminals);\n    }\n    const rules = new Set();\n    for (const rule of grammar.rules) {\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\n            rules.add(rule);\n        }\n    }\n    return rules;\n}\nfunction ruleDfs(rule, visitedSet, allTerminals) {\n    visitedSet.add(rule.name);\n    streamAllContents(rule).forEach(node => {\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\n            const refRule = node.rule.ref;\n            if (refRule && !visitedSet.has(refRule.name)) {\n                ruleDfs(refRule, visitedSet, allTerminals);\n            }\n        }\n    });\n}\n/**\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\n *\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\n * and cannot be inferred.\n */\nexport function getCrossReferenceTerminal(crossRef) {\n    if (crossRef.terminal) {\n        return crossRef.terminal;\n    }\n    else if (crossRef.type.ref) {\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\n        return nameAssigment === null || nameAssigment === void 0 ? void 0 : nameAssigment.terminal;\n    }\n    return undefined;\n}\n/**\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\n * that contains visible characters is considered a comment.\n */\nexport function isCommentTerminal(terminalRule) {\n    return terminalRule.hidden && !terminalRegex(terminalRule).test(' ');\n}\n/**\n * Find all CST nodes within the given node that contribute to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\n */\nexport function findNodesForProperty(node, property) {\n    if (!node || !property) {\n        return [];\n    }\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\n}\n/**\n * Find a single CST node within the given node that contributes to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForProperty(node, property, index) {\n    if (!node || !property) {\n        return undefined;\n    }\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    }\n    else {\n        index = 0;\n    }\n    return nodes[index];\n}\nfunction findNodesForPropertyInternal(node, property, element, first) {\n    if (!first) {\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\n        if (nodeFeature && nodeFeature.feature === property) {\n            return [node];\n        }\n    }\n    if (isCompositeCstNode(node) && node.astNode === element) {\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\n    }\n    return [];\n}\n/**\n * Find all CST nodes within the given node that correspond to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\n * @param keyword A keyword as specified in the grammar.\n */\nexport function findNodesForKeyword(node, keyword) {\n    if (!node) {\n        return [];\n    }\n    return findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n}\n/**\n * Find a single CST node within the given node that corresponds to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\n * @param keyword A keyword as specified in the grammar.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForKeyword(node, keyword, index) {\n    if (!node) {\n        return undefined;\n    }\n    const nodes = findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    }\n    else {\n        index = 0;\n    }\n    return nodes[index];\n}\nexport function findNodesForKeywordInternal(node, keyword, element) {\n    if (node.astNode !== element) {\n        return [];\n    }\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\n        return [node];\n    }\n    const treeIterator = streamCst(node).iterator();\n    let result;\n    const keywordNodes = [];\n    do {\n        result = treeIterator.next();\n        if (!result.done) {\n            const childNode = result.value;\n            if (childNode.astNode === element) {\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\n                    keywordNodes.push(childNode);\n                }\n            }\n            else {\n                treeIterator.prune();\n            }\n        }\n    } while (!result.done);\n    return keywordNodes;\n}\n/**\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\n * node is returned. If no assignment is found, the result is `undefined`.\n *\n * @param cstNode A CST node for which to find a property assignment.\n */\nexport function findAssignment(cstNode) {\n    var _a;\n    const astNode = cstNode.astNode;\n    // Only search until the ast node of the parent cst node is no longer the original ast node\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\n    while (astNode === ((_a = cstNode.container) === null || _a === void 0 ? void 0 : _a.astNode)) {\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\n        if (assignment) {\n            return assignment;\n        }\n        cstNode = cstNode.container;\n    }\n    return undefined;\n}\n/**\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\n * this function returns `undefined`.\n */\nexport function findNameAssignment(type) {\n    let startNode = type;\n    if (ast.isInferredType(startNode)) {\n        // for inferred types, the location to start searching for the name-assignment is different\n        if (ast.isAction(startNode.$container)) {\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\n            startNode = startNode.$container.$container;\n        }\n        else if (ast.isParserRule(startNode.$container)) {\n            // investigate the parser rule with the explicitly inferred type\n            startNode = startNode.$container;\n        }\n        else {\n            assertUnreachable(startNode.$container);\n        }\n    }\n    return findNameAssignmentInternal(type, startNode, new Map());\n}\nfunction findNameAssignmentInternal(type, startNode, cache) {\n    var _a;\n    // the cache is only required to prevent infinite loops\n    function go(node, refType) {\n        let childAssignment = undefined;\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\n        // No parent assignment implies unassigned rule call\n        if (!parentAssignment) {\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\n        }\n        cache.set(type, childAssignment);\n        return childAssignment;\n    }\n    if (cache.has(type)) {\n        return cache.get(type);\n    }\n    cache.set(type, undefined);\n    for (const node of streamAllContents(startNode)) {\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\n            cache.set(type, node);\n            return node;\n        }\n        else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\n            return go(node, node.rule.ref);\n        }\n        else if (ast.isSimpleType(node) && ((_a = node.typeRef) === null || _a === void 0 ? void 0 : _a.ref)) {\n            return go(node, node.typeRef.ref);\n        }\n    }\n    return undefined;\n}\nexport function getActionAtElement(element) {\n    const parent = element.$container;\n    if (ast.isGroup(parent)) {\n        const elements = parent.elements;\n        const index = elements.indexOf(element);\n        for (let i = index - 1; i >= 0; i--) {\n            const item = elements[i];\n            if (ast.isAction(item)) {\n                return item;\n            }\n            else {\n                const action = streamAllContents(elements[i]).find(ast.isAction);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    if (ast.isAbstractElement(parent)) {\n        return getActionAtElement(parent);\n    }\n    else {\n        return undefined;\n    }\n}\nexport function isOptionalCardinality(cardinality, element) {\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\n}\nexport function isArrayCardinality(cardinality) {\n    return cardinality === '*' || cardinality === '+';\n}\nexport function isArrayOperator(operator) {\n    return operator === '+=';\n}\n/**\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\n * primitive return type like `number`, `boolean`, etc.\n */\nexport function isDataTypeRule(rule) {\n    return isDataTypeRuleInternal(rule, new Set());\n}\nfunction isDataTypeRuleInternal(rule, visited) {\n    if (visited.has(rule)) {\n        return true;\n    }\n    else {\n        visited.add(rule);\n    }\n    for (const node of streamAllContents(rule)) {\n        if (ast.isRuleCall(node)) {\n            if (!node.rule.ref) {\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\n                return false;\n            }\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\n                return false;\n            }\n        }\n        else if (ast.isAssignment(node)) {\n            return false;\n        }\n        else if (ast.isAction(node)) {\n            return false;\n        }\n    }\n    return Boolean(rule.definition);\n}\nexport function isDataType(type) {\n    return isDataTypeInternal(type.type, new Set());\n}\nfunction isDataTypeInternal(type, visited) {\n    if (visited.has(type)) {\n        return true;\n    }\n    else {\n        visited.add(type);\n    }\n    if (ast.isArrayType(type)) {\n        return false;\n    }\n    else if (ast.isReferenceType(type)) {\n        return false;\n    }\n    else if (ast.isUnionType(type)) {\n        return type.types.every(e => isDataTypeInternal(e, visited));\n    }\n    else if (ast.isSimpleType(type)) {\n        if (type.primitiveType !== undefined) {\n            return true;\n        }\n        else if (type.stringType !== undefined) {\n            return true;\n        }\n        else if (type.typeRef !== undefined) {\n            const ref = type.typeRef.ref;\n            if (ast.isType(ref)) {\n                return isDataTypeInternal(ref.type, visited);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nexport function getExplicitRuleType(rule) {\n    if (rule.inferredType) {\n        return rule.inferredType.name;\n    }\n    else if (rule.dataType) {\n        return rule.dataType;\n    }\n    else if (rule.returnType) {\n        const refType = rule.returnType.ref;\n        if (refType) {\n            // check if we need to check Action as return type\n            if (ast.isParserRule(refType)) {\n                return refType.name;\n            }\n            else if (ast.isInterface(refType) || ast.isType(refType)) {\n                return refType.name;\n            }\n        }\n    }\n    return undefined;\n}\nexport function getTypeName(type) {\n    var _a;\n    if (ast.isParserRule(type)) {\n        return isDataTypeRule(type) ? type.name : (_a = getExplicitRuleType(type)) !== null && _a !== void 0 ? _a : type.name;\n    }\n    else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\n        return type.name;\n    }\n    else if (ast.isAction(type)) {\n        const actionType = getActionType(type);\n        if (actionType) {\n            return actionType;\n        }\n    }\n    else if (ast.isInferredType(type)) {\n        return type.name;\n    }\n    throw new Error('Cannot get name of Unknown Type');\n}\nexport function getActionType(action) {\n    var _a;\n    if (action.inferredType) {\n        return action.inferredType.name;\n    }\n    else if ((_a = action.type) === null || _a === void 0 ? void 0 : _a.ref) {\n        return getTypeName(action.type.ref);\n    }\n    return undefined; // not inferring and not referencing a valid type\n}\nexport function getRuleType(rule) {\n    var _a, _b, _c;\n    if (ast.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';\n    }\n    else {\n        return isDataTypeRule(rule) ? rule.name : (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\nexport function terminalRegex(terminalRule) {\n    const flags = {\n        s: false,\n        i: false,\n        u: false\n    };\n    const source = abstractElementToRegex(terminalRule.definition, flags);\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\n    return new RegExp(source, flagText);\n}\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\nconst WILDCARD = /[\\s\\S]/.source;\nfunction abstractElementToRegex(element, flags) {\n    if (ast.isTerminalAlternatives(element)) {\n        return terminalAlternativesToRegex(element);\n    }\n    else if (ast.isTerminalGroup(element)) {\n        return terminalGroupToRegex(element);\n    }\n    else if (ast.isCharacterRange(element)) {\n        return characterRangeToRegex(element);\n    }\n    else if (ast.isTerminalRuleCall(element)) {\n        const rule = element.rule.ref;\n        if (!rule) {\n            throw new Error('Missing rule reference.');\n        }\n        return withCardinality(abstractElementToRegex(rule.definition), {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    }\n    else if (ast.isNegatedToken(element)) {\n        return negateTokenToRegex(element);\n    }\n    else if (ast.isUntilToken(element)) {\n        return untilTokenToRegex(element);\n    }\n    else if (ast.isRegexToken(element)) {\n        const lastSlash = element.regex.lastIndexOf('/');\n        const source = element.regex.substring(1, lastSlash);\n        const regexFlags = element.regex.substring(lastSlash + 1);\n        if (flags) {\n            flags.i = regexFlags.includes('i');\n            flags.s = regexFlags.includes('s');\n            flags.u = regexFlags.includes('u');\n        }\n        return withCardinality(source, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead,\n            wrap: false\n        });\n    }\n    else if (ast.isWildcard(element)) {\n        return withCardinality(WILDCARD, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    }\n    else {\n        throw new Error(`Invalid terminal element: ${element === null || element === void 0 ? void 0 : element.$type}`);\n    }\n}\nfunction terminalAlternativesToRegex(alternatives) {\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\n        cardinality: alternatives.cardinality,\n        lookahead: alternatives.lookahead\n    });\n}\nfunction terminalGroupToRegex(group) {\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\n        cardinality: group.cardinality,\n        lookahead: group.lookahead\n    });\n}\nfunction untilTokenToRegex(until) {\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\n        cardinality: until.cardinality,\n        lookahead: until.lookahead\n    });\n}\nfunction negateTokenToRegex(negate) {\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\n        cardinality: negate.cardinality,\n        lookahead: negate.lookahead\n    });\n}\nfunction characterRangeToRegex(range) {\n    if (range.right) {\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\n            cardinality: range.cardinality,\n            lookahead: range.lookahead,\n            wrap: false\n        });\n    }\n    return withCardinality(keywordToRegex(range.left), {\n        cardinality: range.cardinality,\n        lookahead: range.lookahead,\n        wrap: false\n    });\n}\nfunction keywordToRegex(keyword) {\n    return escapeRegExp(keyword.value);\n}\nfunction withCardinality(regex, options) {\n    var _a;\n    if (options.wrap !== false || options.lookahead) {\n        regex = `(${(_a = options.lookahead) !== null && _a !== void 0 ? _a : ''}${regex})`;\n    }\n    if (options.cardinality) {\n        return `${regex}${options.cardinality}`;\n    }\n    return regex;\n}\n//# sourceMappingURL=grammar-utils.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\nimport { isMultilineComment } from '../utils/regexp-utils.js';\nimport { isTerminalRule } from './generated/ast.js';\n/**\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\n * language-specific module.\n */\nexport function createGrammarConfig(services) {\n    const rules = [];\n    const grammar = services.Grammar;\n    for (const rule of grammar.rules) {\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\n            rules.push(rule.name);\n        }\n    }\n    return {\n        multilineCommentRules: rules,\n        nameRegexp: DefaultNameRegexp\n    };\n}\n//# sourceMappingURL=grammar-config.js.map","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast) {\n    function FakeConstructor() { }\n    // If our object is used as a constructor, it would receive\n    FakeConstructor.prototype = toBecomeFast;\n    const fakeInstance = new FakeConstructor();\n    function fakeAccess() {\n        return typeof fakeInstance.bar;\n    }\n    // help V8 understand this is a \"real\" prototype by actually using\n    // the fake instance.\n    fakeAccess();\n    fakeAccess();\n    // Always true condition to suppress the Firefox warning of unreachable\n    // code after a return statement.\n    if (1)\n        return toBecomeFast;\n    // Eval prevents optimization of this method (even though this is dead code)\n    // - https://esbuild.github.io/content-types/#direct-eval\n    /* istanbul ignore next */\n    // tslint:disable-next-line\n    (0, eval)(toBecomeFast);\n}\n//# sourceMappingURL=to-fast-properties.js.map","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n        return tokType.LABEL;\n    }\n    else {\n        return tokType.name;\n    }\n}\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\nexport class AbstractProduction {\n    get definition() {\n        return this._definition;\n    }\n    set definition(value) {\n        this._definition = value;\n    }\n    constructor(_definition) {\n        this._definition = _definition;\n    }\n    accept(visitor) {\n        visitor.visit(this);\n        forEach(this.definition, (prod) => {\n            prod.accept(visitor);\n        });\n    }\n}\nexport class NonTerminal extends AbstractProduction {\n    constructor(options) {\n        super([]);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n    set definition(definition) {\n        // immutable\n    }\n    get definition() {\n        if (this.referencedRule !== undefined) {\n            return this.referencedRule.definition;\n        }\n        return [];\n    }\n    accept(visitor) {\n        visitor.visit(this);\n        // don't visit children of a reference, we will get cyclic infinite loops if we do so\n    }\n}\nexport class Rule extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.orgText = \"\";\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Alternative extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.ignoreAmbiguities = false;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Option extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class RepetitionMandatory extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class RepetitionMandatoryWithSeparator extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Repetition extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class RepetitionWithSeparator extends AbstractProduction {\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Alternation extends AbstractProduction {\n    get definition() {\n        return this._definition;\n    }\n    set definition(value) {\n        this._definition = value;\n    }\n    constructor(options) {\n        super(options.definition);\n        this.idx = 1;\n        this.ignoreAmbiguities = false;\n        this.hasPredicates = false;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n}\nexport class Terminal {\n    constructor(options) {\n        this.idx = 1;\n        assign(this, pickBy(options, (v) => v !== undefined));\n    }\n    accept(visitor) {\n        visitor.visit(this);\n    }\n}\nexport function serializeGrammar(topRules) {\n    return map(topRules, serializeProduction);\n}\nexport function serializeProduction(node) {\n    function convertDefinition(definition) {\n        return map(definition, serializeProduction);\n    }\n    /* istanbul ignore else */\n    if (node instanceof NonTerminal) {\n        const serializedNonTerminal = {\n            type: \"NonTerminal\",\n            name: node.nonTerminalName,\n            idx: node.idx,\n        };\n        if (isString(node.label)) {\n            serializedNonTerminal.label = node.label;\n        }\n        return serializedNonTerminal;\n    }\n    else if (node instanceof Alternative) {\n        return {\n            type: \"Alternative\",\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof Option) {\n        return {\n            type: \"Option\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof RepetitionMandatory) {\n        return {\n            type: \"RepetitionMandatory\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof RepetitionMandatoryWithSeparator) {\n        return {\n            type: \"RepetitionMandatoryWithSeparator\",\n            idx: node.idx,\n            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof RepetitionWithSeparator) {\n        return {\n            type: \"RepetitionWithSeparator\",\n            idx: node.idx,\n            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof Repetition) {\n        return {\n            type: \"Repetition\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof Alternation) {\n        return {\n            type: \"Alternation\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition),\n        };\n    }\n    else if (node instanceof Terminal) {\n        const serializedTerminal = {\n            type: \"Terminal\",\n            name: node.terminalType.name,\n            label: tokenLabel(node.terminalType),\n            idx: node.idx,\n        };\n        if (isString(node.label)) {\n            serializedTerminal.terminalLabel = node.label;\n        }\n        const pattern = node.terminalType.PATTERN;\n        if (node.terminalType.PATTERN) {\n            serializedTerminal.pattern = isRegExp(pattern)\n                ? pattern.source\n                : pattern;\n        }\n        return serializedTerminal;\n    }\n    else if (node instanceof Rule) {\n        return {\n            type: \"Rule\",\n            name: node.name,\n            orgText: node.orgText,\n            definition: convertDefinition(node.definition),\n        };\n        /* c8 ignore next 3 */\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\n//# sourceMappingURL=model.js.map","import { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"./model.js\";\nexport class GAstVisitor {\n    visit(node) {\n        const nodeAny = node;\n        switch (nodeAny.constructor) {\n            case NonTerminal:\n                return this.visitNonTerminal(nodeAny);\n            case Alternative:\n                return this.visitAlternative(nodeAny);\n            case Option:\n                return this.visitOption(nodeAny);\n            case RepetitionMandatory:\n                return this.visitRepetitionMandatory(nodeAny);\n            case RepetitionMandatoryWithSeparator:\n                return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n            case RepetitionWithSeparator:\n                return this.visitRepetitionWithSeparator(nodeAny);\n            case Repetition:\n                return this.visitRepetition(nodeAny);\n            case Alternation:\n                return this.visitAlternation(nodeAny);\n            case Terminal:\n                return this.visitTerminal(nodeAny);\n            case Rule:\n                return this.visitRule(nodeAny);\n            /* c8 ignore next 2 */\n            default:\n                throw Error(\"non exhaustive match\");\n        }\n    }\n    /* c8 ignore next */\n    visitNonTerminal(node) { }\n    /* c8 ignore next */\n    visitAlternative(node) { }\n    /* c8 ignore next */\n    visitOption(node) { }\n    /* c8 ignore next */\n    visitRepetition(node) { }\n    /* c8 ignore next */\n    visitRepetitionMandatory(node) { }\n    /* c8 ignore next 3 */\n    visitRepetitionMandatoryWithSeparator(node) { }\n    /* c8 ignore next */\n    visitRepetitionWithSeparator(node) { }\n    /* c8 ignore next */\n    visitAlternation(node) { }\n    /* c8 ignore next */\n    visitTerminal(node) { }\n    /* c8 ignore next */\n    visitRule(node) { }\n}\n//# sourceMappingURL=visitor.js.map","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport { AbstractProduction, Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"./model.js\";\nexport function isSequenceProd(prod) {\n    return (prod instanceof Alternative ||\n        prod instanceof Option ||\n        prod instanceof Repetition ||\n        prod instanceof RepetitionMandatory ||\n        prod instanceof RepetitionMandatoryWithSeparator ||\n        prod instanceof RepetitionWithSeparator ||\n        prod instanceof Terminal ||\n        prod instanceof Rule);\n}\nexport function isOptionalProd(prod, alreadyVisited = []) {\n    const isDirectlyOptional = prod instanceof Option ||\n        prod instanceof Repetition ||\n        prod instanceof RepetitionWithSeparator;\n    if (isDirectlyOptional) {\n        return true;\n    }\n    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n    // empty optional top rule\n    // may be indirectly optional ((A?B?C?) | (D?E?F?))\n    if (prod instanceof Alternation) {\n        // for OR its enough for just one of the alternatives to be optional\n        return some(prod.definition, (subProd) => {\n            return isOptionalProd(subProd, alreadyVisited);\n        });\n    }\n    else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n        // avoiding stack overflow due to infinite recursion\n        return false;\n    }\n    else if (prod instanceof AbstractProduction) {\n        if (prod instanceof NonTerminal) {\n            alreadyVisited.push(prod);\n        }\n        return every(prod.definition, (subProd) => {\n            return isOptionalProd(subProd, alreadyVisited);\n        });\n    }\n    else {\n        return false;\n    }\n}\nexport function isBranchingProd(prod) {\n    return prod instanceof Alternation;\n}\nexport function getProductionDslName(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n        return \"SUBRULE\";\n    }\n    else if (prod instanceof Option) {\n        return \"OPTION\";\n    }\n    else if (prod instanceof Alternation) {\n        return \"OR\";\n    }\n    else if (prod instanceof RepetitionMandatory) {\n        return \"AT_LEAST_ONE\";\n    }\n    else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        return \"AT_LEAST_ONE_SEP\";\n    }\n    else if (prod instanceof RepetitionWithSeparator) {\n        return \"MANY_SEP\";\n    }\n    else if (prod instanceof Repetition) {\n        return \"MANY\";\n    }\n    else if (prod instanceof Terminal) {\n        return \"CONSUME\";\n        /* c8 ignore next 3 */\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\n//# sourceMappingURL=helpers.js.map","export { Rule, Terminal, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Alternation, Alternative, serializeGrammar, serializeProduction, } from \"./model.js\";\nexport { GAstVisitor } from \"./visitor.js\";\nexport { getProductionDslName, isOptionalProd, isBranchingProd, isSequenceProd, } from \"./helpers.js\";\n//# sourceMappingURL=api.js.map","import { drop, forEach } from \"lodash-es\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal, } from \"@chevrotain/gast\";\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport class RestWalker {\n    walk(prod, prevRest = []) {\n        forEach(prod.definition, (subProd, index) => {\n            const currRest = drop(prod.definition, index + 1);\n            /* istanbul ignore else */\n            if (subProd instanceof NonTerminal) {\n                this.walkProdRef(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Terminal) {\n                this.walkTerminal(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Alternative) {\n                this.walkFlat(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Option) {\n                this.walkOption(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof RepetitionMandatory) {\n                this.walkAtLeastOne(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n                this.walkAtLeastOneSep(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof RepetitionWithSeparator) {\n                this.walkManySep(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Repetition) {\n                this.walkMany(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof Alternation) {\n                this.walkOr(subProd, currRest, prevRest);\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    }\n    walkTerminal(terminal, currRest, prevRest) { }\n    walkProdRef(refProd, currRest, prevRest) { }\n    walkFlat(flatProd, currRest, prevRest) {\n        // ABCDEF => after the D the rest is EF\n        const fullOrRest = currRest.concat(prevRest);\n        this.walk(flatProd, fullOrRest);\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        // ABC(DE)?F => after the (DE)? the rest is F\n        const fullOrRest = currRest.concat(prevRest);\n        this.walk(optionProd, fullOrRest);\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n        const fullAtLeastOneRest = [\n            new Option({ definition: atLeastOneProd.definition }),\n        ].concat(currRest, prevRest);\n        this.walk(atLeastOneProd, fullAtLeastOneRest);\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n        const fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n        const fullManyRest = [\n            new Option({ definition: manyProd.definition }),\n        ].concat(currRest, prevRest);\n        this.walk(manyProd, fullManyRest);\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n        const fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n        this.walk(manySepProd, fullManySepRest);\n    }\n    walkOr(orProd, currRest, prevRest) {\n        // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n        const fullOrRest = currRest.concat(prevRest);\n        // walk all different alternatives\n        forEach(orProd.definition, (alt) => {\n            // wrapping each alternative in a single definition wrapper\n            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n            const prodWrapper = new Alternative({ definition: [alt] });\n            this.walk(prodWrapper, fullOrRest);\n        });\n    }\n}\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    const repSepRest = [\n        new Option({\n            definition: [\n                new Terminal({ terminalType: repSepProd.separator }),\n            ].concat(repSepProd.definition),\n        }),\n    ];\n    const fullRepSepRest = repSepRest.concat(currRest, prevRest);\n    return fullRepSepRest;\n}\n//# sourceMappingURL=rest.js.map","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport { isBranchingProd, isOptionalProd, isSequenceProd, NonTerminal, Terminal, } from \"@chevrotain/gast\";\nexport function first(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n        // this could in theory cause infinite loops if\n        // (1) prod A refs prod B.\n        // (2) prod B refs prod A\n        // (3) AB can match the empty set\n        // in other words a cycle where everything is optional so the first will keep\n        // looking ahead for the next optional part and will never exit\n        // currently there is no safeguard for this unique edge case because\n        // (1) not sure a grammar in which this can happen is useful for anything (productive)\n        return first(prod.referencedRule);\n    }\n    else if (prod instanceof Terminal) {\n        return firstForTerminal(prod);\n    }\n    else if (isSequenceProd(prod)) {\n        return firstForSequence(prod);\n    }\n    else if (isBranchingProd(prod)) {\n        return firstForBranching(prod);\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function firstForSequence(prod) {\n    let firstSet = [];\n    const seq = prod.definition;\n    let nextSubProdIdx = 0;\n    let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    let currSubProd;\n    // so we enter the loop at least once (if the definition is not empty\n    let isLastInnerProdOptional = true;\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n        currSubProd = seq[nextSubProdIdx];\n        isLastInnerProdOptional = isOptionalProd(currSubProd);\n        firstSet = firstSet.concat(first(currSubProd));\n        nextSubProdIdx = nextSubProdIdx + 1;\n        hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return uniq(firstSet);\n}\nexport function firstForBranching(prod) {\n    const allAlternativesFirsts = map(prod.definition, (innerProd) => {\n        return first(innerProd);\n    });\n    return uniq(flatten(allAlternativesFirsts));\n}\nexport function firstForTerminal(terminal) {\n    return [terminal.terminalType];\n}\n//# sourceMappingURL=first.js.map","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n//# sourceMappingURL=constants.js.map","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative } from \"@chevrotain/gast\";\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n    constructor(topProd) {\n        super();\n        this.topProd = topProd;\n        this.follows = {};\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.follows;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n        // do nothing! just like in the public sector after 13:00\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n        const followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n            this.topProd.name;\n        const fullRest = currRest.concat(prevRest);\n        const restProd = new Alternative({ definition: fullRest });\n        const t_in_topProd_follows = first(restProd);\n        this.follows[followName] = t_in_topProd_follows;\n    }\n}\nexport function computeAllProdsFollows(topProductions) {\n    const reSyncFollows = {};\n    forEach(topProductions, (topProd) => {\n        const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n        assign(reSyncFollows, currRefsFollow);\n    });\n    return reSyncFollows;\n}\nexport function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + IN;\n}\nexport function buildInProdFollowPrefix(terminal) {\n    const terminalName = terminal.terminalType.name;\n    return terminalName + terminal.idx + IN;\n}\n//# sourceMappingURL=follow.js.map","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg) {\n    /* istanbul ignore else - can't override global.console in node.js */\n    if (console && console.error) {\n        console.error(`Error: ${msg}`);\n    }\n}\nexport function PRINT_WARNING(msg) {\n    /* istanbul ignore else - can't override global.console in node.js*/\n    if (console && console.warn) {\n        // TODO: modify docs accordingly\n        console.warn(`Warning: ${msg}`);\n    }\n}\n//# sourceMappingURL=print.js.map","import { RegExpParser, } from \"@chevrotain/regexp-to-ast\";\nlet regExpAstCache = {};\nconst regExpParser = new RegExpParser();\nexport function getRegExpAst(regExp) {\n    const regExpStr = regExp.toString();\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n        return regExpAstCache[regExpStr];\n    }\n    else {\n        const regExpAst = regExpParser.pattern(regExpStr);\n        regExpAstCache[regExpStr] = regExpAst;\n        return regExpAst;\n    }\n}\nexport function clearRegExpParserCache() {\n    regExpAstCache = {};\n}\n//# sourceMappingURL=reg_exp_parser.js.map","import { BaseRegExpVisitor, } from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\nconst complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nexport function getOptimizedStartCodesIndices(regExp, ensureOptimizations = false) {\n    try {\n        const ast = getRegExpAst(regExp);\n        const firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n        return firstChars;\n    }\n    catch (e) {\n        /* istanbul ignore next */\n        // Testing this relies on the regexp-to-ast library having a bug... */\n        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n        if (e.message === complementErrorMessage) {\n            if (ensureOptimizations) {\n                PRINT_WARNING(`${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n                    \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n            }\n        }\n        else {\n            let msgSuffix = \"\";\n            if (ensureOptimizations) {\n                msgSuffix =\n                    \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n                        \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n            }\n            PRINT_ERROR(`${failedOptimizationPrefixMsg}\\n` +\n                `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n                `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n                \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n                msgSuffix);\n        }\n    }\n    return [];\n}\nexport function firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n        case \"Disjunction\":\n            for (let i = 0; i < ast.value.length; i++) {\n                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n            }\n            break;\n        case \"Alternative\":\n            const terms = ast.value;\n            for (let i = 0; i < terms.length; i++) {\n                const term = terms[i];\n                // skip terms that cannot effect the first char results\n                switch (term.type) {\n                    case \"EndAnchor\":\n                    // A group back reference cannot affect potential starting char.\n                    // because if a back reference is the first production than automatically\n                    // the group being referenced has had to come BEFORE so its codes have already been added\n                    case \"GroupBackReference\":\n                    // assertions do not affect potential starting codes\n                    case \"Lookahead\":\n                    case \"NegativeLookahead\":\n                    case \"StartAnchor\":\n                    case \"WordBoundary\":\n                    case \"NonWordBoundary\":\n                        continue;\n                }\n                const atom = term;\n                switch (atom.type) {\n                    case \"Character\":\n                        addOptimizedIdxToResult(atom.value, result, ignoreCase);\n                        break;\n                    case \"Set\":\n                        if (atom.complement === true) {\n                            throw Error(complementErrorMessage);\n                        }\n                        forEach(atom.value, (code) => {\n                            if (typeof code === \"number\") {\n                                addOptimizedIdxToResult(code, result, ignoreCase);\n                            }\n                            else {\n                                // range\n                                const range = code;\n                                // cannot optimize when ignoreCase is\n                                if (ignoreCase === true) {\n                                    for (let rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                }\n                                // Optimization (2 orders of magnitude less work for very large ranges)\n                                else {\n                                    // handle unoptimized values\n                                    for (let rangeCode = range.from; rangeCode <= range.to && rangeCode < minOptimizationVal; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                                    if (range.to >= minOptimizationVal) {\n                                        const minUnOptVal = range.from >= minOptimizationVal\n                                            ? range.from\n                                            : minOptimizationVal;\n                                        const maxUnOptVal = range.to;\n                                        const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                                        const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n                                        for (let currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                                            result[currOptIdx] = currOptIdx;\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                        break;\n                    case \"Group\":\n                        firstCharOptimizedIndices(atom.value, result, ignoreCase);\n                        break;\n                    /* istanbul ignore next */\n                    default:\n                        throw Error(\"Non Exhaustive Match\");\n                }\n                // reached a mandatory production, no more **start** codes can be found on this alternative\n                const isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n                if (\n                // A group may be optional due to empty contents /(?:)/\n                // or if everything inside it is optional /((a)?)/\n                (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n                    // If this term is not a group it may only be optional if it has an optional quantifier\n                    (atom.type !== \"Group\" && isOptionalQuantifier === false)) {\n                    break;\n                }\n            }\n            break;\n        /* istanbul ignore next */\n        default:\n            throw Error(\"non exhaustive match!\");\n    }\n    // console.log(Object.keys(result).length)\n    return values(result);\n}\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n        handleIgnoreCase(code, result);\n    }\n}\nfunction handleIgnoreCase(code, result) {\n    const char = String.fromCharCode(code);\n    const upperChar = char.toUpperCase();\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n    }\n    else {\n        const lowerChar = char.toLowerCase();\n        if (lowerChar !== char) {\n            const optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0));\n            result[optimizedCharIdx] = optimizedCharIdx;\n        }\n    }\n}\nfunction findCode(setNode, targetCharCodes) {\n    return find(setNode.value, (codeOrRange) => {\n        if (typeof codeOrRange === \"number\") {\n            return includes(targetCharCodes, codeOrRange);\n        }\n        else {\n            // range\n            const range = codeOrRange;\n            return (find(targetCharCodes, (targetCode) => range.from <= targetCode && targetCode <= range.to) !== undefined);\n        }\n    });\n}\nfunction isWholeOptional(ast) {\n    const quantifier = ast.quantifier;\n    if (quantifier && quantifier.atLeast === 0) {\n        return true;\n    }\n    if (!ast.value) {\n        return false;\n    }\n    return isArray(ast.value)\n        ? every(ast.value, isWholeOptional)\n        : isWholeOptional(ast.value);\n}\nclass CharCodeFinder extends BaseRegExpVisitor {\n    constructor(targetCharCodes) {\n        super();\n        this.targetCharCodes = targetCharCodes;\n        this.found = false;\n    }\n    visitChildren(node) {\n        // No need to keep looking...\n        if (this.found === true) {\n            return;\n        }\n        // switch lookaheads as they do not actually consume any characters thus\n        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n        switch (node.type) {\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                return;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                return;\n        }\n        super.visitChildren(node);\n    }\n    visitCharacter(node) {\n        if (includes(this.targetCharCodes, node.value)) {\n            this.found = true;\n        }\n    }\n    visitSet(node) {\n        if (node.complement) {\n            if (findCode(node, this.targetCharCodes) === undefined) {\n                this.found = true;\n            }\n        }\n        else {\n            if (findCode(node, this.targetCharCodes) !== undefined) {\n                this.found = true;\n            }\n        }\n    }\n}\nexport function canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n        const ast = getRegExpAst(pattern);\n        const charCodeFinder = new CharCodeFinder(charCodes);\n        charCodeFinder.visit(ast);\n        return charCodeFinder.found;\n    }\n    else {\n        return (find(pattern, (char) => {\n            return includes(charCodes, char.charCodeAt(0));\n        }) !== undefined);\n    }\n}\n//# sourceMappingURL=reg_exp.js.map","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport { Lexer, LexerDefinitionErrorType, } from \"./lexer_public.js\";\nimport { compact, defaults, difference, filter, find, first, flatten, forEach, has, includes, indexOf, isArray, isEmpty, isFunction, isRegExp, isString, isUndefined, keys, map, reduce, reject, values, } from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport { canMatchCharCode, failedOptimizationPrefixMsg, getOptimizedStartCodesIndices, } from \"./reg_exp.js\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\nexport let SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\nexport function disableSticky() {\n    SUPPORT_STICKY = false;\n}\nexport function enableSticky() {\n    SUPPORT_STICKY = true;\n}\nexport function analyzeTokenTypes(tokenTypes, options) {\n    options = defaults(options, {\n        useSticky: SUPPORT_STICKY,\n        debug: false,\n        safeMode: false,\n        positionTracking: \"full\",\n        lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n        tracer: (msg, action) => action(),\n    });\n    const tracer = options.tracer;\n    tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n        initCharCodeToOptimizedIndexMap();\n    });\n    let onlyRelevantTypes;\n    tracer(\"Reject Lexer.NA\", () => {\n        onlyRelevantTypes = reject(tokenTypes, (currType) => {\n            return currType[PATTERN] === Lexer.NA;\n        });\n    });\n    let hasCustom = false;\n    let allTransformedPatterns;\n    tracer(\"Transform Patterns\", () => {\n        hasCustom = false;\n        allTransformedPatterns = map(onlyRelevantTypes, (currType) => {\n            const currPattern = currType[PATTERN];\n            /* istanbul ignore else */\n            if (isRegExp(currPattern)) {\n                const regExpSource = currPattern.source;\n                if (regExpSource.length === 1 &&\n                    // only these regExp meta characters which can appear in a length one regExp\n                    regExpSource !== \"^\" &&\n                    regExpSource !== \"$\" &&\n                    regExpSource !== \".\" &&\n                    !currPattern.ignoreCase) {\n                    return regExpSource;\n                }\n                else if (regExpSource.length === 2 &&\n                    regExpSource[0] === \"\\\\\" &&\n                    // not a meta character\n                    !includes([\n                        \"d\",\n                        \"D\",\n                        \"s\",\n                        \"S\",\n                        \"t\",\n                        \"r\",\n                        \"n\",\n                        \"t\",\n                        \"0\",\n                        \"c\",\n                        \"b\",\n                        \"B\",\n                        \"f\",\n                        \"v\",\n                        \"w\",\n                        \"W\",\n                    ], regExpSource[1])) {\n                    // escaped meta Characters: /\\+/ /\\[/\n                    // or redundant escaping: /\\a/\n                    // without the escaping \"\\\"\n                    return regExpSource[1];\n                }\n                else {\n                    return options.useSticky\n                        ? addStickyFlag(currPattern)\n                        : addStartOfInput(currPattern);\n                }\n            }\n            else if (isFunction(currPattern)) {\n                hasCustom = true;\n                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n                return { exec: currPattern };\n            }\n            else if (typeof currPattern === \"object\") {\n                hasCustom = true;\n                // ICustomPattern\n                return currPattern;\n            }\n            else if (typeof currPattern === \"string\") {\n                if (currPattern.length === 1) {\n                    return currPattern;\n                }\n                else {\n                    const escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n                    const wrappedRegExp = new RegExp(escapedRegExpString);\n                    return options.useSticky\n                        ? addStickyFlag(wrappedRegExp)\n                        : addStartOfInput(wrappedRegExp);\n                }\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    });\n    let patternIdxToType;\n    let patternIdxToGroup;\n    let patternIdxToLongerAltIdxArr;\n    let patternIdxToPushMode;\n    let patternIdxToPopMode;\n    tracer(\"misc mapping\", () => {\n        patternIdxToType = map(onlyRelevantTypes, (currType) => currType.tokenTypeIdx);\n        patternIdxToGroup = map(onlyRelevantTypes, (clazz) => {\n            const groupName = clazz.GROUP;\n            /* istanbul ignore next */\n            if (groupName === Lexer.SKIPPED) {\n                return undefined;\n            }\n            else if (isString(groupName)) {\n                return groupName;\n            }\n            else if (isUndefined(groupName)) {\n                return false;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n        patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz) => {\n            const longerAltType = clazz.LONGER_ALT;\n            if (longerAltType) {\n                const longerAltIdxArr = isArray(longerAltType)\n                    ? map(longerAltType, (type) => indexOf(onlyRelevantTypes, type))\n                    : [indexOf(onlyRelevantTypes, longerAltType)];\n                return longerAltIdxArr;\n            }\n        });\n        patternIdxToPushMode = map(onlyRelevantTypes, (clazz) => clazz.PUSH_MODE);\n        patternIdxToPopMode = map(onlyRelevantTypes, (clazz) => has(clazz, \"POP_MODE\"));\n    });\n    let patternIdxToCanLineTerminator;\n    tracer(\"Line Terminator Handling\", () => {\n        const lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n        patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n        if (options.positionTracking !== \"onlyOffset\") {\n            patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n                if (has(tokType, \"LINE_BREAKS\")) {\n                    return !!tokType.LINE_BREAKS;\n                }\n                else {\n                    return (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n                        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN));\n                }\n            });\n        }\n    });\n    let patternIdxToIsCustom;\n    let patternIdxToShort;\n    let emptyGroups;\n    let patternIdxToConfig;\n    tracer(\"Misc Mapping #2\", () => {\n        patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n        patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n        emptyGroups = reduce(onlyRelevantTypes, (acc, clazz) => {\n            const groupName = clazz.GROUP;\n            if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n                acc[groupName] = [];\n            }\n            return acc;\n        }, {});\n        patternIdxToConfig = map(allTransformedPatterns, (x, idx) => {\n            return {\n                pattern: allTransformedPatterns[idx],\n                longerAlt: patternIdxToLongerAltIdxArr[idx],\n                canLineTerminator: patternIdxToCanLineTerminator[idx],\n                isCustom: patternIdxToIsCustom[idx],\n                short: patternIdxToShort[idx],\n                group: patternIdxToGroup[idx],\n                push: patternIdxToPushMode[idx],\n                pop: patternIdxToPopMode[idx],\n                tokenTypeIdx: patternIdxToType[idx],\n                tokenType: onlyRelevantTypes[idx],\n            };\n        });\n    });\n    let canBeOptimized = true;\n    let charCodeToPatternIdxToConfig = [];\n    if (!options.safeMode) {\n        tracer(\"First Char Optimization\", () => {\n            charCodeToPatternIdxToConfig = reduce(onlyRelevantTypes, (result, currTokType, idx) => {\n                if (typeof currTokType.PATTERN === \"string\") {\n                    const charCode = currTokType.PATTERN.charCodeAt(0);\n                    const optimizedIdx = charCodeToOptimizedIndex(charCode);\n                    addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n                }\n                else if (isArray(currTokType.START_CHARS_HINT)) {\n                    let lastOptimizedIdx;\n                    forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n                        const charCode = typeof charOrInt === \"string\"\n                            ? charOrInt.charCodeAt(0)\n                            : charOrInt;\n                        const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n                        // Avoid adding the config multiple times\n                        /* istanbul ignore else */\n                        // - Difficult to check this scenario effects as it is only a performance\n                        //   optimization that does not change correctness\n                        if (lastOptimizedIdx !== currOptimizedIdx) {\n                            lastOptimizedIdx = currOptimizedIdx;\n                            addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n                        }\n                    });\n                }\n                else if (isRegExp(currTokType.PATTERN)) {\n                    if (currTokType.PATTERN.unicode) {\n                        canBeOptimized = false;\n                        if (options.ensureOptimizations) {\n                            PRINT_ERROR(`${failedOptimizationPrefixMsg}` +\n                                `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                                \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                                \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\");\n                        }\n                    }\n                    else {\n                        const optimizedCodes = getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations);\n                        /* istanbul ignore if */\n                        // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n                        // the first should be a different validation and the second cannot be tested.\n                        if (isEmpty(optimizedCodes)) {\n                            // we cannot understand what codes may start possible matches\n                            // The optimization correctness requires knowing start codes for ALL patterns.\n                            // Not actually sure this is an error, no debug message\n                            canBeOptimized = false;\n                        }\n                        forEach(optimizedCodes, (code) => {\n                            addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n                        });\n                    }\n                }\n                else {\n                    if (options.ensureOptimizations) {\n                        PRINT_ERROR(`${failedOptimizationPrefixMsg}` +\n                            `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\");\n                    }\n                    canBeOptimized = false;\n                }\n                return result;\n            }, []);\n        });\n    }\n    return {\n        emptyGroups: emptyGroups,\n        patternIdxToConfig: patternIdxToConfig,\n        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n        hasCustom: hasCustom,\n        canBeOptimized: canBeOptimized,\n    };\n}\nexport function validatePatterns(tokenTypes, validModesNames) {\n    let errors = [];\n    const missingResult = findMissingPatterns(tokenTypes);\n    errors = errors.concat(missingResult.errors);\n    const invalidResult = findInvalidPatterns(missingResult.valid);\n    const validTokenTypes = invalidResult.valid;\n    errors = errors.concat(invalidResult.errors);\n    errors = errors.concat(validateRegExpPattern(validTokenTypes));\n    errors = errors.concat(findInvalidGroupType(validTokenTypes));\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n    return errors;\n}\nfunction validateRegExpPattern(tokenTypes) {\n    let errors = [];\n    const withRegExpPatterns = filter(tokenTypes, (currTokType) => isRegExp(currTokType[PATTERN]));\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n    return errors;\n}\nexport function findMissingPatterns(tokenTypes) {\n    const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n        return !has(currType, PATTERN);\n    });\n    const errors = map(tokenTypesWithMissingPattern, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- missing static 'PATTERN' property\",\n            type: LexerDefinitionErrorType.MISSING_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n    return { errors, valid };\n}\nexport function findInvalidPatterns(tokenTypes) {\n    const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n        const pattern = currType[PATTERN];\n        return (!isRegExp(pattern) &&\n            !isFunction(pattern) &&\n            !has(pattern, \"exec\") &&\n            !isString(pattern));\n    });\n    const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' can only be a RegExp, a\" +\n                \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n            type: LexerDefinitionErrorType.INVALID_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n    return { errors, valid };\n}\nconst end_of_input = /[^\\\\][$]/;\nexport function findEndOfInputAnchor(tokenTypes) {\n    class EndAnchorFinder extends BaseRegExpVisitor {\n        constructor() {\n            super(...arguments);\n            this.found = false;\n        }\n        visitEndAnchor(node) {\n            this.found = true;\n        }\n    }\n    const invalidRegex = filter(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        try {\n            const regexpAst = getRegExpAst(pattern);\n            const endAnchorVisitor = new EndAnchorFinder();\n            endAnchorVisitor.visit(regexpAst);\n            return endAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return end_of_input.test(pattern.source);\n        }\n    });\n    const errors = map(invalidRegex, (currType) => {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n                \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nexport function findEmptyMatchRegExps(tokenTypes) {\n    const matchesEmptyString = filter(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        return pattern.test(\"\");\n    });\n    const errors = map(matchesEmptyString, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' must not match an empty string\",\n            type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\nexport function findStartOfInputAnchor(tokenTypes) {\n    class StartAnchorFinder extends BaseRegExpVisitor {\n        constructor() {\n            super(...arguments);\n            this.found = false;\n        }\n        visitStartAnchor(node) {\n            this.found = true;\n        }\n    }\n    const invalidRegex = filter(tokenTypes, (currType) => {\n        const pattern = currType.PATTERN;\n        try {\n            const regexpAst = getRegExpAst(pattern);\n            const startAnchorVisitor = new StartAnchorFinder();\n            startAnchorVisitor.visit(regexpAst);\n            return startAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return start_of_input.test(pattern.source);\n        }\n    });\n    const errors = map(invalidRegex, (currType) => {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n                \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nexport function findUnsupportedFlags(tokenTypes) {\n    const invalidFlags = filter(tokenTypes, (currType) => {\n        const pattern = currType[PATTERN];\n        return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n    });\n    const errors = map(invalidFlags, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n            type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(tokenTypes) {\n    const found = [];\n    let identicalPatterns = map(tokenTypes, (outerType) => {\n        return reduce(tokenTypes, (result, innerType) => {\n            if (outerType.PATTERN.source === innerType.PATTERN.source &&\n                !includes(found, innerType) &&\n                innerType.PATTERN !== Lexer.NA) {\n                // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n                // in essence we are creating Equivalence classes on equality relation.\n                found.push(innerType);\n                result.push(innerType);\n                return result;\n            }\n            return result;\n        }, []);\n    });\n    identicalPatterns = compact(identicalPatterns);\n    const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n        return currIdenticalSet.length > 1;\n    });\n    const errors = map(duplicatePatterns, (setOfIdentical) => {\n        const tokenTypeNames = map(setOfIdentical, (currType) => {\n            return currType.name;\n        });\n        const dupPatternSrc = first(setOfIdentical).PATTERN;\n        return {\n            message: `The same RegExp pattern ->${dupPatternSrc}<-` +\n                `has been used in all of the following Token Types: ${tokenTypeNames.join(\", \")} <-`,\n            type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n            tokenTypes: setOfIdentical,\n        };\n    });\n    return errors;\n}\nexport function findInvalidGroupType(tokenTypes) {\n    const invalidTypes = filter(tokenTypes, (clazz) => {\n        if (!has(clazz, \"GROUP\")) {\n            return false;\n        }\n        const group = clazz.GROUP;\n        return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n    });\n    const errors = map(invalidTypes, (currType) => {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n            type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n            tokenTypes: [currType],\n        };\n    });\n    return errors;\n}\nexport function findModesThatDoNotExist(tokenTypes, validModes) {\n    const invalidModes = filter(tokenTypes, (clazz) => {\n        return (clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE));\n    });\n    const errors = map(invalidModes, (tokType) => {\n        const msg = `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n            `which does not exist`;\n        return {\n            message: msg,\n            type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n            tokenTypes: [tokType],\n        };\n    });\n    return errors;\n}\nexport function findUnreachablePatterns(tokenTypes) {\n    const errors = [];\n    const canBeTested = reduce(tokenTypes, (result, tokType, idx) => {\n        const pattern = tokType.PATTERN;\n        if (pattern === Lexer.NA) {\n            return result;\n        }\n        // a more comprehensive validation for all forms of regExps would require\n        // deeper regExp analysis capabilities\n        if (isString(pattern)) {\n            result.push({ str: pattern, idx, tokenType: tokType });\n        }\n        else if (isRegExp(pattern) && noMetaChar(pattern)) {\n            result.push({ str: pattern.source, idx, tokenType: tokType });\n        }\n        return result;\n    }, []);\n    forEach(tokenTypes, (tokType, testIdx) => {\n        forEach(canBeTested, ({ str, idx, tokenType }) => {\n            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n                const msg = `Token: ->${tokenType.name}<- can never be matched.\\n` +\n                    `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n                    `in the lexer's definition.\\n` +\n                    `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n                errors.push({\n                    message: msg,\n                    type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n                    tokenTypes: [tokType, tokenType],\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction testTokenType(str, pattern) {\n    /* istanbul ignore else */\n    if (isRegExp(pattern)) {\n        const regExpArray = pattern.exec(str);\n        return regExpArray !== null && regExpArray.index === 0;\n    }\n    else if (isFunction(pattern)) {\n        // maintain the API of custom patterns\n        return pattern(str, 0, [], {});\n    }\n    else if (has(pattern, \"exec\")) {\n        // maintain the API of custom patterns\n        return pattern.exec(str, 0, [], {});\n    }\n    else if (typeof pattern === \"string\") {\n        return pattern === str;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction noMetaChar(regExp) {\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n    const metaChars = [\n        \".\",\n        \"\\\\\",\n        \"[\",\n        \"]\",\n        \"|\",\n        \"^\",\n        \"$\",\n        \"(\",\n        \")\",\n        \"?\",\n        \"*\",\n        \"+\",\n        \"{\",\n    ];\n    return (find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined);\n}\nexport function addStartOfInput(pattern) {\n    const flags = pattern.ignoreCase ? \"i\" : \"\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`^(?:${pattern.source})`, flags);\n}\nexport function addStickyFlag(pattern) {\n    const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`${pattern.source}`, flags);\n}\nexport function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const errors = [];\n    // some run time checks to help the end users.\n    if (!has(lexerDefinition, DEFAULT_MODE)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                DEFAULT_MODE +\n                \"> property in its definition\\n\",\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n        });\n    }\n    if (!has(lexerDefinition, MODES)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                MODES +\n                \"> property in its definition\\n\",\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n        });\n    }\n    if (has(lexerDefinition, MODES) &&\n        has(lexerDefinition, DEFAULT_MODE) &&\n        !has(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n        errors.push({\n            message: `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n                `which does not exist\\n`,\n            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n        });\n    }\n    if (has(lexerDefinition, MODES)) {\n        forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n            forEach(currModeValue, (currTokType, currIdx) => {\n                if (isUndefined(currTokType)) {\n                    errors.push({\n                        message: `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n                            `<${currModeName}> at index: <${currIdx}>\\n`,\n                        type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n                    });\n                }\n                else if (has(currTokType, \"LONGER_ALT\")) {\n                    const longerAlt = isArray(currTokType.LONGER_ALT)\n                        ? currTokType.LONGER_ALT\n                        : [currTokType.LONGER_ALT];\n                    forEach(longerAlt, (currLongerAlt) => {\n                        if (!isUndefined(currLongerAlt) &&\n                            !includes(currModeValue, currLongerAlt)) {\n                            errors.push({\n                                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n    return errors;\n}\nexport function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const warnings = [];\n    let hasAnyLineBreak = false;\n    const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n    const concreteTokenTypes = reject(allTokenTypes, (currType) => currType[PATTERN] === Lexer.NA);\n    const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n    if (trackLines) {\n        forEach(concreteTokenTypes, (tokType) => {\n            const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n            if (currIssue !== false) {\n                const message = buildLineBreakIssueMessage(tokType, currIssue);\n                const warningDescriptor = {\n                    message,\n                    type: currIssue.issue,\n                    tokenType: tokType,\n                };\n                warnings.push(warningDescriptor);\n            }\n            else {\n                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n                if (has(tokType, \"LINE_BREAKS\")) {\n                    if (tokType.LINE_BREAKS === true) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n                else {\n                    if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n            }\n        });\n    }\n    if (trackLines && !hasAnyLineBreak) {\n        warnings.push({\n            message: \"Warning: No LINE_BREAKS Found.\\n\" +\n                \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n                \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n                \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n                \"\\tfor details.\",\n            type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n        });\n    }\n    return warnings;\n}\nexport function cloneEmptyGroups(emptyGroups) {\n    const clonedResult = {};\n    const groupKeys = keys(emptyGroups);\n    forEach(groupKeys, (currKey) => {\n        const currGroupValue = emptyGroups[currKey];\n        /* istanbul ignore else */\n        if (isArray(currGroupValue)) {\n            clonedResult[currKey] = [];\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    });\n    return clonedResult;\n}\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType) {\n    const pattern = tokenType.PATTERN;\n    /* istanbul ignore else */\n    if (isRegExp(pattern)) {\n        return false;\n    }\n    else if (isFunction(pattern)) {\n        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n        return true;\n    }\n    else if (has(pattern, \"exec\")) {\n        // ICustomPattern\n        return true;\n    }\n    else if (isString(pattern)) {\n        return false;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function isShortPattern(pattern) {\n    if (isString(pattern) && pattern.length === 1) {\n        return pattern.charCodeAt(0);\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n        const len = text.length;\n        for (let i = this.lastIndex; i < len; i++) {\n            const c = text.charCodeAt(i);\n            if (c === 10) {\n                this.lastIndex = i + 1;\n                return true;\n            }\n            else if (c === 13) {\n                if (text.charCodeAt(i + 1) === 10) {\n                    this.lastIndex = i + 2;\n                }\n                else {\n                    this.lastIndex = i + 1;\n                }\n                return true;\n            }\n        }\n        return false;\n    },\n    lastIndex: 0,\n};\nfunction checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if (has(tokType, \"LINE_BREAKS\")) {\n        // if the user explicitly declared the line_breaks option we will respect their choice\n        // and assume it is correct.\n        return false;\n    }\n    else {\n        /* istanbul ignore else */\n        if (isRegExp(tokType.PATTERN)) {\n            try {\n                // TODO: why is the casting suddenly needed?\n                canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n            }\n            catch (e) {\n                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n                return {\n                    issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n                    errMsg: e.message,\n                };\n            }\n            return false;\n        }\n        else if (isString(tokType.PATTERN)) {\n            // string literal patterns can always be analyzed to detect line terminator usage\n            return false;\n        }\n        else if (isCustomPattern(tokType)) {\n            // custom token types\n            return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n}\nexport function buildLineBreakIssueMessage(tokType, details) {\n    /* istanbul ignore else */\n    if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n        return (\"Warning: unable to identify line terminator usage in pattern.\\n\" +\n            `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n            `\\t Root cause: ${details.errMsg}.\\n` +\n            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\");\n    }\n    else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n        return (\"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n            `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\");\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction getCharCodes(charsOrCodes) {\n    const charCodes = map(charsOrCodes, (numOrString) => {\n        if (isString(numOrString)) {\n            return numOrString.charCodeAt(0);\n        }\n        else {\n            return numOrString;\n        }\n    });\n    return charCodes;\n}\nfunction addToMapOfArrays(map, key, value) {\n    if (map[key] === undefined) {\n        map[key] = [value];\n    }\n    else {\n        map[key].push(value);\n    }\n}\nexport const minOptimizationVal = 256;\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap = [];\nexport function charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal\n        ? charCode\n        : charCodeToOptimizedIdxMap[charCode];\n}\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n    if (isEmpty(charCodeToOptimizedIdxMap)) {\n        charCodeToOptimizedIdxMap = new Array(65536);\n        for (let i = 0; i < 65536; i++) {\n            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n        }\n    }\n}\n//# sourceMappingURL=lexer.js.map","export function timer(func) {\n    const start = new Date().getTime();\n    const val = func();\n    const end = new Date().getTime();\n    const total = end - start;\n    return { time: total, value: val };\n}\n//# sourceMappingURL=timer.js.map","import { clone, compact, difference, flatten, forEach, has, includes, isArray, isEmpty, map, } from \"lodash-es\";\nexport function tokenStructuredMatcher(tokInstance, tokConstructor) {\n    const instanceType = tokInstance.tokenTypeIdx;\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n        return true;\n    }\n    else {\n        return (tokConstructor.isParent === true &&\n            tokConstructor.categoryMatchesMap[instanceType] === true);\n    }\n}\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass = {};\nexport function augmentTokenTypes(tokenTypes) {\n    // collect the parent Token Types as well.\n    const tokenTypesAndParents = expandCategories(tokenTypes);\n    // add required tokenType and categoryMatches properties\n    assignTokenDefaultProps(tokenTypesAndParents);\n    // fill up the categoryMatches\n    assignCategoriesMapProp(tokenTypesAndParents);\n    assignCategoriesTokensProp(tokenTypesAndParents);\n    forEach(tokenTypesAndParents, (tokType) => {\n        tokType.isParent = tokType.categoryMatches.length > 0;\n    });\n}\nexport function expandCategories(tokenTypes) {\n    let result = clone(tokenTypes);\n    let categories = tokenTypes;\n    let searching = true;\n    while (searching) {\n        categories = compact(flatten(map(categories, (currTokType) => currTokType.CATEGORIES)));\n        const newCategories = difference(categories, result);\n        result = result.concat(newCategories);\n        if (isEmpty(newCategories)) {\n            searching = false;\n        }\n        else {\n            categories = newCategories;\n        }\n    }\n    return result;\n}\nexport function assignTokenDefaultProps(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n        if (!hasShortKeyProperty(currTokType)) {\n            tokenIdxToClass[tokenShortNameIdx] = currTokType;\n            currTokType.tokenTypeIdx = tokenShortNameIdx++;\n        }\n        // CATEGORIES? : TokenType | TokenType[]\n        if (hasCategoriesProperty(currTokType) &&\n            !isArray(currTokType.CATEGORIES)\n        // &&\n        // !isUndefined(currTokType.CATEGORIES.PATTERN)\n        ) {\n            currTokType.CATEGORIES = [currTokType.CATEGORIES];\n        }\n        if (!hasCategoriesProperty(currTokType)) {\n            currTokType.CATEGORIES = [];\n        }\n        if (!hasExtendingTokensTypesProperty(currTokType)) {\n            currTokType.categoryMatches = [];\n        }\n        if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n            currTokType.categoryMatchesMap = {};\n        }\n    });\n}\nexport function assignCategoriesTokensProp(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n        // avoid duplications\n        currTokType.categoryMatches = [];\n        forEach(currTokType.categoryMatchesMap, (val, key) => {\n            currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);\n        });\n    });\n}\nexport function assignCategoriesMapProp(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n        singleAssignCategoriesToksMap([], currTokType);\n    });\n}\nexport function singleAssignCategoriesToksMap(path, nextNode) {\n    forEach(path, (pathNode) => {\n        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n    });\n    forEach(nextNode.CATEGORIES, (nextCategory) => {\n        const newPath = path.concat(nextNode);\n        // avoids infinite loops due to cyclic categories.\n        if (!includes(newPath, nextCategory)) {\n            singleAssignCategoriesToksMap(newPath, nextCategory);\n        }\n    });\n}\nexport function hasShortKeyProperty(tokType) {\n    return has(tokType, \"tokenTypeIdx\");\n}\nexport function hasCategoriesProperty(tokType) {\n    return has(tokType, \"CATEGORIES\");\n}\nexport function hasExtendingTokensTypesProperty(tokType) {\n    return has(tokType, \"categoryMatches\");\n}\nexport function hasExtendingTokensTypesMapProperty(tokType) {\n    return has(tokType, \"categoryMatchesMap\");\n}\nexport function isTokenType(tokType) {\n    return has(tokType, \"tokenTypeIdx\");\n}\n//# sourceMappingURL=tokens.js.map","export const defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage(token) {\n        return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n    },\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n        return (`unexpected character: ->${fullText.charAt(startOffset)}<- at offset: ${startOffset},` + ` skipped ${length} characters.`);\n    },\n};\n//# sourceMappingURL=lexer_errors_public.js.map","import { analyzeTokenTypes, charCodeToOptimizedIndex, cloneEmptyGroups, DEFAULT_MODE, LineTerminatorOptimizedTester, performRuntimeChecks, performWarningRuntimeChecks, SUPPORT_STICKY, validatePatterns, } from \"./lexer.js\";\nimport { assign, clone, forEach, identity, isArray, isEmpty, isUndefined, keys, last, map, noop, reduce, reject, } from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\nexport var LexerDefinitionErrorType;\n(function (LexerDefinitionErrorType) {\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\"] = 17] = \"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\nconst DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: \"full\",\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false,\n    recoveryEnabled: true,\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\nexport class Lexer {\n    constructor(lexerDefinition, config = DEFAULT_LEXER_CONFIG) {\n        this.lexerDefinition = lexerDefinition;\n        this.lexerDefinitionErrors = [];\n        this.lexerDefinitionWarning = [];\n        this.patternIdxToConfig = {};\n        this.charCodeToPatternIdxToConfig = {};\n        this.modes = [];\n        this.emptyGroups = {};\n        this.trackStartLines = true;\n        this.trackEndLines = true;\n        this.hasCustom = false;\n        this.canModeBeOptimized = {};\n        // Duplicated from the parser's perf trace trait to allow future extraction\n        // of the lexer to a separate package.\n        this.TRACE_INIT = (phaseDesc, phaseImpl) => {\n            // No need to optimize this using NOOP pattern because\n            // It is not called in a hot spot...\n            if (this.traceInitPerf === true) {\n                this.traceInitIndent++;\n                const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n                if (this.traceInitIndent < this.traceInitMaxIdent) {\n                    console.log(`${indent}--> <${phaseDesc}>`);\n                }\n                const { time, value } = timer(phaseImpl);\n                /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n                const traceMethod = time > 10 ? console.warn : console.log;\n                if (this.traceInitIndent < this.traceInitMaxIdent) {\n                    traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n                }\n                this.traceInitIndent--;\n                return value;\n            }\n            else {\n                return phaseImpl();\n            }\n        };\n        if (typeof config === \"boolean\") {\n            throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n                \"a boolean 2nd argument is no longer supported\");\n        }\n        // todo: defaults func?\n        this.config = assign({}, DEFAULT_LEXER_CONFIG, config);\n        const traceInitVal = this.config.traceInitPerf;\n        if (traceInitVal === true) {\n            this.traceInitMaxIdent = Infinity;\n            this.traceInitPerf = true;\n        }\n        else if (typeof traceInitVal === \"number\") {\n            this.traceInitMaxIdent = traceInitVal;\n            this.traceInitPerf = true;\n        }\n        this.traceInitIndent = -1;\n        this.TRACE_INIT(\"Lexer Constructor\", () => {\n            let actualDefinition;\n            let hasOnlySingleMode = true;\n            this.TRACE_INIT(\"Lexer Config handling\", () => {\n                if (this.config.lineTerminatorsPattern ===\n                    DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n                    // optimized built-in implementation for the defaults definition of lineTerminators\n                    this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n                }\n                else {\n                    if (this.config.lineTerminatorCharacters ===\n                        DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n                        throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                            \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n                    }\n                }\n                if (config.safeMode && config.ensureOptimizations) {\n                    throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n                }\n                this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);\n                this.trackEndLines = /full/i.test(this.config.positionTracking);\n                // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n                if (isArray(lexerDefinition)) {\n                    actualDefinition = {\n                        modes: { defaultMode: clone(lexerDefinition) },\n                        defaultMode: DEFAULT_MODE,\n                    };\n                }\n                else {\n                    // no conversion needed, input should already be a IMultiModeLexerDefinition\n                    hasOnlySingleMode = false;\n                    actualDefinition = clone(lexerDefinition);\n                }\n            });\n            if (this.config.skipValidations === false) {\n                this.TRACE_INIT(\"performRuntimeChecks\", () => {\n                    this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(performRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n                });\n                this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n                    this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(performWarningRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n                });\n            }\n            // for extra robustness to avoid throwing an none informative error message\n            actualDefinition.modes = actualDefinition.modes\n                ? actualDefinition.modes\n                : {};\n            // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n            // this transformation is to increase robustness in the case of partially invalid lexer definition.\n            forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n                actualDefinition.modes[currModeName] = reject(currModeValue, (currTokType) => isUndefined(currTokType));\n            });\n            const allModeNames = keys(actualDefinition.modes);\n            forEach(actualDefinition.modes, (currModDef, currModName) => {\n                this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n                    this.modes.push(currModName);\n                    if (this.config.skipValidations === false) {\n                        this.TRACE_INIT(`validatePatterns`, () => {\n                            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(validatePatterns(currModDef, allModeNames));\n                        });\n                    }\n                    // If definition errors were encountered, the analysis phase may fail unexpectedly/\n                    // Considering a lexer with definition errors may never be used, there is no point\n                    // to performing the analysis anyhow...\n                    if (isEmpty(this.lexerDefinitionErrors)) {\n                        augmentTokenTypes(currModDef);\n                        let currAnalyzeResult;\n                        this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                            currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                                lineTerminatorCharacters: this.config.lineTerminatorCharacters,\n                                positionTracking: config.positionTracking,\n                                ensureOptimizations: config.ensureOptimizations,\n                                safeMode: config.safeMode,\n                                tracer: this.TRACE_INIT,\n                            });\n                        });\n                        this.patternIdxToConfig[currModName] =\n                            currAnalyzeResult.patternIdxToConfig;\n                        this.charCodeToPatternIdxToConfig[currModName] =\n                            currAnalyzeResult.charCodeToPatternIdxToConfig;\n                        this.emptyGroups = assign({}, this.emptyGroups, currAnalyzeResult.emptyGroups);\n                        this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n                        this.canModeBeOptimized[currModName] =\n                            currAnalyzeResult.canBeOptimized;\n                    }\n                });\n            });\n            this.defaultMode = actualDefinition.defaultMode;\n            if (!isEmpty(this.lexerDefinitionErrors) &&\n                !this.config.deferDefinitionErrorsHandling) {\n                const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n                    return error.message;\n                });\n                const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n                throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n            }\n            // Only print warning if there are no errors, This will avoid pl\n            forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n                PRINT_WARNING(warningDescriptor.message);\n            });\n            this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n                // Choose the relevant internal implementations for this specific parser.\n                // These implementations should be in-lined by the JavaScript engine\n                // to provide optimal performance in each scenario.\n                if (SUPPORT_STICKY) {\n                    this.chopInput = identity;\n                    this.match = this.matchWithTest;\n                }\n                else {\n                    this.updateLastIndex = noop;\n                    this.match = this.matchWithExec;\n                }\n                if (hasOnlySingleMode) {\n                    this.handleModes = noop;\n                }\n                if (this.trackStartLines === false) {\n                    this.computeNewColumn = identity;\n                }\n                if (this.trackEndLines === false) {\n                    this.updateTokenEndLineColumnLocation = noop;\n                }\n                if (/full/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createFullToken;\n                }\n                else if (/onlyStart/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createStartOnlyToken;\n                }\n                else if (/onlyOffset/i.test(this.config.positionTracking)) {\n                    this.createTokenInstance = this.createOffsetOnlyToken;\n                }\n                else {\n                    throw Error(`Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`);\n                }\n                if (this.hasCustom) {\n                    this.addToken = this.addTokenUsingPush;\n                    this.handlePayload = this.handlePayloadWithCustom;\n                }\n                else {\n                    this.addToken = this.addTokenUsingMemberAccess;\n                    this.handlePayload = this.handlePayloadNoCustom;\n                }\n            });\n            this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n                const unOptimizedModes = reduce(this.canModeBeOptimized, (cannotBeOptimized, canBeOptimized, modeName) => {\n                    if (canBeOptimized === false) {\n                        cannotBeOptimized.push(modeName);\n                    }\n                    return cannotBeOptimized;\n                }, []);\n                if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n                    throw Error(`Lexer Modes: < ${unOptimizedModes.join(\", \")} > cannot be optimized.\\n` +\n                        '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n                        \"\\t Or inspect the console log for details on how to resolve these issues.\");\n                }\n            });\n            this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n                clearRegExpParserCache();\n            });\n            this.TRACE_INIT(\"toFastProperties\", () => {\n                toFastProperties(this);\n            });\n        });\n    }\n    tokenize(text, initialMode = this.defaultMode) {\n        if (!isEmpty(this.lexerDefinitionErrors)) {\n            const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n                return error.message;\n            });\n            const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n            throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n                allErrMessagesString);\n        }\n        return this.tokenizeInternal(text, initialMode);\n    }\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    // this method also used quite a bit of `!` none null assertions because it is too optimized\n    // for `tsc` to always understand it is \"safe\"\n    tokenizeInternal(text, initialMode) {\n        let i, j, k, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n        const orgText = text;\n        const orgLength = orgText.length;\n        let offset = 0;\n        let matchedTokensIndex = 0;\n        // initializing the tokensArray to the \"guessed\" size.\n        // guessing too little will still reduce the number of array re-sizes on pushes.\n        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n        // but would still have a faster runtime by avoiding (All but one) array resizing.\n        const guessedNumberOfTokens = this.hasCustom\n            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n            : Math.floor(text.length / 10);\n        const matchedTokens = new Array(guessedNumberOfTokens);\n        const errors = [];\n        let line = this.trackStartLines ? 1 : undefined;\n        let column = this.trackStartLines ? 1 : undefined;\n        const groups = cloneEmptyGroups(this.emptyGroups);\n        const trackLines = this.trackStartLines;\n        const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n        let currModePatternsLength = 0;\n        let patternIdxToConfig = [];\n        let currCharCodeToPatternIdxToConfig = [];\n        const modeStack = [];\n        const emptyArray = [];\n        Object.freeze(emptyArray);\n        let getPossiblePatterns;\n        function getPossiblePatternsSlow() {\n            return patternIdxToConfig;\n        }\n        function getPossiblePatternsOptimized(charCode) {\n            const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n            const possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n            if (possiblePatterns === undefined) {\n                return emptyArray;\n            }\n            else {\n                return possiblePatterns;\n            }\n        }\n        const pop_mode = (popToken) => {\n            // TODO: perhaps avoid this error in the edge case there is no more input?\n            if (modeStack.length === 1 &&\n                // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n                // So no error should occur.\n                popToken.tokenType.PUSH_MODE === undefined) {\n                // if we try to pop the last mode there lexer will no longer have ANY mode.\n                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n                const msg = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n                errors.push({\n                    offset: popToken.startOffset,\n                    line: popToken.startLine,\n                    column: popToken.startColumn,\n                    length: popToken.image.length,\n                    message: msg,\n                });\n            }\n            else {\n                modeStack.pop();\n                const newMode = last(modeStack);\n                patternIdxToConfig = this.patternIdxToConfig[newMode];\n                currCharCodeToPatternIdxToConfig =\n                    this.charCodeToPatternIdxToConfig[newMode];\n                currModePatternsLength = patternIdxToConfig.length;\n                const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                    getPossiblePatterns = getPossiblePatternsOptimized;\n                }\n                else {\n                    getPossiblePatterns = getPossiblePatternsSlow;\n                }\n            }\n        };\n        function push_mode(newMode) {\n            modeStack.push(newMode);\n            currCharCodeToPatternIdxToConfig =\n                this.charCodeToPatternIdxToConfig[newMode];\n            patternIdxToConfig = this.patternIdxToConfig[newMode];\n            currModePatternsLength = patternIdxToConfig.length;\n            currModePatternsLength = patternIdxToConfig.length;\n            const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                getPossiblePatterns = getPossiblePatternsOptimized;\n            }\n            else {\n                getPossiblePatterns = getPossiblePatternsSlow;\n            }\n        }\n        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n        // seem to matter performance wise.\n        push_mode.call(this, initialMode);\n        let currConfig;\n        const recoveryEnabled = this.config.recoveryEnabled;\n        while (offset < orgLength) {\n            matchedImage = null;\n            const nextCharCode = orgText.charCodeAt(offset);\n            const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n            const chosenPatternsLength = chosenPatternIdxToConfig.length;\n            for (i = 0; i < chosenPatternsLength; i++) {\n                currConfig = chosenPatternIdxToConfig[i];\n                const currPattern = currConfig.pattern;\n                payload = null;\n                // manually in-lined because > 600 chars won't be in-lined in V8\n                const singleCharCode = currConfig.short;\n                if (singleCharCode !== false) {\n                    if (nextCharCode === singleCharCode) {\n                        // single character string\n                        matchedImage = currPattern;\n                    }\n                }\n                else if (currConfig.isCustom === true) {\n                    match = currPattern.exec(orgText, offset, matchedTokens, groups);\n                    if (match !== null) {\n                        matchedImage = match[0];\n                        if (match.payload !== undefined) {\n                            payload = match.payload;\n                        }\n                    }\n                    else {\n                        matchedImage = null;\n                    }\n                }\n                else {\n                    this.updateLastIndex(currPattern, offset);\n                    matchedImage = this.match(currPattern, text, offset);\n                }\n                if (matchedImage !== null) {\n                    // even though this pattern matched we must try a another longer alternative.\n                    // this can be used to prioritize keywords over identifiers\n                    longerAlt = currConfig.longerAlt;\n                    if (longerAlt !== undefined) {\n                        // TODO: micro optimize, avoid extra prop access\n                        // by saving/linking longerAlt on the original config?\n                        const longerAltLength = longerAlt.length;\n                        for (k = 0; k < longerAltLength; k++) {\n                            const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n                            const longerAltPattern = longerAltConfig.pattern;\n                            altPayload = null;\n                            // single Char can never be a longer alt so no need to test it.\n                            // manually in-lined because > 600 chars won't be in-lined in V8\n                            if (longerAltConfig.isCustom === true) {\n                                match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n                                if (match !== null) {\n                                    matchAltImage = match[0];\n                                    if (match.payload !== undefined) {\n                                        altPayload = match.payload;\n                                    }\n                                }\n                                else {\n                                    matchAltImage = null;\n                                }\n                            }\n                            else {\n                                this.updateLastIndex(longerAltPattern, offset);\n                                matchAltImage = this.match(longerAltPattern, text, offset);\n                            }\n                            if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                                matchedImage = matchAltImage;\n                                payload = altPayload;\n                                currConfig = longerAltConfig;\n                                // Exit the loop early after matching one of the longer alternatives\n                                // The first matched alternative takes precedence\n                                break;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            // successful match\n            if (matchedImage !== null) {\n                imageLength = matchedImage.length;\n                group = currConfig.group;\n                if (group !== undefined) {\n                    tokType = currConfig.tokenTypeIdx;\n                    // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n                    // createFullToken method\n                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n                    this.handlePayload(newToken, payload);\n                    // TODO: optimize NOOP in case there are no special groups?\n                    if (group === false) {\n                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n                    }\n                    else {\n                        groups[group].push(newToken);\n                    }\n                }\n                text = this.chopInput(text, imageLength);\n                offset = offset + imageLength;\n                // TODO: with newlines the column may be assigned twice\n                column = this.computeNewColumn(column, imageLength);\n                if (trackLines === true && currConfig.canLineTerminator === true) {\n                    let numOfLTsInMatch = 0;\n                    let foundTerminator;\n                    let lastLTEndOffset;\n                    lineTerminatorPattern.lastIndex = 0;\n                    do {\n                        foundTerminator = lineTerminatorPattern.test(matchedImage);\n                        if (foundTerminator === true) {\n                            lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n                            numOfLTsInMatch++;\n                        }\n                    } while (foundTerminator === true);\n                    if (numOfLTsInMatch !== 0) {\n                        line = line + numOfLTsInMatch;\n                        column = imageLength - lastLTEndOffset;\n                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n                    }\n                }\n                // will be NOOP if no modes present\n                this.handleModes(currConfig, pop_mode, push_mode, newToken);\n            }\n            else {\n                // error recovery, drop characters until we identify a valid token's start point\n                const errorStartOffset = offset;\n                const errorLine = line;\n                const errorColumn = column;\n                let foundResyncPoint = recoveryEnabled === false;\n                while (foundResyncPoint === false && offset < orgLength) {\n                    // Identity Func (when sticky flag is enabled)\n                    text = this.chopInput(text, 1);\n                    offset++;\n                    for (j = 0; j < currModePatternsLength; j++) {\n                        const currConfig = patternIdxToConfig[j];\n                        const currPattern = currConfig.pattern;\n                        // manually in-lined because > 600 chars won't be in-lined in V8\n                        const singleCharCode = currConfig.short;\n                        if (singleCharCode !== false) {\n                            if (orgText.charCodeAt(offset) === singleCharCode) {\n                                // single character string\n                                foundResyncPoint = true;\n                            }\n                        }\n                        else if (currConfig.isCustom === true) {\n                            foundResyncPoint =\n                                currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n                        }\n                        else {\n                            this.updateLastIndex(currPattern, offset);\n                            foundResyncPoint = currPattern.exec(text) !== null;\n                        }\n                        if (foundResyncPoint === true) {\n                            break;\n                        }\n                    }\n                }\n                errLength = offset - errorStartOffset;\n                column = this.computeNewColumn(column, errLength);\n                // at this point we either re-synced or reached the end of the input text\n                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n                errors.push({\n                    offset: errorStartOffset,\n                    line: errorLine,\n                    column: errorColumn,\n                    length: errLength,\n                    message: msg,\n                });\n                if (recoveryEnabled === false) {\n                    break;\n                }\n            }\n        }\n        // if we do have custom patterns which push directly into the\n        // TODO: custom tokens should not push directly??\n        if (!this.hasCustom) {\n            // if we guessed a too large size for the tokens array this will shrink it to the right size.\n            matchedTokens.length = matchedTokensIndex;\n        }\n        return {\n            tokens: matchedTokens,\n            groups: groups,\n            errors: errors,\n        };\n    }\n    handleModes(config, pop_mode, push_mode, newToken) {\n        if (config.pop === true) {\n            // need to save the PUSH_MODE property as if the mode is popped\n            // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n            const pushMode = config.push;\n            pop_mode(newToken);\n            if (pushMode !== undefined) {\n                push_mode.call(this, pushMode);\n            }\n        }\n        else if (config.push !== undefined) {\n            push_mode.call(this, config.push);\n        }\n    }\n    chopInput(text, length) {\n        return text.substring(length);\n    }\n    updateLastIndex(regExp, newLastIndex) {\n        regExp.lastIndex = newLastIndex;\n    }\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    updateTokenEndLineColumnLocation(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n        let lastCharIsLT, fixForEndingInLT;\n        if (group !== undefined) {\n            // a none skipped multi line Token, need to update endLine/endColumn\n            lastCharIsLT = lastLTIdx === imageLength - 1;\n            fixForEndingInLT = lastCharIsLT ? -1 : 0;\n            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n                // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n                newToken.endLine = line + fixForEndingInLT;\n                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n                // inclusive to exclusive range.\n                newToken.endColumn = column - 1 + -fixForEndingInLT;\n            }\n            // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n        }\n    }\n    computeNewColumn(oldColumn, imageLength) {\n        return oldColumn + imageLength;\n    }\n    createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n        return {\n            image,\n            startOffset,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    createStartOnlyToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n        return {\n            image,\n            startOffset,\n            startLine,\n            startColumn,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    createFullToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n        return {\n            image,\n            startOffset,\n            endOffset: startOffset + imageLength - 1,\n            startLine,\n            endLine: startLine,\n            startColumn,\n            endColumn: startColumn + imageLength - 1,\n            tokenTypeIdx,\n            tokenType,\n        };\n    }\n    addTokenUsingPush(tokenVector, index, tokenToAdd) {\n        tokenVector.push(tokenToAdd);\n        return index;\n    }\n    addTokenUsingMemberAccess(tokenVector, index, tokenToAdd) {\n        tokenVector[index] = tokenToAdd;\n        index++;\n        return index;\n    }\n    handlePayloadNoCustom(token, payload) { }\n    handlePayloadWithCustom(token, payload) {\n        if (payload !== null) {\n            token.payload = payload;\n        }\n    }\n    matchWithTest(pattern, text, offset) {\n        const found = pattern.test(text);\n        if (found === true) {\n            return text.substring(offset, pattern.lastIndex);\n        }\n        return null;\n    }\n    matchWithExec(pattern, text) {\n        const regExpArray = pattern.exec(text);\n        return regExpArray !== null ? regExpArray[0] : null;\n    }\n}\nLexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\nLexer.NA = /NOT_APPLICABLE/;\n//# sourceMappingURL=lexer_public.js.map","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nexport function tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n        return tokType.LABEL;\n    }\n    else {\n        return tokType.name;\n    }\n}\nexport function tokenName(tokType) {\n    return tokType.name;\n}\nexport function hasTokenLabel(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\nexport function createToken(config) {\n    return createTokenInternal(config);\n}\nfunction createTokenInternal(config) {\n    const pattern = config.pattern;\n    const tokenType = {};\n    tokenType.name = config.name;\n    if (!isUndefined(pattern)) {\n        tokenType.PATTERN = pattern;\n    }\n    if (has(config, PARENT)) {\n        throw (\"The parent property is no longer supported.\\n\" +\n            \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\");\n    }\n    if (has(config, CATEGORIES)) {\n        // casting to ANY as this will be fixed inside `augmentTokenTypes``\n        tokenType.CATEGORIES = config[CATEGORIES];\n    }\n    augmentTokenTypes([tokenType]);\n    if (has(config, LABEL)) {\n        tokenType.LABEL = config[LABEL];\n    }\n    if (has(config, GROUP)) {\n        tokenType.GROUP = config[GROUP];\n    }\n    if (has(config, POP_MODE)) {\n        tokenType.POP_MODE = config[POP_MODE];\n    }\n    if (has(config, PUSH_MODE)) {\n        tokenType.PUSH_MODE = config[PUSH_MODE];\n    }\n    if (has(config, LONGER_ALT)) {\n        tokenType.LONGER_ALT = config[LONGER_ALT];\n    }\n    if (has(config, LINE_BREAKS)) {\n        tokenType.LINE_BREAKS = config[LINE_BREAKS];\n    }\n    if (has(config, START_CHARS_HINT)) {\n        tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n    }\n    return tokenType;\n}\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\nexport function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n        image,\n        startOffset,\n        endOffset,\n        startLine,\n        endLine,\n        startColumn,\n        endColumn,\n        tokenTypeIdx: tokType.tokenTypeIdx,\n        tokenType: tokType,\n    };\n}\nexport function tokenMatcher(token, tokType) {\n    return tokenStructuredMatcher(token, tokType);\n}\n//# sourceMappingURL=tokens_public.js.map","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport { getProductionDslName, NonTerminal, Rule, Terminal, } from \"@chevrotain/gast\";\nexport const defaultParserErrorProvider = {\n    buildMismatchTokenMessage({ expected, actual, previous, ruleName }) {\n        const hasLabel = hasTokenLabel(expected);\n        const expectedMsg = hasLabel\n            ? `--> ${tokenLabel(expected)} <--`\n            : `token of type --> ${expected.name} <--`;\n        const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n        return msg;\n    },\n    buildNotAllInputParsedMessage({ firstRedundant, ruleName }) {\n        return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n    },\n    buildNoViableAltMessage({ expectedPathsPerAlt, actual, previous, customUserDescription, ruleName, }) {\n        const errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        const actualText = first(actual).image;\n        const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        }\n        else {\n            const allLookAheadPaths = reduce(expectedPathsPerAlt, (result, currAltPaths) => result.concat(currAltPaths), []);\n            const nextValidTokenSequences = map(allLookAheadPaths, (currPath) => `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\", \")}]`);\n            const nextValidSequenceItems = map(nextValidTokenSequences, (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`);\n            const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\"\\n\")}`;\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    },\n    buildEarlyExitMessage({ expectedIterationPaths, actual, customUserDescription, ruleName, }) {\n        const errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        const actualText = first(actual).image;\n        const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        }\n        else {\n            const nextValidTokenSequences = map(expectedIterationPaths, (currPath) => `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\",\")}]`);\n            const calculatedDescription = `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n                `<${nextValidTokenSequences.join(\" ,\")}>`;\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    },\n};\nObject.freeze(defaultParserErrorProvider);\nexport const defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError(topLevelRule, undefinedRule) {\n        const msg = \"Invalid grammar, reference to a rule which is not defined: ->\" +\n            undefinedRule.nonTerminalName +\n            \"<-\\n\" +\n            \"inside top level rule: ->\" +\n            topLevelRule.name +\n            \"<-\";\n        return msg;\n    },\n};\nexport const defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError(topLevelRule, duplicateProds) {\n        function getExtraProductionArgument(prod) {\n            if (prod instanceof Terminal) {\n                return prod.terminalType.name;\n            }\n            else if (prod instanceof NonTerminal) {\n                return prod.nonTerminalName;\n            }\n            else {\n                return \"\";\n            }\n        }\n        const topLevelName = topLevelRule.name;\n        const duplicateProd = first(duplicateProds);\n        const index = duplicateProd.idx;\n        const dslName = getProductionDslName(duplicateProd);\n        const extraArgument = getExtraProductionArgument(duplicateProd);\n        const hasExplicitIndex = index > 0;\n        let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${extraArgument ? `with argument: ->${extraArgument}<-` : \"\"}\n                  appears more than once (${duplicateProds.length} times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n        // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n        msg = msg.replace(/[ \\t]+/g, \" \");\n        msg = msg.replace(/\\s\\s+/g, \"\\n\");\n        return msg;\n    },\n    buildNamespaceConflictError(rule) {\n        const errMsg = `Namespace conflict found in grammar.\\n` +\n            `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n            `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n            `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n            `and Non-Terminal names start with a lower case letter.`;\n        return errMsg;\n    },\n    buildAlternationPrefixAmbiguityError(options) {\n        const pathMsg = map(options.prefixPath, (currTok) => tokenLabel(currTok)).join(\", \");\n        const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        const errMsg = `Ambiguous alternatives: <${options.ambiguityIndices.join(\" ,\")}> due to common lookahead prefix\\n` +\n            `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n            `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n            `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n            `For Further details.`;\n        return errMsg;\n    },\n    buildAlternationAmbiguityError(options) {\n        const pathMsg = map(options.prefixPath, (currtok) => tokenLabel(currtok)).join(\", \");\n        const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        let currMessage = `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\" ,\")}> in <OR${occurrence}>` +\n            ` inside <${options.topLevelRule.name}> Rule,\\n` +\n            `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n        currMessage =\n            currMessage +\n                `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n                `For Further details.`;\n        return currMessage;\n    },\n    buildEmptyRepetitionError(options) {\n        let dslName = getProductionDslName(options.repetition);\n        if (options.repetition.idx !== 0) {\n            dslName += options.repetition.idx;\n        }\n        const errMsg = `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n            `This could lead to an infinite loop.`;\n        return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options) {\n        /* istanbul ignore next */\n        return \"deprecated\";\n    },\n    buildEmptyAlternationError(options) {\n        const errMsg = `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n            ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n            `Only the last alternative may be an empty alternative.`;\n        return errMsg;\n    },\n    buildTooManyAlternativesError(options) {\n        const errMsg = `An Alternation cannot have more than 256 alternatives:\\n` +\n            `<OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n has ${options.alternation.definition.length + 1} alternatives.`;\n        return errMsg;\n    },\n    buildLeftRecursionError(options) {\n        const ruleName = options.topLevelRule.name;\n        const pathNames = map(options.leftRecursionPath, (currRule) => currRule.name);\n        const leftRecursivePath = `${ruleName} --> ${pathNames\n            .concat([ruleName])\n            .join(\" --> \")}`;\n        const errMsg = `Left Recursion found in grammar.\\n` +\n            `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n            `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n            ` To fix this refactor your grammar to remove the left recursion.\\n` +\n            `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n        return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options) {\n        /* istanbul ignore next */\n        return \"deprecated\";\n    },\n    buildDuplicateRuleNameError(options) {\n        let ruleName;\n        if (options.topLevelRule instanceof Rule) {\n            ruleName = options.topLevelRule.name;\n        }\n        else {\n            ruleName = options.topLevelRule;\n        }\n        const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n        return errMsg;\n    },\n};\n//# sourceMappingURL=errors_public.js.map","import { ParserDefinitionErrorType, } from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor } from \"@chevrotain/gast\";\nexport function resolveGrammar(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n    refResolver.resolveRefs();\n    return refResolver.errors;\n}\nexport class GastRefResolverVisitor extends GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider) {\n        super();\n        this.nameToTopRule = nameToTopRule;\n        this.errMsgProvider = errMsgProvider;\n        this.errors = [];\n    }\n    resolveRefs() {\n        forEach(values(this.nameToTopRule), (prod) => {\n            this.currTopLevel = prod;\n            prod.accept(this);\n        });\n    }\n    visitNonTerminal(node) {\n        const ref = this.nameToTopRule[node.nonTerminalName];\n        if (!ref) {\n            const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n            this.errors.push({\n                message: msg,\n                type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n                ruleName: this.currTopLevel.name,\n                unresolvedRefName: node.nonTerminalName,\n            });\n        }\n        else {\n            node.referencedRule = ref;\n        }\n    }\n}\n//# sourceMappingURL=resolver.js.map","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import { clone, drop, dropRight, first as _first, forEach, isEmpty, last, } from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"@chevrotain/gast\";\nexport class AbstractNextPossibleTokensWalker extends RestWalker {\n    constructor(topProd, path) {\n        super();\n        this.topProd = topProd;\n        this.path = path;\n        this.possibleTokTypes = [];\n        this.nextProductionName = \"\";\n        this.nextProductionOccurrence = 0;\n        this.found = false;\n        this.isAtEndOfPath = false;\n    }\n    startWalking() {\n        this.found = false;\n        if (this.path.ruleStack[0] !== this.topProd.name) {\n            throw Error(\"The path does not start with the walker's top Rule!\");\n        }\n        // immutable for the win\n        this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n        this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n        // already verified that the first production is valid, we now seek the 2nd production\n        this.ruleStack.pop();\n        this.occurrenceStack.pop();\n        this.updateExpectedNext();\n        this.walk(this.topProd);\n        return this.possibleTokTypes;\n    }\n    walk(prod, prevRest = []) {\n        // stop scanning once we found the path\n        if (!this.found) {\n            super.walk(prod, prevRest);\n        }\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n        // found the next production, need to keep walking in it\n        if (refProd.referencedRule.name === this.nextProductionName &&\n            refProd.idx === this.nextProductionOccurrence) {\n            const fullRest = currRest.concat(prevRest);\n            this.updateExpectedNext();\n            this.walk(refProd.referencedRule, fullRest);\n        }\n    }\n    updateExpectedNext() {\n        // need to consume the Terminal\n        if (isEmpty(this.ruleStack)) {\n            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n            // really seeking is the last Terminal...\n            this.nextProductionName = \"\";\n            this.nextProductionOccurrence = 0;\n            this.isAtEndOfPath = true;\n        }\n        else {\n            this.nextProductionName = this.ruleStack.pop();\n            this.nextProductionOccurrence = this.occurrenceStack.pop();\n        }\n    }\n}\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n    constructor(topProd, path) {\n        super(topProd, path);\n        this.path = path;\n        this.nextTerminalName = \"\";\n        this.nextTerminalOccurrence = 0;\n        this.nextTerminalName = this.path.lastTok.name;\n        this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n        if (this.isAtEndOfPath &&\n            terminal.terminalType.name === this.nextTerminalName &&\n            terminal.idx === this.nextTerminalOccurrence &&\n            !this.found) {\n            const fullRest = currRest.concat(prevRest);\n            const restProd = new Alternative({ definition: fullRest });\n            this.possibleTokTypes = first(restProd);\n            this.found = true;\n        }\n    }\n}\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n    constructor(topRule, occurrence) {\n        super();\n        this.topRule = topRule;\n        this.occurrence = occurrence;\n        this.result = {\n            token: undefined,\n            occurrence: undefined,\n            isEndOfRule: undefined,\n        };\n    }\n    startWalking() {\n        this.walk(this.topRule);\n        return this.result;\n    }\n}\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkMany(manyProd, currRest, prevRest) {\n        if (manyProd.idx === this.occurrence) {\n            const firstAfterMany = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterMany === undefined;\n            if (firstAfterMany instanceof Terminal) {\n                this.result.token = firstAfterMany.terminalType;\n                this.result.occurrence = firstAfterMany.idx;\n            }\n        }\n        else {\n            super.walkMany(manyProd, currRest, prevRest);\n        }\n    }\n}\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (manySepProd.idx === this.occurrence) {\n            const firstAfterManySep = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterManySep === undefined;\n            if (firstAfterManySep instanceof Terminal) {\n                this.result.token = firstAfterManySep.terminalType;\n                this.result.occurrence = firstAfterManySep.idx;\n            }\n        }\n        else {\n            super.walkManySep(manySepProd, currRest, prevRest);\n        }\n    }\n}\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (atLeastOneProd.idx === this.occurrence) {\n            const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n            if (firstAfterAtLeastOne instanceof Terminal) {\n                this.result.token = firstAfterAtLeastOne.terminalType;\n                this.result.occurrence = firstAfterAtLeastOne.idx;\n            }\n        }\n        else {\n            super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n        }\n    }\n}\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest) {\n        if (atleastOneSepProd.idx === this.occurrence) {\n            const firstAfterfirstAfterAtLeastOneSep = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n            if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n                this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n            }\n        }\n        else {\n            super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n        }\n    }\n}\nexport function possiblePathsFrom(targetDef, maxLength, currPath = []) {\n    // avoid side effects\n    currPath = clone(currPath);\n    let result = [];\n    let i = 0;\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n        return nextDef.concat(drop(targetDef, i + 1));\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n        const alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n        return result.concat(alternatives);\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */\n    while (currPath.length < maxLength && i < targetDef.length) {\n        const prod = targetDef[i];\n        /* istanbul ignore else */\n        if (prod instanceof Alternative) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof NonTerminal) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof Option) {\n            result = getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof RepetitionMandatory) {\n            const newDef = prod.definition.concat([\n                new Repetition({\n                    definition: prod.definition,\n                }),\n            ]);\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof RepetitionMandatoryWithSeparator) {\n            const newDef = [\n                new Alternative({ definition: prod.definition }),\n                new Repetition({\n                    definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition),\n                }),\n            ];\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof RepetitionWithSeparator) {\n            const newDef = prod.definition.concat([\n                new Repetition({\n                    definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition),\n                }),\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof Repetition) {\n            const newDef = prod.definition.concat([\n                new Repetition({\n                    definition: prod.definition,\n                }),\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof Alternation) {\n            forEach(prod.definition, (currAlt) => {\n                // TODO: this is a limited check for empty alternatives\n                //   It would prevent a common case of infinite loops during parser initialization.\n                //   However **in-directly** empty alternatives may still cause issues.\n                if (isEmpty(currAlt.definition) === false) {\n                    result = getAlternativesForProd(currAlt.definition);\n                }\n            });\n            return result;\n        }\n        else if (prod instanceof Terminal) {\n            currPath.push(prod.terminalType);\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n        i++;\n    }\n    result.push({\n        partialPath: currPath,\n        suffixDef: drop(targetDef, i),\n    });\n    return result;\n}\nexport function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    const EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    // to avoid creating a new Array each time.\n    const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n    const EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    let foundCompletePath = false;\n    const tokenVectorLength = tokenVector.length;\n    const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    const result = [];\n    const possiblePaths = [];\n    possiblePaths.push({\n        idx: -1,\n        def: initialDef,\n        ruleStack: [],\n        occurrenceStack: [],\n    });\n    while (!isEmpty(possiblePaths)) {\n        const currPath = possiblePaths.pop();\n        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n        if (currPath === EXIT_ALTERNATIVE) {\n            if (foundCompletePath &&\n                last(possiblePaths).idx <= minimalAlternativesIndex) {\n                // remove irrelevant alternative\n                possiblePaths.pop();\n            }\n            continue;\n        }\n        const currDef = currPath.def;\n        const currIdx = currPath.idx;\n        const currRuleStack = currPath.ruleStack;\n        const currOccurrenceStack = currPath.occurrenceStack;\n        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n        if (isEmpty(currDef)) {\n            continue;\n        }\n        const prod = currDef[0];\n        /* istanbul ignore else */\n        if (prod === EXIT_NON_TERMINAL) {\n            const nextPath = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: dropRight(currRuleStack),\n                occurrenceStack: dropRight(currOccurrenceStack),\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof Terminal) {\n            /* istanbul ignore else */\n            if (currIdx < tokenVectorLength - 1) {\n                const nextIdx = currIdx + 1;\n                const actualToken = tokenVector[nextIdx];\n                if (tokMatcher(actualToken, prod.terminalType)) {\n                    const nextPath = {\n                        idx: nextIdx,\n                        def: drop(currDef),\n                        ruleStack: currRuleStack,\n                        occurrenceStack: currOccurrenceStack,\n                    };\n                    possiblePaths.push(nextPath);\n                }\n                // end of the line\n            }\n            else if (currIdx === tokenVectorLength - 1) {\n                // IGNORE ABOVE ELSE\n                result.push({\n                    nextTokenType: prod.terminalType,\n                    nextTokenOccurrence: prod.idx,\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack,\n                });\n                foundCompletePath = true;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        }\n        else if (prod instanceof NonTerminal) {\n            const newRuleStack = clone(currRuleStack);\n            newRuleStack.push(prod.nonTerminalName);\n            const newOccurrenceStack = clone(currOccurrenceStack);\n            newOccurrenceStack.push(prod.idx);\n            const nextPath = {\n                idx: currIdx,\n                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n                ruleStack: newRuleStack,\n                occurrenceStack: newOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof Option) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            const nextPathWith = {\n                idx: currIdx,\n                def: prod.definition.concat(drop(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof RepetitionMandatory) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            const secondIteration = new Repetition({\n                definition: prod.definition,\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n            const nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof RepetitionMandatoryWithSeparator) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            const separatorGast = new Terminal({\n                terminalType: prod.separator,\n            });\n            const secondIteration = new Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n            const nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof RepetitionWithSeparator) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            const separatorGast = new Terminal({\n                terminalType: prod.separator,\n            });\n            const nthRepetition = new Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n            const nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof Repetition) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            const nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n            const nthRepetition = new Repetition({\n                definition: prod.definition,\n                idx: prod.idx,\n            });\n            const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n            const nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof Alternation) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            for (let i = prod.definition.length - 1; i >= 0; i--) {\n                const currAlt = prod.definition[i];\n                const currAltPath = {\n                    idx: currIdx,\n                    def: currAlt.definition.concat(drop(currDef)),\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack,\n                };\n                possiblePaths.push(currAltPath);\n                possiblePaths.push(EXIT_ALTERNATIVE);\n            }\n        }\n        else if (prod instanceof Alternative) {\n            possiblePaths.push({\n                idx: currIdx,\n                def: prod.definition.concat(drop(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack,\n            });\n        }\n        else if (prod instanceof Rule) {\n            // last because we should only encounter at most a single one of these per invocation.\n            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n    return result;\n}\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    const newRuleStack = clone(currRuleStack);\n    newRuleStack.push(topRule.name);\n    const newCurrOccurrenceStack = clone(currOccurrenceStack);\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1);\n    return {\n        idx: currIdx,\n        def: topRule.definition,\n        ruleStack: newRuleStack,\n        occurrenceStack: newCurrOccurrenceStack,\n    };\n}\n//# sourceMappingURL=interpreter.js.map","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { tokenStructuredMatcher, tokenStructuredMatcherNoCategories, } from \"../../scan/tokens.js\";\nimport { Alternation, Alternative as AlternativeGAST, GAstVisitor, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, } from \"@chevrotain/gast\";\nexport var PROD_TYPE;\n(function (PROD_TYPE) {\n    PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE || (PROD_TYPE = {}));\nexport function getProdType(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof Option || prod === \"Option\") {\n        return PROD_TYPE.OPTION;\n    }\n    else if (prod instanceof Repetition || prod === \"Repetition\") {\n        return PROD_TYPE.REPETITION;\n    }\n    else if (prod instanceof RepetitionMandatory ||\n        prod === \"RepetitionMandatory\") {\n        return PROD_TYPE.REPETITION_MANDATORY;\n    }\n    else if (prod instanceof RepetitionMandatoryWithSeparator ||\n        prod === \"RepetitionMandatoryWithSeparator\") {\n        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    }\n    else if (prod instanceof RepetitionWithSeparator ||\n        prod === \"RepetitionWithSeparator\") {\n        return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    }\n    else if (prod instanceof Alternation || prod === \"Alternation\") {\n        return PROD_TYPE.ALTERNATION;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function getLookaheadPaths(options) {\n    const { occurrence, rule, prodType, maxLookahead } = options;\n    const type = getProdType(prodType);\n    if (type === PROD_TYPE.ALTERNATION) {\n        return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n    }\n    else {\n        return getLookaheadPathsForOptionalProd(occurrence, rule, type, maxLookahead);\n    }\n}\nexport function buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? tokenStructuredMatcherNoCategories\n        : tokenStructuredMatcher;\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? tokenStructuredMatcherNoCategories\n        : tokenStructuredMatcher;\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nexport function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    const numOfAlts = alts.length;\n    const areAllOneTokenLookahead = every(alts, (currAlt) => {\n        return every(currAlt, (currPath) => {\n            return currPath.length === 1;\n        });\n    });\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function (orAlts) {\n            // unfortunately the predicates must be extracted every single time\n            // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n            const predicates = map(orAlts, (currAlt) => currAlt.GATE);\n            for (let t = 0; t < numOfAlts; t++) {\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                const currPredicate = predicates[t];\n                if (currPredicate !== undefined && currPredicate.call(this) === false) {\n                    // if the predicate does not match there is no point in checking the paths\n                    continue;\n                }\n                nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for (let i = 0; i < currPathLength; i++) {\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        // optimized (common) case of all the lookaheads paths requiring only\n        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n        const singleTokenAlts = map(alts, (currAlt) => {\n            return flatten(currAlt);\n        });\n        const choiceToAlt = reduce(singleTokenAlts, (result, currAlt, idx) => {\n            forEach(currAlt, (currTokType) => {\n                if (!has(result, currTokType.tokenTypeIdx)) {\n                    result[currTokType.tokenTypeIdx] = idx;\n                }\n                forEach(currTokType.categoryMatches, (currExtendingType) => {\n                    if (!has(result, currExtendingType)) {\n                        result[currExtendingType] = idx;\n                    }\n                });\n            });\n            return result;\n        }, {});\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            const nextToken = this.LA(1);\n            return choiceToAlt[nextToken.tokenTypeIdx];\n        };\n    }\n    else {\n        // optimized lookahead without needing to check the predicates at all.\n        // this causes code duplication which is intentional to improve performance.\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            for (let t = 0; t < numOfAlts; t++) {\n                const currAlt = alts[t];\n                const currNumOfPaths = currAlt.length;\n                nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n                    const currPath = currAlt[j];\n                    const currPathLength = currPath.length;\n                    for (let i = 0; i < currPathLength; i++) {\n                        const nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n}\nexport function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = every(alt, (currPath) => {\n        return currPath.length === 1;\n    });\n    const numOfPaths = alt.length;\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        const singleTokensTypes = flatten(alt);\n        if (singleTokensTypes.length === 1 &&\n            isEmpty(singleTokensTypes[0].categoryMatches)) {\n            const expectedTokenType = singleTokensTypes[0];\n            const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n            return function () {\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n            };\n        }\n        else {\n            const choiceToAlt = reduce(singleTokensTypes, (result, currTokType, idx) => {\n                result[currTokType.tokenTypeIdx] = true;\n                forEach(currTokType.categoryMatches, (currExtendingType) => {\n                    result[currExtendingType] = true;\n                });\n                return result;\n            }, []);\n            return function () {\n                const nextToken = this.LA(1);\n                return choiceToAlt[nextToken.tokenTypeIdx] === true;\n            };\n        }\n    }\n    else {\n        return function () {\n            nextPath: for (let j = 0; j < numOfPaths; j++) {\n                const currPath = alt[j];\n                const currPathLength = currPath.length;\n                for (let i = 0; i < currPathLength; i++) {\n                    const nextToken = this.LA(i + 1);\n                    if (tokenMatcher(nextToken, currPath[i]) === false) {\n                        // mismatch in current path\n                        // try the next pth\n                        continue nextPath;\n                    }\n                }\n                // found a full path that matches.\n                return true;\n            }\n            // none of the paths matched\n            return false;\n        };\n    }\n}\nclass RestDefinitionFinderWalker extends RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType) {\n        super();\n        this.topProd = topProd;\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n    }\n    startWalking() {\n        this.walk(this.topProd);\n        return this.restDef;\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdType) {\n            this.restDef = currRest.concat(prevRest);\n            return true;\n        }\n        // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n        return false;\n    }\n    walkOption(optionProd, currRest, prevRest) {\n        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n            super.walkOption(optionProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n            super.walkOption(atLeastOneProd, currRest, prevRest);\n        }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(atLeastOneSepProd, currRest, prevRest);\n        }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n            super.walkOption(manyProd, currRest, prevRest);\n        }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n            super.walkOption(manySepProd, currRest, prevRest);\n        }\n    }\n}\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef) {\n        super();\n        this.targetOccurrence = targetOccurrence;\n        this.targetProdType = targetProdType;\n        this.targetRef = targetRef;\n        this.result = [];\n    }\n    checkIsTarget(node, expectedProdName) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdName &&\n            (this.targetRef === undefined || node === this.targetRef)) {\n            this.result = node.definition;\n        }\n    }\n    visitOption(node) {\n        this.checkIsTarget(node, PROD_TYPE.OPTION);\n    }\n    visitRepetition(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    }\n    visitRepetitionMandatory(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    }\n    visitRepetitionWithSeparator(node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    }\n    visitAlternation(node) {\n        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    }\n}\nfunction initializeArrayOfArrays(size) {\n    const result = new Array(size);\n    for (let i = 0; i < size; i++) {\n        result[i] = [];\n    }\n    return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path) {\n    let keys = [\"\"];\n    for (let i = 0; i < path.length; i++) {\n        const tokType = path[i];\n        const longerKeys = [];\n        for (let j = 0; j < keys.length; j++) {\n            const currShorterKey = keys[j];\n            longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n            for (let t = 0; t < tokType.categoryMatches.length; t++) {\n                const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n                longerKeys.push(currShorterKey + categoriesKeySuffix);\n            }\n        }\n        keys = longerKeys;\n    }\n    return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n        // We only want to test vs the other alternatives\n        if (currAltIdx === idx) {\n            continue;\n        }\n        const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n        for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n            const searchKey = searchPathKeys[searchIdx];\n            if (otherAltKnownPathsKeys[searchKey] === true) {\n                return false;\n            }\n        }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true;\n}\nexport function lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = map(altsDefs, (currAlt) => possiblePathsFrom([currAlt], 1));\n    const finalResult = initializeArrayOfArrays(partialAlts.length);\n    const altsHashes = map(partialAlts, (currAltPaths) => {\n        const dict = {};\n        forEach(currAltPaths, (item) => {\n            const keys = pathToHashKeys(item.partialPath);\n            forEach(keys, (currKey) => {\n                dict[currKey] = true;\n            });\n        });\n        return dict;\n    });\n    let newData = partialAlts;\n    // maxLookahead loop\n    for (let pathLength = 1; pathLength <= k; pathLength++) {\n        const currDataset = newData;\n        newData = initializeArrayOfArrays(currDataset.length);\n        // alternatives loop\n        for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n            const currAltPathsAndSuffixes = currDataset[altIdx];\n            // paths in current alternative loop\n            for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n                const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n                const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n                const prefixKeys = pathToHashKeys(currPathPrefix);\n                const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n                // End of the line for this path.\n                if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n                    const currAltResult = finalResult[altIdx];\n                    // TODO: Can we implement a containsPath using Maps/Dictionaries?\n                    if (containsPath(currAltResult, currPathPrefix) === false) {\n                        currAltResult.push(currPathPrefix);\n                        // Update all new  keys for the current path.\n                        for (let j = 0; j < prefixKeys.length; j++) {\n                            const currKey = prefixKeys[j];\n                            altsHashes[altIdx][currKey] = true;\n                        }\n                    }\n                }\n                // Expand longer paths\n                else {\n                    const newPartialPathsAndSuffixes = possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix);\n                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n                    // Update keys for new known paths\n                    forEach(newPartialPathsAndSuffixes, (item) => {\n                        const prefixKeys = pathToHashKeys(item.partialPath);\n                        forEach(prefixKeys, (key) => {\n                            altsHashes[altIdx][key] = true;\n                        });\n                    });\n                }\n            }\n        }\n    }\n    return finalResult;\n}\nexport function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nexport function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    const insideDef = insideDefVisitor.result;\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    const afterDef = afterDefWalker.startWalking();\n    const insideFlat = new AlternativeGAST({ definition: insideDef });\n    const afterFlat = new AlternativeGAST({ definition: afterDef });\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\nexport function containsPath(alternative, searchPath) {\n    compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n        const otherPath = alternative[i];\n        if (otherPath.length !== searchPath.length) {\n            continue;\n        }\n        for (let j = 0; j < otherPath.length; j++) {\n            const searchTok = searchPath[j];\n            const otherTok = otherPath[j];\n            const matchingTokens = searchTok === otherTok ||\n                otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n            if (matchingTokens === false) {\n                continue compareOtherPath;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nexport function isStrictPrefixOfPath(prefix, other) {\n    return (prefix.length < other.length &&\n        every(prefix, (tokType, idx) => {\n            const otherTokType = other[idx];\n            return (tokType === otherTokType ||\n                otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]);\n        }));\n}\nexport function areTokenCategoriesNotUsed(lookAheadPaths) {\n    return every(lookAheadPaths, (singleAltPaths) => every(singleAltPaths, (singlePath) => every(singlePath, (token) => isEmpty(token.categoryMatches))));\n}\n//# sourceMappingURL=lookahead.js.map","import { clone, compact, difference, drop, dropRight, filter, first, flatMap, flatten, forEach, groupBy, includes, isEmpty, map, pickBy, reduce, reject, values, } from \"lodash-es\";\nimport { ParserDefinitionErrorType, } from \"../parser/parser.js\";\nimport { Alternation, Alternative as AlternativeGAST, GAstVisitor, getProductionDslName, isOptionalProd, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal, } from \"@chevrotain/gast\";\nimport { containsPath, getLookaheadPathsForOptionalProd, getLookaheadPathsForOr, getProdType, isStrictPrefixOfPath, } from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\nexport function validateLookahead(options) {\n    const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n        rules: options.rules,\n        tokenTypes: options.tokenTypes,\n        grammarName: options.grammarName,\n    });\n    return map(lookaheadValidationErrorMessages, (errorMessage) => (Object.assign({ type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION }, errorMessage)));\n}\nexport function validateGrammar(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    const duplicateErrors = flatMap(topLevels, (currTopLevel) => validateDuplicateProductions(currTopLevel, errMsgProvider));\n    const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    const tooManyAltsErrors = flatMap(topLevels, (curRule) => validateTooManyAlts(curRule, errMsgProvider));\n    const duplicateRulesError = flatMap(topLevels, (curRule) => validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider));\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);\n}\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    const collectorVisitor = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    const productionGroups = groupBy(allRuleProductions, identifyProductionForDuplicates);\n    const duplicates = pickBy(productionGroups, (currGroup) => {\n        return currGroup.length > 1;\n    });\n    const errors = map(values(duplicates), (currDuplicates) => {\n        const firstProd = first(currDuplicates);\n        const msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n        const dslName = getProductionDslName(firstProd);\n        const defError = {\n            message: msg,\n            type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n            ruleName: topLevelRule.name,\n            dslName: dslName,\n            occurrence: firstProd.idx,\n        };\n        const param = getExtraProductionArgument(firstProd);\n        if (param) {\n            defError.parameter = param;\n        }\n        return defError;\n    });\n    return errors;\n}\nexport function identifyProductionForDuplicates(prod) {\n    return `${getProductionDslName(prod)}_#_${prod.idx}_#_${getExtraProductionArgument(prod)}`;\n}\nfunction getExtraProductionArgument(prod) {\n    if (prod instanceof Terminal) {\n        return prod.terminalType.name;\n    }\n    else if (prod instanceof NonTerminal) {\n        return prod.nonTerminalName;\n    }\n    else {\n        return \"\";\n    }\n}\nexport class OccurrenceValidationCollector extends GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.allProductions = [];\n    }\n    visitNonTerminal(subrule) {\n        this.allProductions.push(subrule);\n    }\n    visitOption(option) {\n        this.allProductions.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.allProductions.push(many);\n    }\n    visitAlternation(or) {\n        this.allProductions.push(or);\n    }\n    visitTerminal(terminal) {\n        this.allProductions.push(terminal);\n    }\n}\nexport function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    const errors = [];\n    const occurrences = reduce(allRules, (result, curRule) => {\n        if (curRule.name === rule.name) {\n            return result + 1;\n        }\n        return result;\n    }, 0);\n    if (occurrences > 1) {\n        const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n            topLevelRule: rule,\n            grammarName: className,\n        });\n        errors.push({\n            message: errMsg,\n            type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n            ruleName: rule.name,\n        });\n    }\n    return errors;\n}\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    const errors = [];\n    let errMsg;\n    if (!includes(definedRulesNames, ruleName)) {\n        errMsg =\n            `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n                `as it is not defined in any of the super grammars `;\n        errors.push({\n            message: errMsg,\n            type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n            ruleName: ruleName,\n        });\n    }\n    return errors;\n}\nexport function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path = []) {\n    const errors = [];\n    const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if (isEmpty(nextNonTerminals)) {\n        return [];\n    }\n    else {\n        const ruleName = topRule.name;\n        const foundLeftRecursion = includes(nextNonTerminals, topRule);\n        if (foundLeftRecursion) {\n            errors.push({\n                message: errMsgProvider.buildLeftRecursionError({\n                    topLevelRule: topRule,\n                    leftRecursionPath: path,\n                }),\n                type: ParserDefinitionErrorType.LEFT_RECURSION,\n                ruleName: ruleName,\n            });\n        }\n        // we are only looking for cyclic paths leading back to the specific topRule\n        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n        const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n        const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n            const newPath = clone(path);\n            newPath.push(currRefRule);\n            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n        });\n        return errors.concat(errorsFromNextSteps);\n    }\n}\nexport function getFirstNoneTerminal(definition) {\n    let result = [];\n    if (isEmpty(definition)) {\n        return result;\n    }\n    const firstProd = first(definition);\n    /* istanbul ignore else */\n    if (firstProd instanceof NonTerminal) {\n        result.push(firstProd.referencedRule);\n    }\n    else if (firstProd instanceof AlternativeGAST ||\n        firstProd instanceof Option ||\n        firstProd instanceof RepetitionMandatory ||\n        firstProd instanceof RepetitionMandatoryWithSeparator ||\n        firstProd instanceof RepetitionWithSeparator ||\n        firstProd instanceof Repetition) {\n        result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    }\n    else if (firstProd instanceof Alternation) {\n        // each sub definition in alternation is a FLAT\n        result = flatten(map(firstProd.definition, (currSubDef) => getFirstNoneTerminal(currSubDef.definition)));\n    }\n    else if (firstProd instanceof Terminal) {\n        // nothing to see, move along\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n    const isFirstOptional = isOptionalProd(firstProd);\n    const hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n        const rest = drop(definition);\n        return result.concat(getFirstNoneTerminal(rest));\n    }\n    else {\n        return result;\n    }\n}\nclass OrCollector extends GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.alternations = [];\n    }\n    visitAlternation(node) {\n        this.alternations.push(node);\n    }\n}\nexport function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = flatMap(ors, (currOr) => {\n        const exceptLast = dropRight(currOr.definition);\n        return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n            const possibleFirstInAlt = nextPossibleTokensAfter([currAlternative], [], tokenStructuredMatcher, 1);\n            if (isEmpty(possibleFirstInAlt)) {\n                return [\n                    {\n                        message: errMsgProvider.buildEmptyAlternationError({\n                            topLevelRule: topLevelRule,\n                            alternation: currOr,\n                            emptyChoiceIdx: currAltIdx,\n                        }),\n                        type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n                        ruleName: topLevelRule.name,\n                        occurrence: currOr.idx,\n                        alternative: currAltIdx + 1,\n                    },\n                ];\n            }\n            else {\n                return [];\n            }\n        });\n    });\n    return errors;\n}\nexport function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    let ors = orCollector.alternations;\n    // New Handling of ignoring ambiguities\n    // - https://github.com/chevrotain/chevrotain/issues/869\n    ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n    const errors = flatMap(ors, (currOr) => {\n        const currOccurrence = currOr.idx;\n        const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n        const alternatives = getLookaheadPathsForOr(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n        const altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n    });\n    return errors;\n}\nexport class RepetitionCollector extends GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.allProductions = [];\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.allProductions.push(many);\n    }\n}\nexport function validateTooManyAlts(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = flatMap(ors, (currOr) => {\n        if (currOr.definition.length > 255) {\n            return [\n                {\n                    message: errMsgProvider.buildTooManyAlternativesError({\n                        topLevelRule: topLevelRule,\n                        alternation: currOr,\n                    }),\n                    type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n                    ruleName: topLevelRule.name,\n                    occurrence: currOr.idx,\n                },\n            ];\n        }\n        else {\n            return [];\n        }\n    });\n    return errors;\n}\nexport function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    const errors = [];\n    forEach(topLevelRules, (currTopRule) => {\n        const collectorVisitor = new RepetitionCollector();\n        currTopRule.accept(collectorVisitor);\n        const allRuleProductions = collectorVisitor.allProductions;\n        forEach(allRuleProductions, (currProd) => {\n            const prodType = getProdType(currProd);\n            const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n            const currOccurrence = currProd.idx;\n            const paths = getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n            const pathsInsideProduction = paths[0];\n            if (isEmpty(flatten(pathsInsideProduction))) {\n                const errMsg = errMsgProvider.buildEmptyRepetitionError({\n                    topLevelRule: currTopRule,\n                    repetition: currProd,\n                });\n                errors.push({\n                    message: errMsg,\n                    type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n                    ruleName: currTopRule.name,\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const foundAmbiguousPaths = [];\n    const identicalAmbiguities = reduce(alternatives, (result, currAlt, currAltIdx) => {\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n            return result;\n        }\n        forEach(currAlt, (currPath) => {\n            const altsCurrPathAppearsIn = [currAltIdx];\n            forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n                if (currAltIdx !== currOtherAltIdx &&\n                    containsPath(currOtherAlt, currPath) &&\n                    // ignore (skip) ambiguities with this \"other\" alternative\n                    alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n                    altsCurrPathAppearsIn.push(currOtherAltIdx);\n                }\n            });\n            if (altsCurrPathAppearsIn.length > 1 &&\n                !containsPath(foundAmbiguousPaths, currPath)) {\n                foundAmbiguousPaths.push(currPath);\n                result.push({\n                    alts: altsCurrPathAppearsIn,\n                    path: currPath,\n                });\n            }\n        });\n        return result;\n    }, []);\n    const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n        const ambgIndices = map(currAmbDescriptor.alts, (currAltIdx) => currAltIdx + 1);\n        const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbDescriptor.path,\n        });\n        return {\n            message: currMessage,\n            type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n            ruleName: rule.name,\n            occurrence: alternation.idx,\n            alternatives: currAmbDescriptor.alts,\n        };\n    });\n    return currErrors;\n}\nexport function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    // flatten\n    const pathsAndIndices = reduce(alternatives, (result, currAlt, idx) => {\n        const currPathsAndIdx = map(currAlt, (currPath) => {\n            return { idx: idx, path: currPath };\n        });\n        return result.concat(currPathsAndIdx);\n    }, []);\n    const errors = compact(flatMap(pathsAndIndices, (currPathAndIdx) => {\n        const alternativeGast = alternation.definition[currPathAndIdx.idx];\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n            return [];\n        }\n        const targetIdx = currPathAndIdx.idx;\n        const targetPath = currPathAndIdx.path;\n        const prefixAmbiguitiesPathsAndIndices = filter(pathsAndIndices, (searchPathAndIdx) => {\n            // prefix ambiguity can only be created from lower idx (higher priority) path\n            return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n                true &&\n                searchPathAndIdx.idx < targetIdx &&\n                // checking for strict prefix because identical lookaheads\n                // will be be detected using a different validation.\n                isStrictPrefixOfPath(searchPathAndIdx.path, targetPath));\n        });\n        const currPathPrefixErrors = map(prefixAmbiguitiesPathsAndIndices, (currAmbPathAndIdx) => {\n            const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n            const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n            const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n                topLevelRule: rule,\n                alternation: alternation,\n                ambiguityIndices: ambgIndices,\n                prefixPath: currAmbPathAndIdx.path,\n            });\n            return {\n                message: message,\n                type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n                ruleName: rule.name,\n                occurrence: occurrence,\n                alternatives: ambgIndices,\n            };\n        });\n        return currPathPrefixErrors;\n    }));\n    return errors;\n}\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    const errors = [];\n    const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n    forEach(topLevels, (currRule) => {\n        const currRuleName = currRule.name;\n        if (includes(tokenNames, currRuleName)) {\n            const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n            errors.push({\n                message: errMsg,\n                type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n                ruleName: currRuleName,\n            });\n        }\n    });\n    return errors;\n}\n//# sourceMappingURL=checks.js.map","import { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport { defaultGrammarResolverErrorProvider, defaultGrammarValidatorErrorProvider, } from \"../../errors_public.js\";\nexport function resolveGrammar(options) {\n    const actualOptions = defaults(options, {\n        errMsgProvider: defaultGrammarResolverErrorProvider,\n    });\n    const topRulesTable = {};\n    forEach(options.rules, (rule) => {\n        topRulesTable[rule.name] = rule;\n    });\n    return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\nexport function validateGrammar(options) {\n    options = defaults(options, {\n        errMsgProvider: defaultGrammarValidatorErrorProvider,\n    });\n    return orgValidateGrammar(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName);\n}\n//# sourceMappingURL=gast_resolver_public.js.map","import { includes } from \"lodash-es\";\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nconst RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nclass RecognitionException extends Error {\n    constructor(message, token) {\n        super(message);\n        this.token = token;\n        this.resyncedTokens = [];\n        // fix prototype chain when typescript target is ES5\n        Object.setPrototypeOf(this, new.target.prototype);\n        /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nexport class MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = MISMATCHED_TOKEN_EXCEPTION;\n    }\n}\nexport class NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = NO_VIABLE_ALT_EXCEPTION;\n    }\n}\nexport class NotAllInputParsedException extends RecognitionException {\n    constructor(message, token) {\n        super(message, token);\n        this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    }\n}\nexport class EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken) {\n        super(message, token);\n        this.previousToken = previousToken;\n        this.name = EARLY_EXIT_EXCEPTION;\n    }\n}\n//# sourceMappingURL=exceptions_public.js.map","import { createTokenInstance, EOF, tokenMatcher, } from \"../../../scan/tokens_public.js\";\nimport { clone, dropRight, find, flatten, has, includes, isEmpty, map, } from \"lodash-es\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nexport const EOF_FOLLOW_KEY = {};\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nexport class InRuleRecoveryException extends Error {\n    constructor(message) {\n        super(message);\n        this.name = IN_RULE_RECOVERY_EXCEPTION;\n    }\n}\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n    initRecoverable(config) {\n        this.firstAfterRepMap = {};\n        this.resyncFollows = {};\n        this.recoveryEnabled = has(config, \"recoveryEnabled\")\n            ? config.recoveryEnabled // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n        // performance optimization, NOOP will be inlined which\n        // effectively means that this optional feature does not exist\n        // when not used.\n        if (this.recoveryEnabled) {\n            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n        }\n    }\n    getTokenToInsert(tokType) {\n        const tokToInsert = createTokenInstance(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n        tokToInsert.isInsertedInRecovery = true;\n        return tokToInsert;\n    }\n    canTokenTypeBeInsertedInRecovery(tokType) {\n        return true;\n    }\n    canTokenTypeBeDeletedInRecovery(tokType) {\n        return true;\n    }\n    tryInRepetitionRecovery(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n        // TODO: can the resyncTokenType be cached?\n        const reSyncTokType = this.findReSyncTokenType();\n        const savedLexerState = this.exportLexerState();\n        const resyncedTokens = [];\n        let passedResyncPoint = false;\n        const nextTokenWithoutResync = this.LA(1);\n        let currToken = this.LA(1);\n        const generateErrorMessage = () => {\n            const previousToken = this.LA(0);\n            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n            // the error that would have been thrown\n            const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: expectedTokType,\n                actual: nextTokenWithoutResync,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName(),\n            });\n            const error = new MismatchedTokenException(msg, nextTokenWithoutResync, this.LA(0));\n            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n            error.resyncedTokens = dropRight(resyncedTokens);\n            this.SAVE_ERROR(error);\n        };\n        while (!passedResyncPoint) {\n            // re-synced to a point where we can safely exit the repetition/\n            if (this.tokenMatcher(currToken, expectedTokType)) {\n                generateErrorMessage();\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (lookAheadFunc.call(this)) {\n                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n                generateErrorMessage();\n                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n                grammarRule.apply(this, grammarRuleArgs);\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (this.tokenMatcher(currToken, reSyncTokType)) {\n                passedResyncPoint = true;\n            }\n            else {\n                currToken = this.SKIP_TOKEN();\n                this.addToResyncTokens(currToken, resyncedTokens);\n            }\n        }\n        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n        // \"between rules\" resync recovery later in the flow.\n        this.importLexerState(savedLexerState);\n    }\n    shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck) {\n        // Edge case of arriving from a MANY repetition which is stuck\n        // Attempting recovery in this case could cause an infinite loop\n        if (notStuck === false) {\n            return false;\n        }\n        // no need to recover, next token is what we expect...\n        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n            return false;\n        }\n        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n        // and prefer some backtracking path that includes recovered errors.\n        if (this.isBackTracking()) {\n            return false;\n        }\n        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n        //noinspection RedundantIfStatementJS\n        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n            return false;\n        }\n        return true;\n    }\n    // Error Recovery functionality\n    getFollowsForInRuleRecovery(tokType, tokIdxInRule) {\n        const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n        const follows = this.getNextPossibleTokenTypes(grammarPath);\n        return follows;\n    }\n    tryInRuleRecovery(expectedTokType, follows) {\n        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n            const tokToInsert = this.getTokenToInsert(expectedTokType);\n            return tokToInsert;\n        }\n        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n            const nextTok = this.SKIP_TOKEN();\n            this.consumeToken();\n            return nextTok;\n        }\n        throw new InRuleRecoveryException(\"sad sad panda\");\n    }\n    canPerformInRuleRecovery(expectedToken, follows) {\n        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n            this.canRecoverWithSingleTokenDeletion(expectedToken));\n    }\n    canRecoverWithSingleTokenInsertion(expectedTokType, follows) {\n        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n            return false;\n        }\n        // must know the possible following tokens to perform single token insertion\n        if (isEmpty(follows)) {\n            return false;\n        }\n        const mismatchedTok = this.LA(1);\n        const isMisMatchedTokInFollows = find(follows, (possibleFollowsTokType) => {\n            return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n        }) !== undefined;\n        return isMisMatchedTokInFollows;\n    }\n    canRecoverWithSingleTokenDeletion(expectedTokType) {\n        if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n            return false;\n        }\n        const isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n        return isNextTokenWhatIsExpected;\n    }\n    isInCurrentRuleReSyncSet(tokenTypeIdx) {\n        const followKey = this.getCurrFollowKey();\n        const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n        return includes(currentRuleReSyncSet, tokenTypeIdx);\n    }\n    findReSyncTokenType() {\n        const allPossibleReSyncTokTypes = this.flattenFollowSet();\n        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n        let nextToken = this.LA(1);\n        let k = 2;\n        while (true) {\n            const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n                const canMatch = tokenMatcher(nextToken, resyncTokType);\n                return canMatch;\n            });\n            if (foundMatch !== undefined) {\n                return foundMatch;\n            }\n            nextToken = this.LA(k);\n            k++;\n        }\n    }\n    getCurrFollowKey() {\n        // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n        if (this.RULE_STACK.length === 1) {\n            return EOF_FOLLOW_KEY;\n        }\n        const currRuleShortName = this.getLastExplicitRuleShortName();\n        const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n        const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n        return {\n            ruleName: this.shortRuleNameToFullName(currRuleShortName),\n            idxInCallingRule: currRuleIdx,\n            inRule: this.shortRuleNameToFullName(prevRuleShortName),\n        };\n    }\n    buildFullFollowKeyStack() {\n        const explicitRuleStack = this.RULE_STACK;\n        const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return map(explicitRuleStack, (ruleName, idx) => {\n            if (idx === 0) {\n                return EOF_FOLLOW_KEY;\n            }\n            return {\n                ruleName: this.shortRuleNameToFullName(ruleName),\n                idxInCallingRule: explicitOccurrenceStack[idx],\n                inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n            };\n        });\n    }\n    flattenFollowSet() {\n        const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n            return this.getFollowSetFromFollowKey(currKey);\n        });\n        return flatten(followStack);\n    }\n    getFollowSetFromFollowKey(followKey) {\n        if (followKey === EOF_FOLLOW_KEY) {\n            return [EOF];\n        }\n        const followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n        return this.resyncFollows[followName];\n    }\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    addToResyncTokens(token, resyncTokens) {\n        if (!this.tokenMatcher(token, EOF)) {\n            resyncTokens.push(token);\n        }\n        return resyncTokens;\n    }\n    reSyncTo(tokType) {\n        const resyncedTokens = [];\n        let nextTok = this.LA(1);\n        while (this.tokenMatcher(nextTok, tokType) === false) {\n            nextTok = this.SKIP_TOKEN();\n            this.addToResyncTokens(nextTok, resyncedTokens);\n        }\n        // the last token is not part of the error.\n        return dropRight(resyncedTokens);\n    }\n    attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n        // by default this is a NO-OP\n        // The actual implementation is with the function(not method) below\n    }\n    getCurrentGrammarPath(tokType, tokIdxInRule) {\n        const pathRuleStack = this.getHumanReadableRuleStack();\n        const pathOccurrenceStack = clone(this.RULE_OCCURRENCE_STACK);\n        const grammarPath = {\n            ruleStack: pathRuleStack,\n            occurrenceStack: pathOccurrenceStack,\n            lastTok: tokType,\n            lastTokOccurrence: tokIdxInRule,\n        };\n        return grammarPath;\n    }\n    getHumanReadableRuleStack() {\n        return map(this.RULE_STACK, (currShortName) => this.shortRuleNameToFullName(currShortName));\n    }\n}\nexport function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    let firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === undefined) {\n        const currRuleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[currRuleName];\n        const walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n        firstAfterRepInfo = walker.startWalking();\n        this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    let expectTokAfterLastMatch = firstAfterRepInfo.token;\n    let nextTokIdx = firstAfterRepInfo.occurrence;\n    const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 &&\n        isEndOfRule &&\n        expectTokAfterLastMatch === undefined) {\n        expectTokAfterLastMatch = EOF;\n        nextTokIdx = 1;\n    }\n    // We don't have anything to re-sync to...\n    // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n        return;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n        // TODO: performance optimization: instead of passing the original args here, we modify\n        // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n        // to avoid searching the cache for it once more.\n        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n}\n//# sourceMappingURL=recoverable.js.map","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    return occurrence | dslMethodIdx | ruleIdx;\n}\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n//# sourceMappingURL=keys.js.map","import { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport { validateAmbiguousAlternationAlternatives, validateEmptyOrAlternative, validateNoLeftRecursion, validateSomeNonEmptyLookaheadPath, } from \"./checks.js\";\nimport { buildAlternativesLookAheadFunc, buildLookaheadFuncForOptionalProd, buildLookaheadFuncForOr, buildSingleAlternativeLookaheadFunction, getProdType, } from \"./lookahead.js\";\nexport class LLkLookaheadStrategy {\n    constructor(options) {\n        var _a;\n        this.maxLookahead =\n            (_a = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a !== void 0 ? _a : DEFAULT_PARSER_CONFIG.maxLookahead;\n    }\n    validate(options) {\n        const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n        if (isEmpty(leftRecursionErrors)) {\n            const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n            const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead);\n            const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead);\n            const allErrors = [\n                ...leftRecursionErrors,\n                ...emptyAltErrors,\n                ...ambiguousAltsErrors,\n                ...emptyRepetitionErrors,\n            ];\n            return allErrors;\n        }\n        return leftRecursionErrors;\n    }\n    validateNoLeftRecursion(rules) {\n        return flatMap(rules, (currTopRule) => validateNoLeftRecursion(currTopRule, currTopRule, defaultGrammarValidatorErrorProvider));\n    }\n    validateEmptyOrAlternatives(rules) {\n        return flatMap(rules, (currTopRule) => validateEmptyOrAlternative(currTopRule, defaultGrammarValidatorErrorProvider));\n    }\n    validateAmbiguousAlternationAlternatives(rules, maxLookahead) {\n        return flatMap(rules, (currTopRule) => validateAmbiguousAlternationAlternatives(currTopRule, maxLookahead, defaultGrammarValidatorErrorProvider));\n    }\n    validateSomeNonEmptyLookaheadPath(rules, maxLookahead) {\n        return validateSomeNonEmptyLookaheadPath(rules, maxLookahead, defaultGrammarValidatorErrorProvider);\n    }\n    buildLookaheadForAlternation(options) {\n        return buildLookaheadFuncForOr(options.prodOccurrence, options.rule, options.maxLookahead, options.hasPredicates, options.dynamicTokensEnabled, buildAlternativesLookAheadFunc);\n    }\n    buildLookaheadForOptional(options) {\n        return buildLookaheadFuncForOptionalProd(options.prodOccurrence, options.rule, options.maxLookahead, options.dynamicTokensEnabled, getProdType(options.prodType), buildSingleAlternativeLookaheadFunction);\n    }\n}\n//# sourceMappingURL=llk_lookahead.js.map","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport { AT_LEAST_ONE_IDX, AT_LEAST_ONE_SEP_IDX, getKeyForAutomaticLookahead, MANY_IDX, MANY_SEP_IDX, OPTION_IDX, OR_IDX, } from \"../../grammar/keys.js\";\nimport { GAstVisitor, getProductionDslName, } from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n    initLooksAhead(config) {\n        this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n            ? config.dynamicTokensEnabled // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n        this.maxLookahead = has(config, \"maxLookahead\")\n            ? config.maxLookahead // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.maxLookahead;\n        this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n            ? config.lookaheadStrategy // assumes end user provides the correct config value/type\n            : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n        this.lookAheadFuncsCache = new Map();\n    }\n    preComputeLookaheadFunctions(rules) {\n        forEach(rules, (currRule) => {\n            this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n                const { alternation, repetition, option, repetitionMandatory, repetitionMandatoryWithSeparator, repetitionWithSeparator, } = collectMethods(currRule);\n                forEach(alternation, (currProd) => {\n                    const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n                    this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n                        const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n                            prodOccurrence: currProd.idx,\n                            rule: currRule,\n                            maxLookahead: currProd.maxLookahead || this.maxLookahead,\n                            hasPredicates: currProd.hasPredicates,\n                            dynamicTokensEnabled: this.dynamicTokensEnabled,\n                        });\n                        const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[currRule.name], OR_IDX, currProd.idx);\n                        this.setLaFuncCache(key, laFunc);\n                    });\n                });\n                forEach(repetition, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, MANY_IDX, \"Repetition\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n                forEach(option, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, OPTION_IDX, \"Option\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n                forEach(repetitionMandatory, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, AT_LEAST_ONE_IDX, \"RepetitionMandatory\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n                forEach(repetitionMandatoryWithSeparator, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, AT_LEAST_ONE_SEP_IDX, \"RepetitionMandatoryWithSeparator\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n                forEach(repetitionWithSeparator, (currProd) => {\n                    this.computeLookaheadFunc(currRule, currProd.idx, MANY_SEP_IDX, \"RepetitionWithSeparator\", currProd.maxLookahead, getProductionDslName(currProd));\n                });\n            });\n        });\n    }\n    computeLookaheadFunc(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n        this.TRACE_INIT(`${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n                prodOccurrence,\n                rule,\n                maxLookahead: prodMaxLookahead || this.maxLookahead,\n                dynamicTokensEnabled: this.dynamicTokensEnabled,\n                prodType,\n            });\n            const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\n            this.setLaFuncCache(key, laFunc);\n        });\n    }\n    // this actually returns a number, but it is always used as a string (object prop key)\n    getKeyForAutomaticLookahead(dslMethodIdx, occurrence) {\n        const currRuleShortName = this.getLastExplicitRuleShortName();\n        return getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence);\n    }\n    getLaFuncFromCache(key) {\n        return this.lookAheadFuncsCache.get(key);\n    }\n    /* istanbul ignore next */\n    setLaFuncCache(key, value) {\n        this.lookAheadFuncsCache.set(key, value);\n    }\n}\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: [],\n        };\n    }\n    reset() {\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: [],\n        };\n    }\n    visitOption(option) {\n        this.dslMethods.option.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n        this.dslMethods.repetitionWithSeparator.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n        this.dslMethods.repetitionMandatory.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n        this.dslMethods.repetition.push(many);\n    }\n    visitAlternation(or) {\n        this.dslMethods.alternation.push(or);\n    }\n}\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule) {\n    collectorVisitor.reset();\n    rule.accept(collectorVisitor);\n    const dslMethods = collectorVisitor.dslMethods;\n    // avoid uncleaned references\n    collectorVisitor.reset();\n    return dslMethods;\n}\n//# sourceMappingURL=looksahead.js.map","/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (both start/end offsets exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n    // Once the startOffset has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n}\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (all start/end props exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.startColumn = newLocationInfo.startColumn;\n        currNodeLocation.startLine = newLocationInfo.startLine;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n    // Once the start props has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n}\nexport function addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === undefined) {\n        node.children[tokenTypeName] = [token];\n    }\n    else {\n        node.children[tokenTypeName].push(token);\n    }\n}\nexport function addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === undefined) {\n        node.children[ruleName] = [ruleResult];\n    }\n    else {\n        node.children[ruleName].push(ruleResult);\n    }\n}\n//# sourceMappingURL=cst.js.map","const NAME = \"name\";\nexport function defineNameProp(obj, nameValue) {\n    Object.defineProperty(obj, NAME, {\n        enumerable: false,\n        configurable: true,\n        writable: false,\n        value: nameValue,\n    });\n}\n//# sourceMappingURL=lang_extensions.js.map","import { compact, filter, forEach, isArray, isEmpty, isFunction, isUndefined, keys, map, } from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nexport function defaultVisit(ctx, param) {\n    const childrenNames = keys(ctx);\n    const childrenNamesLength = childrenNames.length;\n    for (let i = 0; i < childrenNamesLength; i++) {\n        const currChildName = childrenNames[i];\n        const currChildArray = ctx[currChildName];\n        const currChildArrayLength = currChildArray.length;\n        for (let j = 0; j < currChildArrayLength; j++) {\n            const currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                this[currChild.name](currChild.children, param);\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n}\nexport function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    const derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n    const semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if (isArray(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if (isUndefined(cstNode)) {\n                return undefined;\n            }\n            return this[cstNode.name](cstNode.children, param);\n        },\n        validateVisitor: function () {\n            const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!isEmpty(semanticDefinitionErrors)) {\n                const errorMessages = map(semanticDefinitionErrors, (currDefError) => currDefError.msg);\n                throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n                    `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`);\n            }\n        },\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nexport function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    const derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    const withDefaultsProto = Object.create(baseConstructor.prototype);\n    forEach(ruleNames, (ruleName) => {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nexport var CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\nexport function validateVisitor(visitorInstance, ruleNames) {\n    const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    return missingErrors;\n}\nexport function validateMissingCstMethods(visitorInstance, ruleNames) {\n    const missingRuleNames = filter(ruleNames, (currRuleName) => {\n        return isFunction(visitorInstance[currRuleName]) === false;\n    });\n    const errors = map(missingRuleNames, (currRuleName) => {\n        return {\n            msg: `Missing visitor method: <${currRuleName}> on ${(visitorInstance.constructor.name)} CST Visitor.`,\n            type: CstVisitorDefinitionError.MISSING_METHOD,\n            methodName: currRuleName,\n        };\n    });\n    return compact(errors);\n}\n//# sourceMappingURL=cst_visitor.js.map","import { addNoneTerminalToCst, addTerminalToCst, setNodeLocationFull, setNodeLocationOnlyOffset, } from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport { createBaseSemanticVisitorConstructor, createBaseVisitorConstructorWithDefaults, } from \"../../cst/cst_visitor.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n    initTreeBuilder(config) {\n        this.CST_STACK = [];\n        // outputCst is no longer exposed/defined in the pubic API\n        this.outputCst = config.outputCst;\n        this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n            ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n        if (!this.outputCst) {\n            this.cstInvocationStateUpdate = noop;\n            this.cstFinallyStateUpdate = noop;\n            this.cstPostTerminal = noop;\n            this.cstPostNonTerminal = noop;\n            this.cstPostRule = noop;\n        }\n        else {\n            if (/full/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = setNodeLocationFull;\n                    this.setNodeLocationFromNode = setNodeLocationFull;\n                    this.cstPostRule = noop;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = noop;\n                    this.setNodeLocationFromNode = noop;\n                    this.cstPostRule = this.cstPostRuleFull;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n                }\n            }\n            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = setNodeLocationOnlyOffset;\n                    this.setNodeLocationFromNode = setNodeLocationOnlyOffset;\n                    this.cstPostRule = noop;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = noop;\n                    this.setNodeLocationFromNode = noop;\n                    this.cstPostRule = this.cstPostRuleOnlyOffset;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRegular;\n                }\n            }\n            else if (/none/i.test(this.nodeLocationTracking)) {\n                this.setNodeLocationFromToken = noop;\n                this.setNodeLocationFromNode = noop;\n                this.cstPostRule = noop;\n                this.setInitialNodeLocation = noop;\n            }\n            else {\n                throw Error(`Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`);\n            }\n        }\n    }\n    setInitialNodeLocationOnlyOffsetRecovery(cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            endOffset: NaN,\n        };\n    }\n    setInitialNodeLocationOnlyOffsetRegular(cstNode) {\n        cstNode.location = {\n            // without error recovery the starting Location of a new CstNode is guaranteed\n            // To be the next Token's startOffset (for valid inputs).\n            // For invalid inputs there won't be any CSTOutput so this potential\n            // inaccuracy does not matter\n            startOffset: this.LA(1).startOffset,\n            endOffset: NaN,\n        };\n    }\n    setInitialNodeLocationFullRecovery(cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            startLine: NaN,\n            startColumn: NaN,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN,\n        };\n    }\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */\n    setInitialNodeLocationFullRegular(cstNode) {\n        const nextToken = this.LA(1);\n        cstNode.location = {\n            startOffset: nextToken.startOffset,\n            startLine: nextToken.startLine,\n            startColumn: nextToken.startColumn,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN,\n        };\n    }\n    cstInvocationStateUpdate(fullRuleName) {\n        const cstNode = {\n            name: fullRuleName,\n            children: Object.create(null),\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    }\n    cstFinallyStateUpdate() {\n        this.CST_STACK.pop();\n    }\n    cstPostRuleFull(ruleCstNode) {\n        // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n        const prevToken = this.LA(0);\n        const loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n            loc.endLine = prevToken.endLine;\n            loc.endColumn = prevToken.endColumn;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n            loc.startLine = NaN;\n            loc.startColumn = NaN;\n        }\n    }\n    cstPostRuleOnlyOffset(ruleCstNode) {\n        const prevToken = this.LA(0);\n        // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n        const loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n        }\n    }\n    cstPostTerminal(key, consumedToken) {\n        const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n        addTerminalToCst(rootCst, consumedToken, key);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    }\n    cstPostNonTerminal(ruleCstResult, ruleName) {\n        const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n        addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    }\n    getBaseCstVisitorConstructor() {\n        if (isUndefined(this.baseCstVisitorConstructor)) {\n            const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(this.className, keys(this.gastProductionsCache));\n            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n            return newBaseCstVisitorConstructor;\n        }\n        return this.baseCstVisitorConstructor;\n    }\n    getBaseCstVisitorConstructorWithDefaults() {\n        if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n            const newConstructor = createBaseVisitorConstructorWithDefaults(this.className, keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n            this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n            return newConstructor;\n        }\n        return this.baseCstVisitorWithDefaultsConstructor;\n    }\n    getLastExplicitRuleShortName() {\n        const ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 1];\n    }\n    getPreviousExplicitRuleShortName() {\n        const ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 2];\n    }\n    getLastExplicitRuleOccurrenceIndex() {\n        const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return occurrenceStack[occurrenceStack.length - 1];\n    }\n}\n//# sourceMappingURL=tree_builder.js.map","import { END_OF_FILE } from \"../parser.js\";\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n    initLexerAdapter() {\n        this.tokVector = [];\n        this.tokVectorLength = 0;\n        this.currIdx = -1;\n    }\n    set input(newInput) {\n        // @ts-ignore - `this parameter` not supported in setters/getters\n        //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n        if (this.selfAnalysisDone !== true) {\n            throw Error(`Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`);\n        }\n        // @ts-ignore - `this parameter` not supported in setters/getters\n        //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n        this.reset();\n        this.tokVector = newInput;\n        this.tokVectorLength = newInput.length;\n    }\n    get input() {\n        return this.tokVector;\n    }\n    // skips a token and returns the next token\n    SKIP_TOKEN() {\n        if (this.currIdx <= this.tokVector.length - 2) {\n            this.consumeToken();\n            return this.LA(1);\n        }\n        else {\n            return END_OF_FILE;\n        }\n    }\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LA(howMuch) {\n        const soughtIdx = this.currIdx + howMuch;\n        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n            return END_OF_FILE;\n        }\n        else {\n            return this.tokVector[soughtIdx];\n        }\n    }\n    consumeToken() {\n        this.currIdx++;\n    }\n    exportLexerState() {\n        return this.currIdx;\n    }\n    importLexerState(newState) {\n        this.currIdx = newState;\n    }\n    resetLexerState() {\n        this.currIdx = -1;\n    }\n    moveToTerminatedState() {\n        this.currIdx = this.tokVector.length - 1;\n    }\n    getLexerPosition() {\n        return this.exportLexerState();\n    }\n}\n//# sourceMappingURL=lexer_adapter.js.map","import { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { serializeGrammar } from \"@chevrotain/gast\";\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n    ACTION(impl) {\n        return impl.call(this);\n    }\n    consume(idx, tokType, options) {\n        return this.consumeInternal(tokType, idx, options);\n    }\n    subrule(idx, ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, idx, options);\n    }\n    option(idx, actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, idx);\n    }\n    or(idx, altsOrOpts) {\n        return this.orInternal(altsOrOpts, idx);\n    }\n    many(idx, actionORMethodDef) {\n        return this.manyInternal(idx, actionORMethodDef);\n    }\n    atLeastOne(idx, actionORMethodDef) {\n        return this.atLeastOneInternal(idx, actionORMethodDef);\n    }\n    CONSUME(tokType, options) {\n        return this.consumeInternal(tokType, 0, options);\n    }\n    CONSUME1(tokType, options) {\n        return this.consumeInternal(tokType, 1, options);\n    }\n    CONSUME2(tokType, options) {\n        return this.consumeInternal(tokType, 2, options);\n    }\n    CONSUME3(tokType, options) {\n        return this.consumeInternal(tokType, 3, options);\n    }\n    CONSUME4(tokType, options) {\n        return this.consumeInternal(tokType, 4, options);\n    }\n    CONSUME5(tokType, options) {\n        return this.consumeInternal(tokType, 5, options);\n    }\n    CONSUME6(tokType, options) {\n        return this.consumeInternal(tokType, 6, options);\n    }\n    CONSUME7(tokType, options) {\n        return this.consumeInternal(tokType, 7, options);\n    }\n    CONSUME8(tokType, options) {\n        return this.consumeInternal(tokType, 8, options);\n    }\n    CONSUME9(tokType, options) {\n        return this.consumeInternal(tokType, 9, options);\n    }\n    SUBRULE(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 0, options);\n    }\n    SUBRULE1(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 1, options);\n    }\n    SUBRULE2(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 2, options);\n    }\n    SUBRULE3(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 3, options);\n    }\n    SUBRULE4(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 4, options);\n    }\n    SUBRULE5(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 5, options);\n    }\n    SUBRULE6(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 6, options);\n    }\n    SUBRULE7(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 7, options);\n    }\n    SUBRULE8(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 8, options);\n    }\n    SUBRULE9(ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 9, options);\n    }\n    OPTION(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 0);\n    }\n    OPTION1(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 1);\n    }\n    OPTION2(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 2);\n    }\n    OPTION3(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 3);\n    }\n    OPTION4(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 4);\n    }\n    OPTION5(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 5);\n    }\n    OPTION6(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 6);\n    }\n    OPTION7(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 7);\n    }\n    OPTION8(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 8);\n    }\n    OPTION9(actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 9);\n    }\n    OR(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 0);\n    }\n    OR1(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 1);\n    }\n    OR2(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 2);\n    }\n    OR3(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 3);\n    }\n    OR4(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 4);\n    }\n    OR5(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 5);\n    }\n    OR6(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 6);\n    }\n    OR7(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 7);\n    }\n    OR8(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 8);\n    }\n    OR9(altsOrOpts) {\n        return this.orInternal(altsOrOpts, 9);\n    }\n    MANY(actionORMethodDef) {\n        this.manyInternal(0, actionORMethodDef);\n    }\n    MANY1(actionORMethodDef) {\n        this.manyInternal(1, actionORMethodDef);\n    }\n    MANY2(actionORMethodDef) {\n        this.manyInternal(2, actionORMethodDef);\n    }\n    MANY3(actionORMethodDef) {\n        this.manyInternal(3, actionORMethodDef);\n    }\n    MANY4(actionORMethodDef) {\n        this.manyInternal(4, actionORMethodDef);\n    }\n    MANY5(actionORMethodDef) {\n        this.manyInternal(5, actionORMethodDef);\n    }\n    MANY6(actionORMethodDef) {\n        this.manyInternal(6, actionORMethodDef);\n    }\n    MANY7(actionORMethodDef) {\n        this.manyInternal(7, actionORMethodDef);\n    }\n    MANY8(actionORMethodDef) {\n        this.manyInternal(8, actionORMethodDef);\n    }\n    MANY9(actionORMethodDef) {\n        this.manyInternal(9, actionORMethodDef);\n    }\n    MANY_SEP(options) {\n        this.manySepFirstInternal(0, options);\n    }\n    MANY_SEP1(options) {\n        this.manySepFirstInternal(1, options);\n    }\n    MANY_SEP2(options) {\n        this.manySepFirstInternal(2, options);\n    }\n    MANY_SEP3(options) {\n        this.manySepFirstInternal(3, options);\n    }\n    MANY_SEP4(options) {\n        this.manySepFirstInternal(4, options);\n    }\n    MANY_SEP5(options) {\n        this.manySepFirstInternal(5, options);\n    }\n    MANY_SEP6(options) {\n        this.manySepFirstInternal(6, options);\n    }\n    MANY_SEP7(options) {\n        this.manySepFirstInternal(7, options);\n    }\n    MANY_SEP8(options) {\n        this.manySepFirstInternal(8, options);\n    }\n    MANY_SEP9(options) {\n        this.manySepFirstInternal(9, options);\n    }\n    AT_LEAST_ONE(actionORMethodDef) {\n        this.atLeastOneInternal(0, actionORMethodDef);\n    }\n    AT_LEAST_ONE1(actionORMethodDef) {\n        return this.atLeastOneInternal(1, actionORMethodDef);\n    }\n    AT_LEAST_ONE2(actionORMethodDef) {\n        this.atLeastOneInternal(2, actionORMethodDef);\n    }\n    AT_LEAST_ONE3(actionORMethodDef) {\n        this.atLeastOneInternal(3, actionORMethodDef);\n    }\n    AT_LEAST_ONE4(actionORMethodDef) {\n        this.atLeastOneInternal(4, actionORMethodDef);\n    }\n    AT_LEAST_ONE5(actionORMethodDef) {\n        this.atLeastOneInternal(5, actionORMethodDef);\n    }\n    AT_LEAST_ONE6(actionORMethodDef) {\n        this.atLeastOneInternal(6, actionORMethodDef);\n    }\n    AT_LEAST_ONE7(actionORMethodDef) {\n        this.atLeastOneInternal(7, actionORMethodDef);\n    }\n    AT_LEAST_ONE8(actionORMethodDef) {\n        this.atLeastOneInternal(8, actionORMethodDef);\n    }\n    AT_LEAST_ONE9(actionORMethodDef) {\n        this.atLeastOneInternal(9, actionORMethodDef);\n    }\n    AT_LEAST_ONE_SEP(options) {\n        this.atLeastOneSepFirstInternal(0, options);\n    }\n    AT_LEAST_ONE_SEP1(options) {\n        this.atLeastOneSepFirstInternal(1, options);\n    }\n    AT_LEAST_ONE_SEP2(options) {\n        this.atLeastOneSepFirstInternal(2, options);\n    }\n    AT_LEAST_ONE_SEP3(options) {\n        this.atLeastOneSepFirstInternal(3, options);\n    }\n    AT_LEAST_ONE_SEP4(options) {\n        this.atLeastOneSepFirstInternal(4, options);\n    }\n    AT_LEAST_ONE_SEP5(options) {\n        this.atLeastOneSepFirstInternal(5, options);\n    }\n    AT_LEAST_ONE_SEP6(options) {\n        this.atLeastOneSepFirstInternal(6, options);\n    }\n    AT_LEAST_ONE_SEP7(options) {\n        this.atLeastOneSepFirstInternal(7, options);\n    }\n    AT_LEAST_ONE_SEP8(options) {\n        this.atLeastOneSepFirstInternal(8, options);\n    }\n    AT_LEAST_ONE_SEP9(options) {\n        this.atLeastOneSepFirstInternal(9, options);\n    }\n    RULE(name, implementation, config = DEFAULT_RULE_CONFIG) {\n        if (includes(this.definedRulesNames, name)) {\n            const errMsg = defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n                topLevelRule: name,\n                grammarName: this.className,\n            });\n            const error = {\n                message: errMsg,\n                type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n                ruleName: name,\n            };\n            this.definitionErrors.push(error);\n        }\n        this.definedRulesNames.push(name);\n        const ruleImplementation = this.defineRule(name, implementation, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    }\n    OVERRIDE_RULE(name, impl, config = DEFAULT_RULE_CONFIG) {\n        const ruleErrors = validateRuleIsOverridden(name, this.definedRulesNames, this.className);\n        this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n        const ruleImplementation = this.defineRule(name, impl, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    }\n    BACKTRACK(grammarRule, args) {\n        return function () {\n            // save org state\n            this.isBackTrackingStack.push(1);\n            const orgState = this.saveRecogState();\n            try {\n                grammarRule.apply(this, args);\n                // if no exception was thrown we have succeed parsing the rule.\n                return true;\n            }\n            catch (e) {\n                if (isRecognitionException(e)) {\n                    return false;\n                }\n                else {\n                    throw e;\n                }\n            }\n            finally {\n                this.reloadRecogState(orgState);\n                this.isBackTrackingStack.pop();\n            }\n        };\n    }\n    // GAST export APIs\n    getGAstProductions() {\n        return this.gastProductionsCache;\n    }\n    getSerializedGastProductions() {\n        return serializeGrammar(values(this.gastProductionsCache));\n    }\n}\n//# sourceMappingURL=recognizer_api.js.map","import { clone, every, flatten, has, isArray, isEmpty, isObject, reduce, uniq, values, } from \"lodash-es\";\nimport { AT_LEAST_ONE_IDX, AT_LEAST_ONE_SEP_IDX, BITS_FOR_METHOD_TYPE, BITS_FOR_OCCURRENCE_IDX, MANY_IDX, MANY_SEP_IDX, OPTION_IDX, OR_IDX, } from \"../../grammar/keys.js\";\nimport { isRecognitionException, MismatchedTokenException, NotAllInputParsedException, } from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport { NextTerminalAfterAtLeastOneSepWalker, NextTerminalAfterAtLeastOneWalker, NextTerminalAfterManySepWalker, NextTerminalAfterManyWalker, } from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { augmentTokenTypes, isTokenType, tokenStructuredMatcher, tokenStructuredMatcherNoCategories, } from \"../../../scan/tokens.js\";\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n    initRecognizerEngine(tokenVocabulary, config) {\n        this.className = this.constructor.name;\n        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n        this.shortRuleNameToFull = {};\n        this.fullRuleNameToShort = {};\n        this.ruleShortNameIdx = 256;\n        this.tokenMatcher = tokenStructuredMatcherNoCategories;\n        this.subruleIdx = 0;\n        this.definedRulesNames = [];\n        this.tokensMap = {};\n        this.isBackTrackingStack = [];\n        this.RULE_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n        this.gastProductionsCache = {};\n        if (has(config, \"serializedGrammar\")) {\n            throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n                \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n                \"\\tFor Further details.\");\n        }\n        if (isArray(tokenVocabulary)) {\n            // This only checks for Token vocabularies provided as arrays.\n            // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n            // rather than all edge cases of empty Token vocabularies.\n            if (isEmpty(tokenVocabulary)) {\n                throw Error(\"A Token Vocabulary cannot be empty.\\n\" +\n                    \"\\tNote that the first argument for the parser constructor\\n\" +\n                    \"\\tis no longer a Token vector (since v4.0).\");\n            }\n            if (typeof tokenVocabulary[0].startOffset === \"number\") {\n                throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n                    \"\\tFor Further details.\");\n            }\n        }\n        if (isArray(tokenVocabulary)) {\n            this.tokensMap = reduce(tokenVocabulary, (acc, tokType) => {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if (has(tokenVocabulary, \"modes\") &&\n            every(flatten(values(tokenVocabulary.modes)), isTokenType)) {\n            const allTokenTypes = flatten(values(tokenVocabulary.modes));\n            const uniqueTokens = uniq(allTokenTypes);\n            this.tokensMap = reduce(uniqueTokens, (acc, tokType) => {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if (isObject(tokenVocabulary)) {\n            this.tokensMap = clone(tokenVocabulary);\n        }\n        else {\n            throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" +\n                \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n        }\n        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n        // parsed with a clear error message (\"expecting EOF but found ...\")\n        this.tokensMap[\"EOF\"] = EOF;\n        const allTokenTypes = has(tokenVocabulary, \"modes\")\n            ? flatten(values(tokenVocabulary.modes))\n            : values(tokenVocabulary);\n        const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) => isEmpty(tokenConstructor.categoryMatches));\n        this.tokenMatcher = noTokenCategoriesUsed\n            ? tokenStructuredMatcherNoCategories\n            : tokenStructuredMatcher;\n        // Because ES2015+ syntax should be supported for creating Token classes\n        // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n        augmentTokenTypes(values(this.tokensMap));\n    }\n    defineRule(ruleName, impl, config) {\n        if (this.selfAnalysisDone) {\n            throw Error(`Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n                `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);\n        }\n        const resyncEnabled = has(config, \"resyncEnabled\")\n            ? config.resyncEnabled // assumes end user provides the correct config value/type\n            : DEFAULT_RULE_CONFIG.resyncEnabled;\n        const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n            ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n            : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n        // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n        // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n        const shortName = this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n        this.ruleShortNameIdx++;\n        this.shortRuleNameToFull[shortName] = ruleName;\n        this.fullRuleNameToShort[ruleName] = shortName;\n        let invokeRuleWithTry;\n        // Micro optimization, only check the condition **once** on rule definition\n        // instead of **every single** rule invocation.\n        if (this.outputCst === true) {\n            invokeRuleWithTry = function invokeRuleWithTry(...args) {\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    impl.apply(this, args);\n                    const cst = this.CST_STACK[this.CST_STACK.length - 1];\n                    this.cstPostRule(cst);\n                    return cst;\n                }\n                catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                }\n                finally {\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        else {\n            invokeRuleWithTry = function invokeRuleWithTryCst(...args) {\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    return impl.apply(this, args);\n                }\n                catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                }\n                finally {\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        const wrappedGrammarRule = Object.assign(invokeRuleWithTry, { ruleName, originalGrammarAction: impl });\n        return wrappedGrammarRule;\n    }\n    invokeRuleCatch(e, resyncEnabledConfig, recoveryValueFunc) {\n        const isFirstInvokedRule = this.RULE_STACK.length === 1;\n        // note the reSync is always enabled for the first rule invocation, because we must always be able to\n        // reSync with EOF and just output some INVALID ParseTree\n        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n        // path is really the most valid one\n        const reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n        if (isRecognitionException(e)) {\n            const recogError = e;\n            if (reSyncEnabled) {\n                const reSyncTokType = this.findReSyncTokenType();\n                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n                    if (this.outputCst) {\n                        const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        return partialCstResult;\n                    }\n                    else {\n                        return recoveryValueFunc(e);\n                    }\n                }\n                else {\n                    if (this.outputCst) {\n                        const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        recogError.partialCstResult = partialCstResult;\n                    }\n                    // to be handled Further up the call stack\n                    throw recogError;\n                }\n            }\n            else if (isFirstInvokedRule) {\n                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n                this.moveToTerminatedState();\n                // the parser should never throw one of its own errors outside its flow.\n                // even if error recovery is disabled\n                return recoveryValueFunc(e);\n            }\n            else {\n                // to be recovered Further up the call stack\n                throw recogError;\n            }\n        }\n        else {\n            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n            throw e;\n        }\n    }\n    // Implementation of parsing DSL\n    optionInternal(actionORMethodDef, occurrence) {\n        const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n        return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    }\n    optionInternalLogic(actionORMethodDef, occurrence, key) {\n        let lookAheadFunc = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookAheadFunc;\n                lookAheadFunc = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            return action.call(this);\n        }\n        return undefined;\n    }\n    atLeastOneInternal(prodOccurrence, actionORMethodDef) {\n        const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_IDX, prodOccurrence);\n        return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key) {\n        let lookAheadFunc = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookAheadFunc;\n                lookAheadFunc = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            let notStuck = this.doSingleRepetition(action);\n            while (lookAheadFunc.call(this) === true &&\n                notStuck === true) {\n                notStuck = this.doSingleRepetition(action);\n            }\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n        }\n        // note that while it may seem that this can cause an error because by using a recursive call to\n        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, AT_LEAST_ONE_IDX, prodOccurrence, NextTerminalAfterAtLeastOneWalker);\n    }\n    atLeastOneSepFirstInternal(prodOccurrence, options) {\n        const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    atLeastOneSepFirstInternalLogic(prodOccurrence, options, key) {\n        const action = options.DEF;\n        const separator = options.SEP;\n        const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLookaheadFunc.call(this) === true) {\n            action.call(this);\n            //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n            //  because it is only needed in error recovery scenarios.\n            const separatorLookAheadFunc = () => {\n                return this.tokenMatcher(this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                NextTerminalAfterAtLeastOneSepWalker,\n            ], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, NextTerminalAfterAtLeastOneSepWalker);\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n        }\n    }\n    manyInternal(prodOccurrence, actionORMethodDef) {\n        const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    manyInternalLogic(prodOccurrence, actionORMethodDef, key) {\n        let lookaheadFunction = this.getLaFuncFromCache(key);\n        let action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            const predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                const orgLookaheadFunction = lookaheadFunction;\n                lookaheadFunction = () => {\n                    return predicate.call(this) && orgLookaheadFunction.call(this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        let notStuck = true;\n        while (lookaheadFunction.call(this) === true && notStuck === true) {\n            notStuck = this.doSingleRepetition(action);\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, MANY_IDX, prodOccurrence, NextTerminalAfterManyWalker, \n        // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck);\n    }\n    manySepFirstInternal(prodOccurrence, options) {\n        const laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence);\n        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    manySepFirstInternalLogic(prodOccurrence, options, key) {\n        const action = options.DEF;\n        const separator = options.SEP;\n        const firstIterationLaFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLaFunc.call(this) === true) {\n            action.call(this);\n            const separatorLookAheadFunc = () => {\n                return this.tokenMatcher(this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                NextTerminalAfterManySepWalker,\n            ], separatorLookAheadFunc, MANY_SEP_IDX, prodOccurrence, NextTerminalAfterManySepWalker);\n        }\n    }\n    repetitionSepSecondInternal(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n        while (separatorLookAheadFunc()) {\n            // note that this CONSUME will never enter recovery because\n            // the separatorLookAheadFunc checks that the separator really does exist.\n            this.CONSUME(separator);\n            action.call(this);\n        }\n        // we can only arrive to this function after an error\n        // has occurred (hence the name 'second') so the following\n        // IF will always be entered, its possible to remove it...\n        // however it is kept to avoid confusion and be consistent.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        /* istanbul ignore else */\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n            prodOccurrence,\n            separator,\n            separatorLookAheadFunc,\n            action,\n            nextTerminalAfterWalker,\n        ], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n    }\n    doSingleRepetition(action) {\n        const beforeIteration = this.getLexerPosition();\n        action.call(this);\n        const afterIteration = this.getLexerPosition();\n        // This boolean will indicate if this repetition progressed\n        // or if we are \"stuck\" (potential infinite loop in the repetition).\n        return afterIteration > beforeIteration;\n    }\n    orInternal(altsOrOpts, occurrence) {\n        const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n        const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n        const laFunc = this.getLaFuncFromCache(laKey);\n        const altIdxToTake = laFunc.call(this, alts);\n        if (altIdxToTake !== undefined) {\n            const chosenAlternative = alts[altIdxToTake];\n            return chosenAlternative.ALT.call(this);\n        }\n        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    }\n    ruleFinallyStateUpdate() {\n        this.RULE_STACK.pop();\n        this.RULE_OCCURRENCE_STACK.pop();\n        // NOOP when cst is disabled\n        this.cstFinallyStateUpdate();\n        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n            const firstRedundantTok = this.LA(1);\n            const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n                firstRedundant: firstRedundantTok,\n                ruleName: this.getCurrRuleFullName(),\n            });\n            this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok));\n        }\n    }\n    subruleInternal(ruleToCall, idx, options) {\n        let ruleResult;\n        try {\n            const args = options !== undefined ? options.ARGS : undefined;\n            this.subruleIdx = idx;\n            ruleResult = ruleToCall.apply(this, args);\n            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleToCall.ruleName);\n            return ruleResult;\n        }\n        catch (e) {\n            throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n        }\n    }\n    subruleInternalError(e, options, ruleName) {\n        if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleName);\n            delete e.partialCstResult;\n        }\n        throw e;\n    }\n    consumeInternal(tokType, idx, options) {\n        let consumedToken;\n        try {\n            const nextToken = this.LA(1);\n            if (this.tokenMatcher(nextToken, tokType) === true) {\n                this.consumeToken();\n                consumedToken = nextToken;\n            }\n            else {\n                this.consumeInternalError(tokType, nextToken, options);\n            }\n        }\n        catch (eFromConsumption) {\n            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n        }\n        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined\n            ? options.LABEL\n            : tokType.name, consumedToken);\n        return consumedToken;\n    }\n    consumeInternalError(tokType, nextToken, options) {\n        let msg;\n        const previousToken = this.LA(0);\n        if (options !== undefined && options.ERR_MSG) {\n            msg = options.ERR_MSG;\n        }\n        else {\n            msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: tokType,\n                actual: nextToken,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName(),\n            });\n        }\n        throw this.SAVE_ERROR(new MismatchedTokenException(msg, nextToken, previousToken));\n    }\n    consumeInternalRecovery(tokType, idx, eFromConsumption) {\n        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n        // but the original syntax could have been parsed successfully without any backtracking + recovery\n        if (this.recoveryEnabled &&\n            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n            eFromConsumption.name === \"MismatchedTokenException\" &&\n            !this.isBackTracking()) {\n            const follows = this.getFollowsForInRuleRecovery(tokType, idx);\n            try {\n                return this.tryInRuleRecovery(tokType, follows);\n            }\n            catch (eFromInRuleRecovery) {\n                if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n                    // failed in RuleRecovery.\n                    // throw the original error in order to trigger reSync error recovery\n                    throw eFromConsumption;\n                }\n                else {\n                    throw eFromInRuleRecovery;\n                }\n            }\n        }\n        else {\n            throw eFromConsumption;\n        }\n    }\n    saveRecogState() {\n        // errors is a getter which will clone the errors array\n        const savedErrors = this.errors;\n        const savedRuleStack = clone(this.RULE_STACK);\n        return {\n            errors: savedErrors,\n            lexerState: this.exportLexerState(),\n            RULE_STACK: savedRuleStack,\n            CST_STACK: this.CST_STACK,\n        };\n    }\n    reloadRecogState(newState) {\n        this.errors = newState.errors;\n        this.importLexerState(newState.lexerState);\n        this.RULE_STACK = newState.RULE_STACK;\n    }\n    ruleInvocationStateUpdate(shortName, fullName, idxInCallingRule) {\n        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n        this.RULE_STACK.push(shortName);\n        // NOOP when cst is disabled\n        this.cstInvocationStateUpdate(fullName);\n    }\n    isBackTracking() {\n        return this.isBackTrackingStack.length !== 0;\n    }\n    getCurrRuleFullName() {\n        const shortName = this.getLastExplicitRuleShortName();\n        return this.shortRuleNameToFull[shortName];\n    }\n    shortRuleNameToFullName(shortName) {\n        return this.shortRuleNameToFull[shortName];\n    }\n    isAtEndOfInput() {\n        return this.tokenMatcher(this.LA(1), EOF);\n    }\n    reset() {\n        this.resetLexerState();\n        this.subruleIdx = 0;\n        this.isBackTrackingStack = [];\n        this.errors = [];\n        this.RULE_STACK = [];\n        // TODO: extract a specific reset for TreeBuilder trait\n        this.CST_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n    }\n}\n//# sourceMappingURL=recognizer_engine.js.map","import { EarlyExitException, isRecognitionException, NoViableAltException, } from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport { getLookaheadPathsForOptionalProd, getLookaheadPathsForOr, } from \"../../grammar/lookahead.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n    initErrorHandler(config) {\n        this._errors = [];\n        this.errorMessageProvider = has(config, \"errorMessageProvider\")\n            ? config.errorMessageProvider // assumes end user provides the correct config value/type\n            : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n    }\n    SAVE_ERROR(error) {\n        if (isRecognitionException(error)) {\n            error.context = {\n                ruleStack: this.getHumanReadableRuleStack(),\n                ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n            };\n            this._errors.push(error);\n            return error;\n        }\n        else {\n            throw Error(\"Trying to save an Error which is not a RecognitionException\");\n        }\n    }\n    get errors() {\n        return clone(this._errors);\n    }\n    set errors(newErrors) {\n        this._errors = newErrors;\n    }\n    // TODO: consider caching the error message computed information\n    raiseEarlyExitException(occurrence, prodType, userDefinedErrMsg) {\n        const ruleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[ruleName];\n        const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n        const insideProdPaths = lookAheadPathsPerAlternative[0];\n        const actualTokens = [];\n        for (let i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        const msg = this.errorMessageProvider.buildEarlyExitMessage({\n            expectedIterationPaths: insideProdPaths,\n            actual: actualTokens,\n            previous: this.LA(0),\n            customUserDescription: userDefinedErrMsg,\n            ruleName: ruleName,\n        });\n        throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n    }\n    // TODO: consider caching the error message computed information\n    raiseNoAltException(occurrence, errMsgTypes) {\n        const ruleName = this.getCurrRuleFullName();\n        const ruleGrammar = this.getGAstProductions()[ruleName];\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n        const lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n        const actualTokens = [];\n        for (let i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        const previousToken = this.LA(0);\n        const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\n            actual: actualTokens,\n            previous: previousToken,\n            customUserDescription: errMsgTypes,\n            ruleName: this.getCurrRuleFullName(),\n        });\n        throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken));\n    }\n}\n//# sourceMappingURL=error_handler.js.map","import { NextAfterTokenWalker, nextPossibleTokensAfter, } from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nexport class ContentAssist {\n    initContentAssist() { }\n    computeContentAssist(startRuleName, precedingInput) {\n        const startRuleGast = this.gastProductionsCache[startRuleName];\n        if (isUndefined(startRuleGast)) {\n            throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n        }\n        return nextPossibleTokensAfter([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);\n    }\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    getNextPossibleTokenTypes(grammarPath) {\n        const topRuleName = first(grammarPath.ruleStack);\n        const gastProductions = this.getGAstProductions();\n        const topProduction = gastProductions[topRuleName];\n        const nextPossibleTokenTypes = new NextAfterTokenWalker(topProduction, grammarPath).startWalking();\n        return nextPossibleTokenTypes;\n    }\n}\n//# sourceMappingURL=context_assist.js.map","import { forEach, has, isArray, isFunction, last as peek, some, } from \"lodash-es\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport { augmentTokenTypes, hasShortKeyProperty, } from \"../../../scan/tokens.js\";\nimport { createToken, createTokenInstance, } from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nconst RECORDING_NULL_OBJECT = {\n    description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\", \n// Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nconst RECORDING_PHASE_CSTNODE = {\n    name: \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n        \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n    children: {},\n};\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n    initGastRecorder(config) {\n        this.recordingProdStack = [];\n        this.RECORDING_PHASE = false;\n    }\n    enableRecording() {\n        this.RECORDING_PHASE = true;\n        this.TRACE_INIT(\"Enable Recording\", () => {\n            /**\n             * Warning Dark Voodoo Magic upcoming!\n             * We are \"replacing\" the public parsing DSL methods API\n             * With **new** alternative implementations on the Parser **instance**\n             *\n             * So far this is the only way I've found to avoid performance regressions during parsing time.\n             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n             *   implementations directly instead.\n             */\n            for (let i = 0; i < 10; i++) {\n                const idx = i > 0 ? i : \"\";\n                this[`CONSUME${idx}`] = function (arg1, arg2) {\n                    return this.consumeInternalRecord(arg1, i, arg2);\n                };\n                this[`SUBRULE${idx}`] = function (arg1, arg2) {\n                    return this.subruleInternalRecord(arg1, i, arg2);\n                };\n                this[`OPTION${idx}`] = function (arg1) {\n                    return this.optionInternalRecord(arg1, i);\n                };\n                this[`OR${idx}`] = function (arg1) {\n                    return this.orInternalRecord(arg1, i);\n                };\n                this[`MANY${idx}`] = function (arg1) {\n                    this.manyInternalRecord(i, arg1);\n                };\n                this[`MANY_SEP${idx}`] = function (arg1) {\n                    this.manySepFirstInternalRecord(i, arg1);\n                };\n                this[`AT_LEAST_ONE${idx}`] = function (arg1) {\n                    this.atLeastOneInternalRecord(i, arg1);\n                };\n                this[`AT_LEAST_ONE_SEP${idx}`] = function (arg1) {\n                    this.atLeastOneSepFirstInternalRecord(i, arg1);\n                };\n            }\n            // DSL methods with the idx(suffix) as an argument\n            this[`consume`] = function (idx, arg1, arg2) {\n                return this.consumeInternalRecord(arg1, idx, arg2);\n            };\n            this[`subrule`] = function (idx, arg1, arg2) {\n                return this.subruleInternalRecord(arg1, idx, arg2);\n            };\n            this[`option`] = function (idx, arg1) {\n                return this.optionInternalRecord(arg1, idx);\n            };\n            this[`or`] = function (idx, arg1) {\n                return this.orInternalRecord(arg1, idx);\n            };\n            this[`many`] = function (idx, arg1) {\n                this.manyInternalRecord(idx, arg1);\n            };\n            this[`atLeastOne`] = function (idx, arg1) {\n                this.atLeastOneInternalRecord(idx, arg1);\n            };\n            this.ACTION = this.ACTION_RECORD;\n            this.BACKTRACK = this.BACKTRACK_RECORD;\n            this.LA = this.LA_RECORD;\n        });\n    }\n    disableRecording() {\n        this.RECORDING_PHASE = false;\n        // By deleting these **instance** properties, any future invocation\n        // will be deferred to the original methods on the **prototype** object\n        // This seems to get rid of any incorrect optimizations that V8 may\n        // do during the recording phase.\n        this.TRACE_INIT(\"Deleting Recording methods\", () => {\n            const that = this;\n            for (let i = 0; i < 10; i++) {\n                const idx = i > 0 ? i : \"\";\n                delete that[`CONSUME${idx}`];\n                delete that[`SUBRULE${idx}`];\n                delete that[`OPTION${idx}`];\n                delete that[`OR${idx}`];\n                delete that[`MANY${idx}`];\n                delete that[`MANY_SEP${idx}`];\n                delete that[`AT_LEAST_ONE${idx}`];\n                delete that[`AT_LEAST_ONE_SEP${idx}`];\n            }\n            delete that[`consume`];\n            delete that[`subrule`];\n            delete that[`option`];\n            delete that[`or`];\n            delete that[`many`];\n            delete that[`atLeastOne`];\n            delete that.ACTION;\n            delete that.BACKTRACK;\n            delete that.LA;\n        });\n    }\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    // @ts-expect-error -- noop place holder\n    ACTION_RECORD(impl) {\n        // NO-OP during recording\n    }\n    // Executing backtracking logic will break our recording logic assumptions\n    BACKTRACK_RECORD(grammarRule, args) {\n        return () => true;\n    }\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    LA_RECORD(howMuch) {\n        // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n        // On LA return EOF at the end of the input so an infinite loop may occur.\n        return END_OF_FILE;\n    }\n    topLevelRuleRecord(name, def) {\n        try {\n            const newTopLevelRule = new Rule({ definition: [], name: name });\n            newTopLevelRule.name = name;\n            this.recordingProdStack.push(newTopLevelRule);\n            def.call(this);\n            this.recordingProdStack.pop();\n            return newTopLevelRule;\n        }\n        catch (originalError) {\n            if (originalError.KNOWN_RECORDER_ERROR !== true) {\n                try {\n                    originalError.message =\n                        originalError.message +\n                            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n                            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n                }\n                catch (mutabilityError) {\n                    // We may not be able to modify the original error object\n                    throw originalError;\n                }\n            }\n            throw originalError;\n        }\n    }\n    // Implementation of parsing DSL\n    optionInternalRecord(actionORMethodDef, occurrence) {\n        return recordProd.call(this, Option, actionORMethodDef, occurrence);\n    }\n    atLeastOneInternalRecord(occurrence, actionORMethodDef) {\n        recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n    }\n    atLeastOneSepFirstInternalRecord(occurrence, options) {\n        recordProd.call(this, RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    manyInternalRecord(occurrence, actionORMethodDef) {\n        recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n    }\n    manySepFirstInternalRecord(occurrence, options) {\n        recordProd.call(this, RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    orInternalRecord(altsOrOpts, occurrence) {\n        return recordOrProd.call(this, altsOrOpts, occurrence);\n    }\n    subruleInternalRecord(ruleToCall, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n            const error = new Error(`<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n                ` expecting a Parser method reference but got: <${JSON.stringify(ruleToCall)}>` +\n                `\\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        const prevProd = peek(this.recordingProdStack);\n        const ruleName = ruleToCall.ruleName;\n        const newNoneTerminal = new NonTerminal({\n            idx: occurrence,\n            nonTerminalName: ruleName,\n            label: options === null || options === void 0 ? void 0 : options.LABEL,\n            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n            referencedRule: undefined,\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return this.outputCst\n            ? RECORDING_PHASE_CSTNODE\n            : RECORDING_NULL_OBJECT;\n    }\n    consumeInternalRecord(tokType, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!hasShortKeyProperty(tokType)) {\n            const error = new Error(`<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n                ` expecting a TokenType reference but got: <${JSON.stringify(tokType)}>` +\n                `\\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        const prevProd = peek(this.recordingProdStack);\n        const newNoneTerminal = new Terminal({\n            idx: occurrence,\n            terminalType: tokType,\n            label: options === null || options === void 0 ? void 0 : options.LABEL,\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return RECORDING_PHASE_TOKEN;\n    }\n}\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep = false) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = peek(this.recordingProdStack);\n    const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n    const newProd = new prodConstructor({ definition: [], idx: occurrence });\n    if (handleSep) {\n        newProd.separator = mainProdArg.SEP;\n    }\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    this.recordingProdStack.push(newProd);\n    grammarAction.call(this);\n    prevProd.definition.push(newProd);\n    this.recordingProdStack.pop();\n    return RECORDING_NULL_OBJECT;\n}\nfunction recordOrProd(mainProdArg, occurrence) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = peek(this.recordingProdStack);\n    // Only an array of alternatives\n    const hasOptions = isArray(mainProdArg) === false;\n    const alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n    const newOrProd = new Alternation({\n        definition: [],\n        idx: occurrence,\n        ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n    });\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    const hasPredicates = some(alts, (currAlt) => isFunction(currAlt.GATE));\n    newOrProd.hasPredicates = hasPredicates;\n    prevProd.definition.push(newOrProd);\n    forEach(alts, (currAlt) => {\n        const currAltFlat = new Alternative({ definition: [] });\n        newOrProd.definition.push(currAltFlat);\n        if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES; // assumes end user provides the correct config value/type\n        }\n        // **implicit** ignoreAmbiguities due to usage of gate\n        else if (has(currAlt, \"GATE\")) {\n            currAltFlat.ignoreAmbiguities = true;\n        }\n        this.recordingProdStack.push(currAltFlat);\n        currAlt.ALT.call(this);\n        this.recordingProdStack.pop();\n    });\n    return RECORDING_NULL_OBJECT;\n}\nfunction getIdxSuffix(idx) {\n    return idx === 0 ? \"\" : `${idx}`;\n}\nfunction assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n        const error = new Error(\n        // The stack trace will contain all the needed details\n        `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n            `Idx value must be a none negative value smaller than ${MAX_METHOD_IDX + 1}`);\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n    }\n}\n//# sourceMappingURL=gast_recorder.js.map","import { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n    initPerformanceTracer(config) {\n        if (has(config, \"traceInitPerf\")) {\n            const userTraceInitPerf = config.traceInitPerf;\n            const traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf; // assumes end user provides the correct config value/type\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(`${indent}--> <${phaseDesc}>`);\n            }\n            const { time, value } = timer(phaseImpl);\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            const traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    }\n}\n//# sourceMappingURL=perf_tracer.js.map","export function applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach((baseCtor) => {\n        const baseProto = baseCtor.prototype;\n        Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n            if (propName === \"constructor\") {\n                return;\n            }\n            const basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);\n            // Handle Accessors\n            if (basePropDescriptor &&\n                (basePropDescriptor.get || basePropDescriptor.set)) {\n                Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);\n            }\n            else {\n                derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n            }\n        });\n    });\n}\n//# sourceMappingURL=apply_mixins.js.map","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport { defaultGrammarValidatorErrorProvider, defaultParserErrorProvider, } from \"../errors_public.js\";\nimport { resolveGrammar, validateGrammar, } from \"../grammar/gast/gast_resolver_public.js\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\nexport const END_OF_FILE = createTokenInstance(EOF, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\nObject.freeze(END_OF_FILE);\nexport const DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 3,\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: defaultParserErrorProvider,\n    nodeLocationTracking: \"none\",\n    traceInitPerf: false,\n    skipValidations: false,\n});\nexport const DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: () => undefined,\n    resyncEnabled: true,\n});\nexport var ParserDefinitionErrorType;\n(function (ParserDefinitionErrorType) {\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_NAME\"] = 0] = \"INVALID_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_RULE_NAME\"] = 1] = \"DUPLICATE_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_OVERRIDE\"] = 2] = \"INVALID_RULE_OVERRIDE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_PRODUCTIONS\"] = 3] = \"DUPLICATE_PRODUCTIONS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"UNRESOLVED_SUBRULE_REF\"] = 4] = \"UNRESOLVED_SUBRULE_REF\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"LEFT_RECURSION\"] = 5] = \"LEFT_RECURSION\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NONE_LAST_EMPTY_ALT\"] = 6] = \"NONE_LAST_EMPTY_ALT\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_ALTS\"] = 7] = \"AMBIGUOUS_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CONFLICT_TOKENS_RULES_NAMESPACE\"] = 8] = \"CONFLICT_TOKENS_RULES_NAMESPACE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_TOKEN_NAME\"] = 9] = \"INVALID_TOKEN_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NO_NON_EMPTY_LOOKAHEAD\"] = 10] = \"NO_NON_EMPTY_LOOKAHEAD\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_PREFIX_ALTS\"] = 11] = \"AMBIGUOUS_PREFIX_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"TOO_MANY_ALTS\"] = 12] = \"TOO_MANY_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CUSTOM_LOOKAHEAD_VALIDATION\"] = 13] = \"CUSTOM_LOOKAHEAD_VALIDATION\";\n})(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));\nexport function EMPTY_ALT(value = undefined) {\n    return function () {\n        return value;\n    };\n}\nexport class Parser {\n    /**\n     *  @deprecated use the **instance** method with the same name instead\n     */\n    static performSelfAnalysis(parserInstance) {\n        throw Error(\"The **static** `performSelfAnalysis` method has been deprecated.\" +\n            \"\\t\\nUse the **instance** method with the same name instead.\");\n    }\n    performSelfAnalysis() {\n        this.TRACE_INIT(\"performSelfAnalysis\", () => {\n            let defErrorsMsgs;\n            this.selfAnalysisDone = true;\n            const className = this.className;\n            this.TRACE_INIT(\"toFastProps\", () => {\n                // Without this voodoo magic the parser would be x3-x4 slower\n                // It seems it is better to invoke `toFastProperties` **before**\n                // Any manipulations of the `this` object done during the recording phase.\n                toFastProperties(this);\n            });\n            this.TRACE_INIT(\"Grammar Recording\", () => {\n                try {\n                    this.enableRecording();\n                    // Building the GAST\n                    forEach(this.definedRulesNames, (currRuleName) => {\n                        const wrappedRule = this[currRuleName];\n                        const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n                        let recordedRuleGast;\n                        this.TRACE_INIT(`${currRuleName} Rule`, () => {\n                            recordedRuleGast = this.topLevelRuleRecord(currRuleName, originalGrammarAction);\n                        });\n                        this.gastProductionsCache[currRuleName] = recordedRuleGast;\n                    });\n                }\n                finally {\n                    this.disableRecording();\n                }\n            });\n            let resolverErrors = [];\n            this.TRACE_INIT(\"Grammar Resolving\", () => {\n                resolverErrors = resolveGrammar({\n                    rules: values(this.gastProductionsCache),\n                });\n                this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n            });\n            this.TRACE_INIT(\"Grammar Validations\", () => {\n                // only perform additional grammar validations IFF no resolving errors have occurred.\n                // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n                if (isEmpty(resolverErrors) && this.skipValidations === false) {\n                    const validationErrors = validateGrammar({\n                        rules: values(this.gastProductionsCache),\n                        tokenTypes: values(this.tokensMap),\n                        errMsgProvider: defaultGrammarValidatorErrorProvider,\n                        grammarName: className,\n                    });\n                    const lookaheadValidationErrors = validateLookahead({\n                        lookaheadStrategy: this.lookaheadStrategy,\n                        rules: values(this.gastProductionsCache),\n                        tokenTypes: values(this.tokensMap),\n                        grammarName: className,\n                    });\n                    this.definitionErrors = this.definitionErrors.concat(validationErrors, lookaheadValidationErrors);\n                }\n            });\n            // this analysis may fail if the grammar is not perfectly valid\n            if (isEmpty(this.definitionErrors)) {\n                // The results of these computations are not needed unless error recovery is enabled.\n                if (this.recoveryEnabled) {\n                    this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n                        const allFollows = computeAllProdsFollows(values(this.gastProductionsCache));\n                        this.resyncFollows = allFollows;\n                    });\n                }\n                this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n                    var _a, _b;\n                    (_b = (_a = this.lookaheadStrategy).initialize) === null || _b === void 0 ? void 0 : _b.call(_a, {\n                        rules: values(this.gastProductionsCache),\n                    });\n                    this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n                });\n            }\n            if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n                !isEmpty(this.definitionErrors)) {\n                defErrorsMsgs = map(this.definitionErrors, (defError) => defError.message);\n                throw new Error(`Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\"\\n-------------------------------\\n\")}`);\n            }\n        });\n    }\n    constructor(tokenVocabulary, config) {\n        this.definitionErrors = [];\n        this.selfAnalysisDone = false;\n        const that = this;\n        that.initErrorHandler(config);\n        that.initLexerAdapter();\n        that.initLooksAhead(config);\n        that.initRecognizerEngine(tokenVocabulary, config);\n        that.initRecoverable(config);\n        that.initTreeBuilder(config);\n        that.initContentAssist();\n        that.initGastRecorder(config);\n        that.initPerformanceTracer(config);\n        if (has(config, \"ignoredIssues\")) {\n            throw new Error(\"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n                \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n                \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n                \"For further details.\");\n        }\n        this.skipValidations = has(config, \"skipValidations\")\n            ? config.skipValidations // casting assumes the end user passing the correct type\n            : DEFAULT_PARSER_CONFIG.skipValidations;\n    }\n}\n// Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n// (normally during the parser's constructor).\n// This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n// for example: duplicate rule names, referencing an unresolved subrule, ect...\n// This flag should not be enabled during normal usage, it is used in special situations, for example when\n// needing to display the parser definition errors in some GUI(online playground).\nParser.DEFER_DEFINITION_ERRORS_HANDLING = false;\napplyMixins(Parser, [\n    Recoverable,\n    LooksAhead,\n    TreeBuilder,\n    LexerAdapter,\n    RecognizerEngine,\n    RecognizerApi,\n    ErrorHandler,\n    ContentAssist,\n    GastRecorder,\n    PerformanceTracer,\n]);\nexport class CstParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n        const configClone = clone(config);\n        configClone.outputCst = true;\n        super(tokenVocabulary, configClone);\n    }\n}\nexport class EmbeddedActionsParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n        const configClone = clone(config);\n        configClone.outputCst = false;\n        super(tokenVocabulary, configClone);\n    }\n}\n//# sourceMappingURL=parser.js.map","import { GAstVisitor, NonTerminal } from \"@chevrotain/gast\";\nimport { assign, flatten, groupBy, map, some, values } from \"lodash-es\";\nexport function buildModel(productions) {\n    const generator = new CstNodeDefinitionGenerator();\n    const allRules = values(productions);\n    return map(allRules, (rule) => generator.visitRule(rule));\n}\nclass CstNodeDefinitionGenerator extends GAstVisitor {\n    visitRule(node) {\n        const rawElements = this.visitEach(node.definition);\n        const grouped = groupBy(rawElements, (el) => el.propertyName);\n        const properties = map(grouped, (group, propertyName) => {\n            const allNullable = !some(group, (el) => !el.canBeNull);\n            // In an alternation with a label a property name can have\n            // multiple types.\n            let propertyType = group[0].type;\n            if (group.length > 1) {\n                propertyType = map(group, (g) => g.type);\n            }\n            return {\n                name: propertyName,\n                type: propertyType,\n                optional: allNullable,\n            };\n        });\n        return {\n            name: node.name,\n            properties: properties,\n        };\n    }\n    visitAlternative(node) {\n        return this.visitEachAndOverrideWith(node.definition, { canBeNull: true });\n    }\n    visitOption(node) {\n        return this.visitEachAndOverrideWith(node.definition, { canBeNull: true });\n    }\n    visitRepetition(node) {\n        return this.visitEachAndOverrideWith(node.definition, { canBeNull: true });\n    }\n    visitRepetitionMandatory(node) {\n        return this.visitEach(node.definition);\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n        return this.visitEach(node.definition).concat({\n            propertyName: node.separator.name,\n            canBeNull: true,\n            type: getType(node.separator),\n        });\n    }\n    visitRepetitionWithSeparator(node) {\n        return this.visitEachAndOverrideWith(node.definition, {\n            canBeNull: true,\n        }).concat({\n            propertyName: node.separator.name,\n            canBeNull: true,\n            type: getType(node.separator),\n        });\n    }\n    visitAlternation(node) {\n        return this.visitEachAndOverrideWith(node.definition, { canBeNull: true });\n    }\n    visitTerminal(node) {\n        return [\n            {\n                propertyName: node.label || node.terminalType.name,\n                canBeNull: false,\n                type: getType(node),\n            },\n        ];\n    }\n    visitNonTerminal(node) {\n        return [\n            {\n                propertyName: node.label || node.nonTerminalName,\n                canBeNull: false,\n                type: getType(node),\n            },\n        ];\n    }\n    visitEachAndOverrideWith(definition, override) {\n        return map(this.visitEach(definition), (definition) => assign({}, definition, override));\n    }\n    visitEach(definition) {\n        return flatten(map(definition, (definition) => this.visit(definition)));\n    }\n}\nfunction getType(production) {\n    if (production instanceof NonTerminal) {\n        return {\n            kind: \"rule\",\n            name: production.referencedRule.name,\n        };\n    }\n    return { kind: \"token\" };\n}\n//# sourceMappingURL=model.js.map","import { buildModel } from \"./model.js\";\nimport { genDts } from \"./generate.js\";\nconst defaultOptions = {\n    includeVisitorInterface: true,\n    visitorInterfaceName: \"ICstNodeVisitor\",\n};\nexport function generateCstDts(productions, options) {\n    const effectiveOptions = Object.assign(Object.assign({}, defaultOptions), options);\n    const model = buildModel(productions);\n    return genDts(model, effectiveOptions);\n}\n//# sourceMappingURL=api.js.map","/* istanbul ignore file - tricky to import some things from this module during testing */\n// semantic version\nexport { VERSION } from \"./version.js\";\nexport { CstParser, EmbeddedActionsParser, ParserDefinitionErrorType, EMPTY_ALT, } from \"./parse/parser/parser.js\";\nexport { Lexer, LexerDefinitionErrorType } from \"./scan/lexer_public.js\";\n// Tokens utilities\nexport { createToken, createTokenInstance, EOF, tokenLabel, tokenMatcher, tokenName, } from \"./scan/tokens_public.js\";\n// Lookahead\nexport { getLookaheadPaths } from \"./parse/grammar/lookahead.js\";\nexport { LLkLookaheadStrategy } from \"./parse/grammar/llk_lookahead.js\";\n// Other Utilities\nexport { defaultParserErrorProvider } from \"./parse/errors_public.js\";\nexport { EarlyExitException, isRecognitionException, MismatchedTokenException, NotAllInputParsedException, NoViableAltException, } from \"./parse/exceptions_public.js\";\nexport { defaultLexerErrorProvider } from \"./scan/lexer_errors_public.js\";\n// grammar reflection API\nexport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, } from \"@chevrotain/gast\";\n// GAST Utilities\nexport { serializeGrammar, serializeProduction, GAstVisitor, } from \"@chevrotain/gast\";\nexport { generateCstDts } from \"@chevrotain/cst-dts-gen\";\n/* istanbul ignore next */\nexport function clearCache() {\n    console.warn(\"The clearCache function was 'soft' removed from the Chevrotain API.\" +\n        \"\\n\\t It performs no action other than printing this message.\" +\n        \"\\n\\t Please avoid using it as it will be completely removed in the future\");\n}\nexport { createSyntaxDiagramsCode } from \"./diagrams/render_public.js\";\nexport class Parser {\n    constructor() {\n        throw new Error(\"The Parser class has been deprecated, use CstParser or EmbeddedActionsParser instead.\\t\\n\" +\n            \"See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_7-0-0\");\n    }\n}\n//# sourceMappingURL=api.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport map from \"lodash-es/map.js\";\nimport filter from \"lodash-es/filter.js\";\nimport { Alternation, NonTerminal, Option, RepetitionMandatory, Repetition, Terminal, RepetitionWithSeparator, RepetitionMandatoryWithSeparator } from \"chevrotain\";\nexport function buildATNKey(rule, type, occurrence) {\n    return `${rule.name}_${type}_${occurrence}`;\n}\nexport const ATN_INVALID_TYPE = 0;\nexport const ATN_BASIC = 1;\nexport const ATN_RULE_START = 2;\nexport const ATN_PLUS_BLOCK_START = 4;\nexport const ATN_STAR_BLOCK_START = 5;\n// Currently unused as the ATN is not used for lexing\nexport const ATN_TOKEN_START = 6;\nexport const ATN_RULE_STOP = 7;\nexport const ATN_BLOCK_END = 8;\nexport const ATN_STAR_LOOP_BACK = 9;\nexport const ATN_STAR_LOOP_ENTRY = 10;\nexport const ATN_PLUS_LOOP_BACK = 11;\nexport const ATN_LOOP_END = 12;\nexport class AbstractTransition {\n    constructor(target) {\n        this.target = target;\n    }\n    isEpsilon() {\n        return false;\n    }\n}\nexport class AtomTransition extends AbstractTransition {\n    constructor(target, tokenType) {\n        super(target);\n        this.tokenType = tokenType;\n    }\n}\nexport class EpsilonTransition extends AbstractTransition {\n    constructor(target) {\n        super(target);\n    }\n    isEpsilon() {\n        return true;\n    }\n}\nexport class RuleTransition extends AbstractTransition {\n    constructor(ruleStart, rule, followState) {\n        super(ruleStart);\n        this.rule = rule;\n        this.followState = followState;\n    }\n    isEpsilon() {\n        return true;\n    }\n}\nexport function createATN(rules) {\n    const atn = {\n        decisionMap: {},\n        decisionStates: [],\n        ruleToStartState: new Map(),\n        ruleToStopState: new Map(),\n        states: []\n    };\n    createRuleStartAndStopATNStates(atn, rules);\n    const ruleLength = rules.length;\n    for (let i = 0; i < ruleLength; i++) {\n        const rule = rules[i];\n        const ruleBlock = block(atn, rule, rule);\n        if (ruleBlock === undefined) {\n            continue;\n        }\n        buildRuleHandle(atn, rule, ruleBlock);\n    }\n    return atn;\n}\nfunction createRuleStartAndStopATNStates(atn, rules) {\n    const ruleLength = rules.length;\n    for (let i = 0; i < ruleLength; i++) {\n        const rule = rules[i];\n        const start = newState(atn, rule, undefined, {\n            type: ATN_RULE_START\n        });\n        const stop = newState(atn, rule, undefined, {\n            type: ATN_RULE_STOP\n        });\n        start.stop = stop;\n        atn.ruleToStartState.set(rule, start);\n        atn.ruleToStopState.set(rule, stop);\n    }\n}\nfunction atom(atn, rule, production) {\n    if (production instanceof Terminal) {\n        return tokenRef(atn, rule, production.terminalType, production);\n    }\n    else if (production instanceof NonTerminal) {\n        return ruleRef(atn, rule, production);\n    }\n    else if (production instanceof Alternation) {\n        return alternation(atn, rule, production);\n    }\n    else if (production instanceof Option) {\n        return option(atn, rule, production);\n    }\n    else if (production instanceof Repetition) {\n        return repetition(atn, rule, production);\n    }\n    else if (production instanceof RepetitionWithSeparator) {\n        return repetitionSep(atn, rule, production);\n    }\n    else if (production instanceof RepetitionMandatory) {\n        return repetitionMandatory(atn, rule, production);\n    }\n    else if (production instanceof RepetitionMandatoryWithSeparator) {\n        return repetitionMandatorySep(atn, rule, production);\n    }\n    else {\n        return block(atn, rule, production);\n    }\n}\nfunction repetition(atn, rule, repetition) {\n    const starState = newState(atn, rule, repetition, {\n        type: ATN_STAR_BLOCK_START\n    });\n    defineDecisionState(atn, starState);\n    const handle = makeAlts(atn, rule, starState, repetition, block(atn, rule, repetition));\n    return star(atn, rule, repetition, handle);\n}\nfunction repetitionSep(atn, rule, repetition) {\n    const starState = newState(atn, rule, repetition, {\n        type: ATN_STAR_BLOCK_START\n    });\n    defineDecisionState(atn, starState);\n    const handle = makeAlts(atn, rule, starState, repetition, block(atn, rule, repetition));\n    const sep = tokenRef(atn, rule, repetition.separator, repetition);\n    return star(atn, rule, repetition, handle, sep);\n}\nfunction repetitionMandatory(atn, rule, repetition) {\n    const plusState = newState(atn, rule, repetition, {\n        type: ATN_PLUS_BLOCK_START\n    });\n    defineDecisionState(atn, plusState);\n    const handle = makeAlts(atn, rule, plusState, repetition, block(atn, rule, repetition));\n    return plus(atn, rule, repetition, handle);\n}\nfunction repetitionMandatorySep(atn, rule, repetition) {\n    const plusState = newState(atn, rule, repetition, {\n        type: ATN_PLUS_BLOCK_START\n    });\n    defineDecisionState(atn, plusState);\n    const handle = makeAlts(atn, rule, plusState, repetition, block(atn, rule, repetition));\n    const sep = tokenRef(atn, rule, repetition.separator, repetition);\n    return plus(atn, rule, repetition, handle, sep);\n}\nfunction alternation(atn, rule, alternation) {\n    const start = newState(atn, rule, alternation, {\n        type: ATN_BASIC\n    });\n    defineDecisionState(atn, start);\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e));\n    const handle = makeAlts(atn, rule, start, alternation, ...alts);\n    return handle;\n}\nfunction option(atn, rule, option) {\n    const start = newState(atn, rule, option, {\n        type: ATN_BASIC\n    });\n    defineDecisionState(atn, start);\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option));\n    return optional(atn, rule, option, handle);\n}\nfunction block(atn, rule, block) {\n    const handles = filter(map(block.definition, (e) => atom(atn, rule, e)), (e) => e !== undefined);\n    if (handles.length === 1) {\n        return handles[0];\n    }\n    else if (handles.length === 0) {\n        return undefined;\n    }\n    else {\n        return makeBlock(atn, handles);\n    }\n}\nfunction plus(atn, rule, plus, handle, sep) {\n    const blkStart = handle.left;\n    const blkEnd = handle.right;\n    const loop = newState(atn, rule, plus, {\n        type: ATN_PLUS_LOOP_BACK\n    });\n    defineDecisionState(atn, loop);\n    const end = newState(atn, rule, plus, {\n        type: ATN_LOOP_END\n    });\n    blkStart.loopback = loop;\n    end.loopback = loop;\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\n    epsilon(blkEnd, loop); // block can see loop back\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\n    // This influences the chosen option in the lookahead DFA\n    if (sep === undefined) {\n        epsilon(loop, blkStart); // loop back to start\n        epsilon(loop, end); // exit\n    }\n    else {\n        epsilon(loop, end); // exit\n        // loop back to start with separator\n        epsilon(loop, sep.left);\n        epsilon(sep.right, blkStart);\n    }\n    return {\n        left: blkStart,\n        right: end\n    };\n}\nfunction star(atn, rule, star, handle, sep) {\n    const start = handle.left;\n    const end = handle.right;\n    const entry = newState(atn, rule, star, {\n        type: ATN_STAR_LOOP_ENTRY\n    });\n    defineDecisionState(atn, entry);\n    const loopEnd = newState(atn, rule, star, {\n        type: ATN_LOOP_END\n    });\n    const loop = newState(atn, rule, star, {\n        type: ATN_STAR_LOOP_BACK\n    });\n    entry.loopback = loop;\n    loopEnd.loopback = loop;\n    epsilon(entry, start); // loop enter edge (alt 2)\n    epsilon(entry, loopEnd); // bypass loop edge (alt 1)\n    epsilon(end, loop); // block end hits loop back\n    if (sep !== undefined) {\n        epsilon(loop, loopEnd); // end loop\n        // loop back to start of handle using separator\n        epsilon(loop, sep.left);\n        epsilon(sep.right, start);\n    }\n    else {\n        epsilon(loop, entry); // loop back to entry/exit decision\n    }\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\n    return {\n        left: entry,\n        right: loopEnd\n    };\n}\nfunction optional(atn, rule, optional, handle) {\n    const start = handle.left;\n    const end = handle.right;\n    epsilon(start, end);\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\n    return handle;\n}\nfunction defineDecisionState(atn, state) {\n    atn.decisionStates.push(state);\n    state.decision = atn.decisionStates.length - 1;\n    return state.decision;\n}\nfunction makeAlts(atn, rule, start, production, ...alts) {\n    const end = newState(atn, rule, production, {\n        type: ATN_BLOCK_END,\n        start\n    });\n    start.end = end;\n    for (const alt of alts) {\n        if (alt !== undefined) {\n            // hook alts up to decision block\n            epsilon(start, alt.left);\n            epsilon(alt.right, end);\n        }\n        else {\n            epsilon(start, end);\n        }\n    }\n    const handle = {\n        left: start,\n        right: end\n    };\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start;\n    return handle;\n}\nfunction getProdType(production) {\n    if (production instanceof Alternation) {\n        return 'Alternation';\n    }\n    else if (production instanceof Option) {\n        return 'Option';\n    }\n    else if (production instanceof Repetition) {\n        return 'Repetition';\n    }\n    else if (production instanceof RepetitionWithSeparator) {\n        return 'RepetitionWithSeparator';\n    }\n    else if (production instanceof RepetitionMandatory) {\n        return 'RepetitionMandatory';\n    }\n    else if (production instanceof RepetitionMandatoryWithSeparator) {\n        return 'RepetitionMandatoryWithSeparator';\n    }\n    else {\n        throw new Error('Invalid production type encountered');\n    }\n}\nfunction makeBlock(atn, alts) {\n    const altsLength = alts.length;\n    for (let i = 0; i < altsLength - 1; i++) {\n        const handle = alts[i];\n        let transition;\n        if (handle.left.transitions.length === 1) {\n            transition = handle.left.transitions[0];\n        }\n        const isRuleTransition = transition instanceof RuleTransition;\n        const ruleTransition = transition;\n        const next = alts[i + 1].left;\n        if (handle.left.type === ATN_BASIC &&\n            handle.right.type === ATN_BASIC &&\n            transition !== undefined &&\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\n                transition.target === handle.right)) {\n            // we can avoid epsilon edge to next element\n            if (isRuleTransition) {\n                ruleTransition.followState = next;\n            }\n            else {\n                transition.target = next;\n            }\n            removeState(atn, handle.right); // we skipped over this state\n        }\n        else {\n            // need epsilon if previous block's right end node is complex\n            epsilon(handle.right, next);\n        }\n    }\n    const first = alts[0];\n    const last = alts[altsLength - 1];\n    return {\n        left: first.left,\n        right: last.right\n    };\n}\nfunction tokenRef(atn, rule, tokenType, production) {\n    const left = newState(atn, rule, production, {\n        type: ATN_BASIC\n    });\n    const right = newState(atn, rule, production, {\n        type: ATN_BASIC\n    });\n    addTransition(left, new AtomTransition(right, tokenType));\n    return {\n        left,\n        right\n    };\n}\nfunction ruleRef(atn, currentRule, nonTerminal) {\n    const rule = nonTerminal.referencedRule;\n    const start = atn.ruleToStartState.get(rule);\n    const left = newState(atn, currentRule, nonTerminal, {\n        type: ATN_BASIC\n    });\n    const right = newState(atn, currentRule, nonTerminal, {\n        type: ATN_BASIC\n    });\n    const call = new RuleTransition(start, rule, right);\n    addTransition(left, call);\n    return {\n        left,\n        right\n    };\n}\nfunction buildRuleHandle(atn, rule, block) {\n    const start = atn.ruleToStartState.get(rule);\n    epsilon(start, block.left);\n    const stop = atn.ruleToStopState.get(rule);\n    epsilon(block.right, stop);\n    const handle = {\n        left: start,\n        right: stop\n    };\n    return handle;\n}\nfunction epsilon(a, b) {\n    const transition = new EpsilonTransition(b);\n    addTransition(a, transition);\n}\nfunction newState(atn, rule, production, partial) {\n    const t = Object.assign({ atn,\n        production, epsilonOnlyTransitions: false, rule, transitions: [], nextTokenWithinRule: [], stateNumber: atn.states.length }, partial);\n    atn.states.push(t);\n    return t;\n}\nfunction addTransition(state, transition) {\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\n    // Because they are never mixed, only setting the property for the first transition is fine\n    if (state.transitions.length === 0) {\n        state.epsilonOnlyTransitions = transition.isEpsilon();\n    }\n    state.transitions.push(transition);\n}\nfunction removeState(atn, state) {\n    atn.states.splice(atn.states.indexOf(state), 1);\n}\n//# sourceMappingURL=atn.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport map from \"lodash-es/map.js\";\nexport const DFA_ERROR = {};\nexport class ATNConfigSet {\n    constructor() {\n        this.map = {};\n        this.configs = [];\n    }\n    get size() {\n        return this.configs.length;\n    }\n    finalize() {\n        // Empties the map to free up memory\n        this.map = {};\n    }\n    add(config) {\n        const key = getATNConfigKey(config);\n        // Only add configs which don't exist in our map already\n        // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\n        if (!(key in this.map)) {\n            this.map[key] = this.configs.length;\n            this.configs.push(config);\n        }\n    }\n    get elements() {\n        return this.configs;\n    }\n    get alts() {\n        return map(this.configs, (e) => e.alt);\n    }\n    get key() {\n        let value = \"\";\n        for (const k in this.map) {\n            value += k + \":\";\n        }\n        return value;\n    }\n}\nexport function getATNConfigKey(config, alt = true) {\n    return `${alt ? `a${config.alt}` : \"\"}s${config.state.stateNumber}:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`;\n}\n//# sourceMappingURL=dfa.js.map","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { tokenMatcher, tokenLabel, NonTerminal, Alternation, Option, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Repetition, Terminal, LLkLookaheadStrategy, getLookaheadPaths } from \"chevrotain\";\nimport { ATN_RULE_STOP, AtomTransition, buildATNKey, createATN, EpsilonTransition, RuleTransition } from \"./atn.js\";\nimport { ATNConfigSet, DFA_ERROR, getATNConfigKey } from \"./dfa.js\";\nimport min from \"lodash-es/min.js\";\nimport flatMap from \"lodash-es/flatMap.js\";\nimport uniqBy from \"lodash-es/uniqBy.js\";\nimport map from \"lodash-es/map.js\";\nimport flatten from \"lodash-es/flatten.js\";\nimport forEach from \"lodash-es/forEach.js\";\nimport isEmpty from \"lodash-es/isEmpty.js\";\nimport reduce from \"lodash-es/reduce.js\";\nfunction createDFACache(startState, decision) {\n    const map = {};\n    return (predicateSet) => {\n        const key = predicateSet.toString();\n        let existing = map[key];\n        if (existing !== undefined) {\n            return existing;\n        }\n        else {\n            existing = {\n                atnStartState: startState,\n                decision,\n                states: {}\n            };\n            map[key] = existing;\n            return existing;\n        }\n    };\n}\nclass PredicateSet {\n    constructor() {\n        this.predicates = [];\n    }\n    is(index) {\n        return index >= this.predicates.length || this.predicates[index];\n    }\n    set(index, value) {\n        this.predicates[index] = value;\n    }\n    toString() {\n        let value = \"\";\n        const size = this.predicates.length;\n        for (let i = 0; i < size; i++) {\n            value += this.predicates[i] === true ? \"1\" : \"0\";\n        }\n        return value;\n    }\n}\nconst EMPTY_PREDICATES = new PredicateSet();\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\n    constructor(options) {\n        var _a;\n        super();\n        this.logging = (_a = options === null || options === void 0 ? void 0 : options.logging) !== null && _a !== void 0 ? _a : ((message) => console.log(message));\n    }\n    initialize(options) {\n        this.atn = createATN(options.rules);\n        this.dfas = initATNSimulator(this.atn);\n    }\n    validateAmbiguousAlternationAlternatives() {\n        return [];\n    }\n    validateEmptyOrAlternatives() {\n        return [];\n    }\n    buildLookaheadForAlternation(options) {\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\n        const dfas = this.dfas;\n        const logging = this.logging;\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\n        const decisionState = this.atn.decisionMap[key];\n        const decisionIndex = decisionState.decision;\n        const partialAlts = map(getLookaheadPaths({\n            maxLookahead: 1,\n            occurrence: prodOccurrence,\n            prodType: \"Alternation\",\n            rule: rule\n        }), (currAlt) => map(currAlt, (path) => path[0]));\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\n            const choiceToAlt = reduce(partialAlts, (result, currAlt, idx) => {\n                forEach(currAlt, (currTokType) => {\n                    if (currTokType) {\n                        result[currTokType.tokenTypeIdx] = idx;\n                        forEach(currTokType.categoryMatches, (currExtendingType) => {\n                            result[currExtendingType] = idx;\n                        });\n                    }\n                });\n                return result;\n            }, {});\n            if (hasPredicates) {\n                return function (orAlts) {\n                    var _a;\n                    const nextToken = this.LA(1);\n                    const prediction = choiceToAlt[nextToken.tokenTypeIdx];\n                    if (orAlts !== undefined && prediction !== undefined) {\n                        const gate = (_a = orAlts[prediction]) === null || _a === void 0 ? void 0 : _a.GATE;\n                        if (gate !== undefined && gate.call(this) === false) {\n                            return undefined;\n                        }\n                    }\n                    return prediction;\n                };\n            }\n            else {\n                return function () {\n                    const nextToken = this.LA(1);\n                    return choiceToAlt[nextToken.tokenTypeIdx];\n                };\n            }\n        }\n        else if (hasPredicates) {\n            return function (orAlts) {\n                const predicates = new PredicateSet();\n                const length = orAlts === undefined ? 0 : orAlts.length;\n                for (let i = 0; i < length; i++) {\n                    const gate = orAlts === null || orAlts === void 0 ? void 0 : orAlts[i].GATE;\n                    predicates.set(i, gate === undefined || gate.call(this));\n                }\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\n                return typeof result === 'number' ? result : undefined;\n            };\n        }\n        else {\n            return function () {\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\n                return typeof result === 'number' ? result : undefined;\n            };\n        }\n    }\n    buildLookaheadForOptional(options) {\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\n        const dfas = this.dfas;\n        const logging = this.logging;\n        const key = buildATNKey(rule, prodType, prodOccurrence);\n        const decisionState = this.atn.decisionMap[key];\n        const decisionIndex = decisionState.decision;\n        const alts = map(getLookaheadPaths({\n            maxLookahead: 1,\n            occurrence: prodOccurrence,\n            prodType,\n            rule\n        }), (e) => {\n            return map(e, (g) => g[0]);\n        });\n        if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\n            const alt = alts[0];\n            const singleTokensTypes = flatten(alt);\n            if (singleTokensTypes.length === 1 &&\n                isEmpty(singleTokensTypes[0].categoryMatches)) {\n                const expectedTokenType = singleTokensTypes[0];\n                const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n                return function () {\n                    return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n                };\n            }\n            else {\n                const choiceToAlt = reduce(singleTokensTypes, (result, currTokType) => {\n                    if (currTokType !== undefined) {\n                        result[currTokType.tokenTypeIdx] = true;\n                        forEach(currTokType.categoryMatches, (currExtendingType) => {\n                            result[currExtendingType] = true;\n                        });\n                    }\n                    return result;\n                }, {});\n                return function () {\n                    const nextToken = this.LA(1);\n                    return choiceToAlt[nextToken.tokenTypeIdx] === true;\n                };\n            }\n        }\n        return function () {\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\n            return typeof result === \"object\" ? false : result === 0;\n        };\n    }\n}\nfunction isLL1Sequence(sequences, allowEmpty = true) {\n    const fullSet = new Set();\n    for (const alt of sequences) {\n        const altSet = new Set();\n        for (const tokType of alt) {\n            if (tokType === undefined) {\n                if (allowEmpty) {\n                    // Epsilon production encountered\n                    break;\n                }\n                else {\n                    return false;\n                }\n            }\n            const indices = [tokType.tokenTypeIdx].concat(tokType.categoryMatches);\n            for (const index of indices) {\n                if (fullSet.has(index)) {\n                    if (!altSet.has(index)) {\n                        return false;\n                    }\n                }\n                else {\n                    fullSet.add(index);\n                    altSet.add(index);\n                }\n            }\n        }\n    }\n    return true;\n}\nfunction initATNSimulator(atn) {\n    const decisionLength = atn.decisionStates.length;\n    const decisionToDFA = Array(decisionLength);\n    for (let i = 0; i < decisionLength; i++) {\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i);\n    }\n    return decisionToDFA;\n}\nfunction adaptivePredict(dfaCaches, decision, predicateSet, logging) {\n    const dfa = dfaCaches[decision](predicateSet);\n    let start = dfa.start;\n    if (start === undefined) {\n        const closure = computeStartState(dfa.atnStartState);\n        start = addDFAState(dfa, newDFAState(closure));\n        dfa.start = start;\n    }\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging]);\n    return alt;\n}\nfunction performLookahead(dfa, s0, predicateSet, logging) {\n    let previousD = s0;\n    let i = 1;\n    const path = [];\n    let t = this.LA(i++);\n    while (true) {\n        let d = getExistingTargetState(previousD, t);\n        if (d === undefined) {\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging]);\n        }\n        if (d === DFA_ERROR) {\n            return buildAdaptivePredictError(path, previousD, t);\n        }\n        if (d.isAcceptState === true) {\n            return d.prediction;\n        }\n        previousD = d;\n        path.push(t);\n        t = this.LA(i++);\n    }\n}\nfunction computeLookaheadTarget(dfa, previousD, token, lookahead, predicateSet, logging) {\n    const reach = computeReachSet(previousD.configs, token, predicateSet);\n    if (reach.size === 0) {\n        addDFAEdge(dfa, previousD, token, DFA_ERROR);\n        return DFA_ERROR;\n    }\n    let newState = newDFAState(reach);\n    const predictedAlt = getUniqueAlt(reach, predicateSet);\n    if (predictedAlt !== undefined) {\n        newState.isAcceptState = true;\n        newState.prediction = predictedAlt;\n        newState.configs.uniqueAlt = predictedAlt;\n    }\n    else if (hasConflictTerminatingPrediction(reach)) {\n        const prediction = min(reach.alts);\n        newState.isAcceptState = true;\n        newState.prediction = prediction;\n        newState.configs.uniqueAlt = prediction;\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging]);\n    }\n    newState = addDFAEdge(dfa, previousD, token, newState);\n    return newState;\n}\nfunction reportLookaheadAmbiguity(dfa, lookahead, ambiguityIndices, logging) {\n    const prefixPath = [];\n    for (let i = 1; i <= lookahead; i++) {\n        prefixPath.push(this.LA(i).tokenType);\n    }\n    const atnState = dfa.atnStartState;\n    const topLevelRule = atnState.rule;\n    const production = atnState.production;\n    const message = buildAmbiguityError({\n        topLevelRule,\n        ambiguityIndices,\n        production,\n        prefixPath\n    });\n    logging(message);\n}\nfunction buildAmbiguityError(options) {\n    const pathMsg = map(options.prefixPath, (currtok) => tokenLabel(currtok)).join(\", \");\n    const occurrence = options.production.idx === 0 ? \"\" : options.production.idx;\n    let currMessage = `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\", \")}> in <${getProductionDslName(options.production)}${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n    currMessage =\n        currMessage +\n            `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n            `For Further details.`;\n    return currMessage;\n}\nfunction getProductionDslName(prod) {\n    if (prod instanceof NonTerminal) {\n        return \"SUBRULE\";\n    }\n    else if (prod instanceof Option) {\n        return \"OPTION\";\n    }\n    else if (prod instanceof Alternation) {\n        return \"OR\";\n    }\n    else if (prod instanceof RepetitionMandatory) {\n        return \"AT_LEAST_ONE\";\n    }\n    else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        return \"AT_LEAST_ONE_SEP\";\n    }\n    else if (prod instanceof RepetitionWithSeparator) {\n        return \"MANY_SEP\";\n    }\n    else if (prod instanceof Repetition) {\n        return \"MANY\";\n    }\n    else if (prod instanceof Terminal) {\n        return \"CONSUME\";\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction buildAdaptivePredictError(path, previous, current) {\n    const nextTransitions = flatMap(previous.configs.elements, (e) => e.state.transitions);\n    const nextTokenTypes = uniqBy(nextTransitions\n        .filter((e) => e instanceof AtomTransition)\n        .map((e) => e.tokenType), (e) => e.tokenTypeIdx);\n    return {\n        actualToken: current,\n        possibleTokenTypes: nextTokenTypes,\n        tokenPath: path\n    };\n}\nfunction getExistingTargetState(state, token) {\n    return state.edges[token.tokenTypeIdx];\n}\nfunction computeReachSet(configs, token, predicateSet) {\n    const intermediate = new ATNConfigSet();\n    const skippedStopStates = [];\n    for (const c of configs.elements) {\n        if (predicateSet.is(c.alt) === false) {\n            continue;\n        }\n        if (c.state.type === ATN_RULE_STOP) {\n            skippedStopStates.push(c);\n            continue;\n        }\n        const transitionLength = c.state.transitions.length;\n        for (let i = 0; i < transitionLength; i++) {\n            const transition = c.state.transitions[i];\n            const target = getReachableTarget(transition, token);\n            if (target !== undefined) {\n                intermediate.add({\n                    state: target,\n                    alt: c.alt,\n                    stack: c.stack\n                });\n            }\n        }\n    }\n    let reach;\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\n        reach = intermediate;\n    }\n    if (reach === undefined) {\n        reach = new ATNConfigSet();\n        for (const c of intermediate.elements) {\n            closure(c, reach);\n        }\n    }\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\n        for (const c of skippedStopStates) {\n            reach.add(c);\n        }\n    }\n    return reach;\n}\nfunction getReachableTarget(transition, token) {\n    if (transition instanceof AtomTransition &&\n        tokenMatcher(token, transition.tokenType)) {\n        return transition.target;\n    }\n    return undefined;\n}\nfunction getUniqueAlt(configs, predicateSet) {\n    let alt;\n    for (const c of configs.elements) {\n        if (predicateSet.is(c.alt) === true) {\n            if (alt === undefined) {\n                alt = c.alt;\n            }\n            else if (alt !== c.alt) {\n                return undefined;\n            }\n        }\n    }\n    return alt;\n}\nfunction newDFAState(closure) {\n    return {\n        configs: closure,\n        edges: {},\n        isAcceptState: false,\n        prediction: -1\n    };\n}\nfunction addDFAEdge(dfa, from, token, to) {\n    to = addDFAState(dfa, to);\n    from.edges[token.tokenTypeIdx] = to;\n    return to;\n}\nfunction addDFAState(dfa, state) {\n    if (state === DFA_ERROR) {\n        return state;\n    }\n    // Repetitions have the same config set\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\n    const mapKey = state.configs.key;\n    const existing = dfa.states[mapKey];\n    if (existing !== undefined) {\n        return existing;\n    }\n    state.configs.finalize();\n    dfa.states[mapKey] = state;\n    return state;\n}\nfunction computeStartState(atnState) {\n    const configs = new ATNConfigSet();\n    const numberOfTransitions = atnState.transitions.length;\n    for (let i = 0; i < numberOfTransitions; i++) {\n        const target = atnState.transitions[i].target;\n        const config = {\n            state: target,\n            alt: i,\n            stack: []\n        };\n        closure(config, configs);\n    }\n    return configs;\n}\nfunction closure(config, configs) {\n    const p = config.state;\n    if (p.type === ATN_RULE_STOP) {\n        if (config.stack.length > 0) {\n            const atnStack = [...config.stack];\n            const followState = atnStack.pop();\n            const followConfig = {\n                state: followState,\n                alt: config.alt,\n                stack: atnStack\n            };\n            closure(followConfig, configs);\n        }\n        else {\n            // Dipping into outer context, simply add the config\n            // This will stop computation once every config is at the rule stop state\n            configs.add(config);\n        }\n        return;\n    }\n    if (!p.epsilonOnlyTransitions) {\n        configs.add(config);\n    }\n    const transitionLength = p.transitions.length;\n    for (let i = 0; i < transitionLength; i++) {\n        const transition = p.transitions[i];\n        const c = getEpsilonTarget(config, transition);\n        if (c !== undefined) {\n            closure(c, configs);\n        }\n    }\n}\nfunction getEpsilonTarget(config, transition) {\n    if (transition instanceof EpsilonTransition) {\n        return {\n            state: transition.target,\n            alt: config.alt,\n            stack: config.stack\n        };\n    }\n    else if (transition instanceof RuleTransition) {\n        const stack = [...config.stack, transition.followState];\n        return {\n            state: transition.target,\n            alt: config.alt,\n            stack\n        };\n    }\n    return undefined;\n}\nfunction hasConfigInRuleStopState(configs) {\n    for (const c of configs.elements) {\n        if (c.state.type === ATN_RULE_STOP) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction allConfigsInRuleStopStates(configs) {\n    for (const c of configs.elements) {\n        if (c.state.type !== ATN_RULE_STOP) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction hasConflictTerminatingPrediction(configs) {\n    if (allConfigsInRuleStopStates(configs)) {\n        return true;\n    }\n    const altSets = getConflictingAltSets(configs.elements);\n    const heuristic = hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets);\n    return heuristic;\n}\nfunction getConflictingAltSets(configs) {\n    const configToAlts = new Map();\n    for (const c of configs) {\n        const key = getATNConfigKey(c, false);\n        let alts = configToAlts.get(key);\n        if (alts === undefined) {\n            alts = {};\n            configToAlts.set(key, alts);\n        }\n        alts[c.alt] = true;\n    }\n    return configToAlts;\n}\nfunction hasConflictingAltSet(altSets) {\n    for (const value of Array.from(altSets.values())) {\n        if (Object.keys(value).length > 1) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction hasStateAssociatedWithOneAlt(altSets) {\n    for (const value of Array.from(altSets.values())) {\n        if (Object.keys(value).length === 1) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=all-star-lookahead.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport { LLStarLookaheadStrategy } from './all-star-lookahead.js';\n//# sourceMappingURL=index.js.map","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Position } from 'vscode-languageserver-types';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\nexport class CstNodeBuilder {\n    constructor() {\n        this.nodeStack = [];\n    }\n    get current() {\n        return this.nodeStack[this.nodeStack.length - 1];\n    }\n    buildRootNode(input) {\n        this.rootNode = new RootCstNodeImpl(input);\n        this.rootNode.root = this.rootNode;\n        this.nodeStack = [this.rootNode];\n        return this.rootNode;\n    }\n    buildCompositeNode(feature) {\n        const compositeNode = new CompositeCstNodeImpl();\n        compositeNode.grammarSource = feature;\n        compositeNode.root = this.rootNode;\n        this.current.content.push(compositeNode);\n        this.nodeStack.push(compositeNode);\n        return compositeNode;\n    }\n    buildLeafNode(token, feature) {\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, false);\n        leafNode.grammarSource = feature;\n        leafNode.root = this.rootNode;\n        this.current.content.push(leafNode);\n        return leafNode;\n    }\n    removeNode(node) {\n        const parent = node.container;\n        if (parent) {\n            const index = parent.content.indexOf(node);\n            if (index >= 0) {\n                parent.content.splice(index, 1);\n            }\n        }\n    }\n    construct(item) {\n        const current = this.current;\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\n        // Only if the $type is a string, we actually assign the element\n        if (typeof item.$type === 'string') {\n            this.current.astNode = item;\n        }\n        item.$cstNode = current;\n        const node = this.nodeStack.pop();\n        // Empty composite nodes are not valid\n        // Simply remove the node from the tree\n        if ((node === null || node === void 0 ? void 0 : node.content.length) === 0) {\n            this.removeNode(node);\n        }\n    }\n    addHiddenTokens(hiddenTokens) {\n        for (const token of hiddenTokens) {\n            const hiddenNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\n            hiddenNode.root = this.rootNode;\n            this.addHiddenToken(this.rootNode, hiddenNode);\n        }\n    }\n    addHiddenToken(node, token) {\n        const { offset: tokenStart, end: tokenEnd } = token;\n        for (let i = 0; i < node.content.length; i++) {\n            const child = node.content[i];\n            const { offset: childStart, end: childEnd } = child;\n            if (isCompositeCstNode(child) && tokenStart > childStart && tokenEnd < childEnd) {\n                this.addHiddenToken(child, token);\n                return;\n            }\n            else if (tokenEnd <= childStart) {\n                node.content.splice(i, 0, token);\n                return;\n            }\n        }\n        // We know that we haven't found a suited position for the token\n        // So we simply add it to the end of the current node\n        node.content.push(token);\n    }\n}\nexport class AbstractCstNode {\n    /** @deprecated use `container` instead. */\n    get parent() {\n        return this.container;\n    }\n    /** @deprecated use `grammarSource` instead. */\n    get feature() {\n        return this.grammarSource;\n    }\n    get hidden() {\n        return false;\n    }\n    get astNode() {\n        var _a, _b;\n        const node = typeof ((_a = this._astNode) === null || _a === void 0 ? void 0 : _a.$type) === 'string' ? this._astNode : (_b = this.container) === null || _b === void 0 ? void 0 : _b.astNode;\n        if (!node) {\n            throw new Error('This node has no associated AST element');\n        }\n        return node;\n    }\n    set astNode(value) {\n        this._astNode = value;\n    }\n    /** @deprecated use `astNode` instead. */\n    get element() {\n        return this.astNode;\n    }\n    get text() {\n        return this.root.fullText.substring(this.offset, this.end);\n    }\n}\nexport class LeafCstNodeImpl extends AbstractCstNode {\n    get offset() {\n        return this._offset;\n    }\n    get length() {\n        return this._length;\n    }\n    get end() {\n        return this._offset + this._length;\n    }\n    get hidden() {\n        return this._hidden;\n    }\n    get tokenType() {\n        return this._tokenType;\n    }\n    get range() {\n        return this._range;\n    }\n    constructor(offset, length, range, tokenType, hidden = false) {\n        super();\n        this._hidden = hidden;\n        this._offset = offset;\n        this._tokenType = tokenType;\n        this._length = length;\n        this._range = range;\n    }\n}\nexport class CompositeCstNodeImpl extends AbstractCstNode {\n    constructor() {\n        super(...arguments);\n        this.content = new CstNodeContainer(this);\n    }\n    /** @deprecated use `content` instead. */\n    get children() {\n        return this.content;\n    }\n    get offset() {\n        var _a, _b;\n        return (_b = (_a = this.firstNonHiddenNode) === null || _a === void 0 ? void 0 : _a.offset) !== null && _b !== void 0 ? _b : 0;\n    }\n    get length() {\n        return this.end - this.offset;\n    }\n    get end() {\n        var _a, _b;\n        return (_b = (_a = this.lastNonHiddenNode) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : 0;\n    }\n    get range() {\n        const firstNode = this.firstNonHiddenNode;\n        const lastNode = this.lastNonHiddenNode;\n        if (firstNode && lastNode) {\n            if (this._rangeCache === undefined) {\n                const { range: firstRange } = firstNode;\n                const { range: lastRange } = lastNode;\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\n            }\n            return this._rangeCache;\n        }\n        else {\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\n        }\n    }\n    get firstNonHiddenNode() {\n        for (const child of this.content) {\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[0];\n    }\n    get lastNonHiddenNode() {\n        for (let i = this.content.length - 1; i >= 0; i--) {\n            const child = this.content[i];\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[this.content.length - 1];\n    }\n}\nclass CstNodeContainer extends Array {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\n    }\n    push(...items) {\n        this.addParents(items);\n        return super.push(...items);\n    }\n    unshift(...items) {\n        this.addParents(items);\n        return super.unshift(...items);\n    }\n    splice(start, count, ...items) {\n        this.addParents(items);\n        return super.splice(start, count, ...items);\n    }\n    addParents(items) {\n        for (const item of items) {\n            item.container = this.parent;\n        }\n    }\n}\nexport class RootCstNodeImpl extends CompositeCstNodeImpl {\n    get text() {\n        return this._text.substring(this.offset, this.end);\n    }\n    get fullText() {\n        return this._text;\n    }\n    constructor(input) {\n        super();\n        this._text = '';\n        this._text = input !== null && input !== void 0 ? input : '';\n    }\n}\n//# sourceMappingURL=cst-node-builder.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\nimport { getTypeName, isDataTypeRule } from '../utils/grammar-utils.js';\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\nimport { CstNodeBuilder } from './cst-node-builder.js';\nexport const DatatypeSymbol = Symbol('Datatype');\nfunction isDataTypeNode(node) {\n    return node.$type === DatatypeSymbol;\n}\nconst ruleSuffix = '\\u200B';\nconst withRuleSuffix = (name) => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\nexport class AbstractLangiumParser {\n    constructor(services) {\n        this._unorderedGroups = new Map();\n        this.lexer = services.parser.Lexer;\n        const tokens = this.lexer.definition;\n        this.wrapper = new ChevrotainWrapper(tokens, Object.assign(Object.assign({}, services.parser.ParserConfig), { errorMessageProvider: services.parser.ParserErrorMessageProvider }));\n    }\n    alternatives(idx, choices) {\n        this.wrapper.wrapOr(idx, choices);\n    }\n    optional(idx, callback) {\n        this.wrapper.wrapOption(idx, callback);\n    }\n    many(idx, callback) {\n        this.wrapper.wrapMany(idx, callback);\n    }\n    atLeastOne(idx, callback) {\n        this.wrapper.wrapAtLeastOne(idx, callback);\n    }\n    isRecording() {\n        return this.wrapper.IS_RECORDING;\n    }\n    get unorderedGroups() {\n        return this._unorderedGroups;\n    }\n    getRuleStack() {\n        return this.wrapper.RULE_STACK;\n    }\n    finalize() {\n        this.wrapper.wrapSelfAnalysis();\n    }\n}\nexport class LangiumParser extends AbstractLangiumParser {\n    get current() {\n        return this.stack[this.stack.length - 1];\n    }\n    constructor(services) {\n        super(services);\n        this.nodeBuilder = new CstNodeBuilder();\n        this.stack = [];\n        this.assignmentMap = new Map();\n        this.linker = services.references.Linker;\n        this.converter = services.parser.ValueConverter;\n        this.astReflection = services.shared.AstReflection;\n    }\n    rule(rule, impl) {\n        const type = rule.fragment ? undefined : isDataTypeRule(rule) ? DatatypeSymbol : getTypeName(rule);\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    parse(input) {\n        this.nodeBuilder.buildRootNode(input);\n        const lexerResult = this.lexer.tokenize(input);\n        this.wrapper.input = lexerResult.tokens;\n        const result = this.mainRule.call(this.wrapper, {});\n        this.nodeBuilder.addHiddenTokens(lexerResult.hidden);\n        this.unorderedGroups.clear();\n        return {\n            value: result,\n            lexerErrors: lexerResult.errors,\n            parserErrors: this.wrapper.errors\n        };\n    }\n    startImplementation($type, implementation) {\n        return (args) => {\n            if (!this.isRecording()) {\n                const node = { $type };\n                this.stack.push(node);\n                if ($type === DatatypeSymbol) {\n                    node.value = '';\n                }\n            }\n            let result;\n            try {\n                result = implementation(args);\n            }\n            catch (err) {\n                result = undefined;\n            }\n            if (!this.isRecording() && result === undefined) {\n                result = this.construct();\n            }\n            return result;\n        };\n    }\n    consume(idx, tokenType, feature) {\n        const token = this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording() && this.isValidToken(token)) {\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\n            const { assignment, isCrossRef } = this.getAssignment(feature);\n            const current = this.current;\n            if (assignment) {\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\n            }\n            else if (isDataTypeNode(current)) {\n                let text = token.image;\n                if (!isKeyword(feature)) {\n                    text = this.converter.convert(text, leafNode).toString();\n                }\n                current.value += text;\n            }\n        }\n    }\n    /**\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\n     *\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\n     */\n    isValidToken(token) {\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\n    }\n    subrule(idx, rule, feature, args) {\n        let cstNode;\n        if (!this.isRecording()) {\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\n        }\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args);\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\n        }\n    }\n    performSubruleAssignment(result, feature, cstNode) {\n        const { assignment, isCrossRef } = this.getAssignment(feature);\n        if (assignment) {\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\n        }\n        else if (!assignment) {\n            // If we call a subrule without an assignment we either:\n            // 1. append the result of the subrule (data type rule)\n            // 2. override the current object with the newly parsed object\n            // If the current element is an AST node and the result of the subrule\n            // is a data type rule, we can safely discard the results.\n            const current = this.current;\n            if (isDataTypeNode(current)) {\n                current.value += result.toString();\n            }\n            else if (typeof result === 'object' && result) {\n                const resultKind = result.$type;\n                const object = this.assignWithoutOverride(result, current);\n                if (resultKind) {\n                    object.$type = resultKind;\n                }\n                const newItem = object;\n                this.stack.pop();\n                this.stack.push(newItem);\n            }\n        }\n    }\n    action($type, action) {\n        if (!this.isRecording()) {\n            let last = this.current;\n            // This branch is used for left recursive grammar rules.\n            // Those don't call `construct` before another action.\n            // Therefore, we need to call it here.\n            if (!last.$cstNode && action.feature && action.operator) {\n                last = this.construct(false);\n                const feature = last.$cstNode.feature;\n                this.nodeBuilder.buildCompositeNode(feature);\n            }\n            const newItem = { $type };\n            this.stack.pop();\n            this.stack.push(newItem);\n            if (action.feature && action.operator) {\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\n            }\n        }\n    }\n    construct(pop = true) {\n        if (this.isRecording()) {\n            return undefined;\n        }\n        const obj = this.current;\n        linkContentToContainer(obj);\n        this.nodeBuilder.construct(obj);\n        if (pop) {\n            this.stack.pop();\n        }\n        if (isDataTypeNode(obj)) {\n            return this.converter.convert(obj.value, obj.$cstNode);\n        }\n        else {\n            assignMandatoryProperties(this.astReflection, obj);\n        }\n        return obj;\n    }\n    getAssignment(feature) {\n        if (!this.assignmentMap.has(feature)) {\n            const assignment = getContainerOfType(feature, isAssignment);\n            this.assignmentMap.set(feature, {\n                assignment: assignment,\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\n            });\n        }\n        return this.assignmentMap.get(feature);\n    }\n    assign(operator, feature, value, cstNode, isCrossRef) {\n        const obj = this.current;\n        let item;\n        if (isCrossRef && typeof value === 'string') {\n            item = this.linker.buildReference(obj, feature, cstNode, value);\n        }\n        else {\n            item = value;\n        }\n        switch (operator) {\n            case '=': {\n                obj[feature] = item;\n                break;\n            }\n            case '?=': {\n                obj[feature] = true;\n                break;\n            }\n            case '+=': {\n                if (!Array.isArray(obj[feature])) {\n                    obj[feature] = [];\n                }\n                obj[feature].push(item);\n            }\n        }\n    }\n    assignWithoutOverride(target, source) {\n        for (const [name, existingValue] of Object.entries(source)) {\n            const newValue = target[name];\n            if (newValue === undefined) {\n                target[name] = existingValue;\n            }\n            else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\n                existingValue.push(...newValue);\n                target[name] = existingValue;\n            }\n        }\n        return target;\n    }\n    get definitionErrors() {\n        return this.wrapper.definitionErrors;\n    }\n}\nexport class AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage(options) {\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\n    }\n    buildNotAllInputParsedMessage(options) {\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\n    }\n    buildNoViableAltMessage(options) {\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\n    }\n    buildEarlyExitMessage(options) {\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\n    }\n}\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage({ expected, actual }) {\n        const expectedMsg = expected.LABEL\n            ? '`' + expected.LABEL + '`'\n            : expected.name.endsWith(':KW')\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\n                : `token of type '${expected.name}'`;\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\n    }\n    buildNotAllInputParsedMessage({ firstRedundant }) {\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\n    }\n}\nexport class LangiumCompletionParser extends AbstractLangiumParser {\n    constructor() {\n        super(...arguments);\n        this.tokens = [];\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    action() {\n        // NOOP\n    }\n    construct() {\n        // NOOP\n        return undefined;\n    }\n    parse(input) {\n        this.resetState();\n        const tokens = this.lexer.tokenize(input);\n        this.tokens = tokens.tokens;\n        this.wrapper.input = [...this.tokens];\n        this.mainRule.call(this.wrapper, {});\n        this.unorderedGroups.clear();\n        return {\n            tokens: this.tokens,\n            elementStack: [...this.lastElementStack],\n            tokenIndex: this.nextTokenIndex\n        };\n    }\n    rule(rule, impl) {\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    resetState() {\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    startImplementation(implementation) {\n        return (args) => {\n            const size = this.keepStackSize();\n            try {\n                implementation(args);\n            }\n            finally {\n                this.resetStackSize(size);\n            }\n        };\n    }\n    removeUnexpectedElements() {\n        this.elementStack.splice(this.stackSize);\n    }\n    keepStackSize() {\n        const size = this.elementStack.length;\n        this.stackSize = size;\n        return size;\n    }\n    resetStackSize(size) {\n        this.removeUnexpectedElements();\n        this.stackSize = size;\n    }\n    consume(idx, tokenType, feature) {\n        this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording()) {\n            this.lastElementStack = [...this.elementStack, feature];\n            this.nextTokenIndex = this.currIdx + 1;\n        }\n    }\n    subrule(idx, rule, feature, args) {\n        this.before(feature);\n        this.wrapper.wrapSubrule(idx, rule, args);\n        this.after(feature);\n    }\n    before(element) {\n        if (!this.isRecording()) {\n            this.elementStack.push(element);\n        }\n    }\n    after(element) {\n        if (!this.isRecording()) {\n            const index = this.elementStack.lastIndexOf(element);\n            if (index >= 0) {\n                this.elementStack.splice(index);\n            }\n        }\n    }\n    get currIdx() {\n        return this.wrapper.currIdx;\n    }\n}\nconst defaultConfig = {\n    recoveryEnabled: true,\n    nodeLocationTracking: 'full',\n    skipValidations: true,\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\n};\n/**\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\n * This way, we can build the `LangiumParser` as a composition.\n */\nclass ChevrotainWrapper extends EmbeddedActionsParser {\n    constructor(tokens, config) {\n        const useDefaultLookahead = config && 'maxLookahead' in config;\n        super(tokens, Object.assign(Object.assign(Object.assign({}, defaultConfig), { lookaheadStrategy: useDefaultLookahead\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\n                : new LLStarLookaheadStrategy() }), config));\n    }\n    get IS_RECORDING() {\n        return this.RECORDING_PHASE;\n    }\n    DEFINE_RULE(name, impl) {\n        return this.RULE(name, impl);\n    }\n    wrapSelfAnalysis() {\n        this.performSelfAnalysis();\n    }\n    wrapConsume(idx, tokenType) {\n        return this.consume(idx, tokenType);\n    }\n    wrapSubrule(idx, rule, args) {\n        return this.subrule(idx, rule, {\n            ARGS: [args]\n        });\n    }\n    wrapOr(idx, choices) {\n        this.or(idx, choices);\n    }\n    wrapOption(idx, callback) {\n        this.option(idx, callback);\n    }\n    wrapMany(idx, callback) {\n        this.many(idx, callback);\n    }\n    wrapAtLeastOne(idx, callback) {\n        this.atLeastOne(idx, callback);\n    }\n}\n//# sourceMappingURL=langium-parser.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { EMPTY_ALT, EOF } from 'chevrotain';\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\nimport { stream } from '../utils/stream.js';\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\nexport function createParser(grammar, parser, tokens) {\n    const rules = new Map();\n    const parserContext = {\n        parser,\n        tokens,\n        rules,\n        ruleNames: new Map()\n    };\n    buildRules(parserContext, grammar);\n    return parser;\n}\nfunction buildRules(parserContext, grammar) {\n    const reachable = getAllReachableRules(grammar, false);\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\n    for (const rule of parserRules) {\n        const ctx = Object.assign(Object.assign({}, parserContext), { consume: 1, optional: 1, subrule: 1, many: 1, or: 1 });\n        ctx.rules.set(rule.name, parserContext.parser.rule(rule, buildElement(ctx, rule.definition)));\n    }\n}\nfunction buildElement(ctx, element, ignoreGuard = false) {\n    let method;\n    if (isKeyword(element)) {\n        method = buildKeyword(ctx, element);\n    }\n    else if (isAction(element)) {\n        method = buildAction(ctx, element);\n    }\n    else if (isAssignment(element)) {\n        method = buildElement(ctx, element.terminal);\n    }\n    else if (isCrossReference(element)) {\n        method = buildCrossReference(ctx, element);\n    }\n    else if (isRuleCall(element)) {\n        method = buildRuleCall(ctx, element);\n    }\n    else if (isAlternatives(element)) {\n        method = buildAlternatives(ctx, element);\n    }\n    else if (isUnorderedGroup(element)) {\n        method = buildUnorderedGroup(ctx, element);\n    }\n    else if (isGroup(element)) {\n        method = buildGroup(ctx, element);\n    }\n    else if (isEndOfFile(element)) {\n        const idx = ctx.consume++;\n        method = () => ctx.parser.consume(idx, EOF, element);\n    }\n    else {\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\n    }\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\n}\nfunction buildAction(ctx, action) {\n    const actionType = getTypeName(action);\n    return () => ctx.parser.action(actionType, action);\n}\nfunction buildRuleCall(ctx, ruleCall) {\n    const rule = ruleCall.rule.ref;\n    if (isParserRule(rule)) {\n        const idx = ctx.subrule++;\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), ruleCall, predicate(args));\n    }\n    else if (isTerminalRule(rule)) {\n        const idx = ctx.consume++;\n        const method = getToken(ctx, rule.name);\n        return () => ctx.parser.consume(idx, method, ruleCall);\n    }\n    else if (!rule) {\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule type: ${ruleCall.$type}`);\n    }\n    else {\n        assertUnreachable(rule);\n    }\n}\nfunction buildRuleCallPredicate(rule, namedArgs) {\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\n    return (args) => {\n        const ruleArgs = {};\n        for (let i = 0; i < predicates.length; i++) {\n            const ruleTarget = rule.parameters[i];\n            const predicate = predicates[i];\n            ruleArgs[ruleTarget.name] = predicate(args);\n        }\n        return ruleArgs;\n    };\n}\nfunction buildPredicate(condition) {\n    if (isDisjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) || right(args));\n    }\n    else if (isConjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) && right(args));\n    }\n    else if (isNegation(condition)) {\n        const value = buildPredicate(condition.value);\n        return (args) => !value(args);\n    }\n    else if (isParameterReference(condition)) {\n        const name = condition.parameter.ref.name;\n        return (args) => args !== undefined && args[name] === true;\n    }\n    else if (isBooleanLiteral(condition)) {\n        const value = Boolean(condition.true);\n        return () => value;\n    }\n    assertUnreachable(condition);\n}\nfunction buildAlternatives(ctx, alternatives) {\n    if (alternatives.elements.length === 1) {\n        return buildElement(ctx, alternatives.elements[0]);\n    }\n    else {\n        const methods = [];\n        for (const element of alternatives.elements) {\n            const predicatedMethod = {\n                // Since we handle the guard condition in the alternative already\n                // We can ignore the group guard condition inside\n                ALT: buildElement(ctx, element, true)\n            };\n            const guard = getGuardCondition(element);\n            if (guard) {\n                predicatedMethod.GATE = buildPredicate(guard);\n            }\n            methods.push(predicatedMethod);\n        }\n        const idx = ctx.or++;\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\n            const alt = {\n                ALT: () => method.ALT(args)\n            };\n            const gate = method.GATE;\n            if (gate) {\n                alt.GATE = () => gate(args);\n            }\n            return alt;\n        }));\n    }\n}\nfunction buildUnorderedGroup(ctx, group) {\n    if (group.elements.length === 1) {\n        return buildElement(ctx, group.elements[0]);\n    }\n    const methods = [];\n    for (const element of group.elements) {\n        const predicatedMethod = {\n            // Since we handle the guard condition in the alternative already\n            // We can ignore the group guard condition inside\n            ALT: buildElement(ctx, element, true)\n        };\n        const guard = getGuardCondition(element);\n        if (guard) {\n            predicatedMethod.GATE = buildPredicate(guard);\n        }\n        methods.push(predicatedMethod);\n    }\n    const orIdx = ctx.or++;\n    const idFunc = (groupIdx, lParser) => {\n        const stackId = lParser.getRuleStack().join('-');\n        return `uGroup_${groupIdx}_${stackId}`;\n    };\n    const alternatives = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\n        const alt = { ALT: () => true };\n        const parser = ctx.parser;\n        alt.ALT = () => {\n            method.ALT(args);\n            if (!parser.isRecording()) {\n                const key = idFunc(orIdx, parser);\n                if (!parser.unorderedGroups.get(key)) {\n                    // init after clear state\n                    parser.unorderedGroups.set(key, []);\n                }\n                const groupState = parser.unorderedGroups.get(key);\n                if (typeof (groupState === null || groupState === void 0 ? void 0 : groupState[idx]) === 'undefined') {\n                    // Not accessed yet\n                    groupState[idx] = true;\n                }\n            }\n        };\n        const gate = method.GATE;\n        if (gate) {\n            alt.GATE = () => gate(args);\n        }\n        else {\n            alt.GATE = () => {\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\n                const allow = !(trackedAlternatives === null || trackedAlternatives === void 0 ? void 0 : trackedAlternatives[idx]);\n                return allow;\n            };\n        }\n        return alt;\n    }));\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\n    return (args) => {\n        wrapped(args);\n        if (!ctx.parser.isRecording()) {\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\n        }\n    };\n}\nfunction buildGroup(ctx, group) {\n    const methods = group.elements.map(e => buildElement(ctx, e));\n    return (args) => methods.forEach(method => method(args));\n}\nfunction getGuardCondition(element) {\n    if (isGroup(element)) {\n        return element.guardCondition;\n    }\n    return undefined;\n}\nfunction buildCrossReference(ctx, crossRef, terminal = crossRef.terminal) {\n    if (!terminal) {\n        if (!crossRef.type.ref) {\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\n        }\n        const assignment = findNameAssignment(crossRef.type.ref);\n        const assignTerminal = assignment === null || assignment === void 0 ? void 0 : assignment.terminal;\n        if (!assignTerminal) {\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\n        }\n        return buildCrossReference(ctx, crossRef, assignTerminal);\n    }\n    else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\n        const idx = ctx.subrule++;\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, terminal.rule.ref), crossRef, args);\n    }\n    else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\n        const idx = ctx.consume++;\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\n    }\n    else if (isKeyword(terminal)) {\n        const idx = ctx.consume++;\n        const keyword = getToken(ctx, terminal.value);\n        return () => ctx.parser.consume(idx, keyword, crossRef);\n    }\n    else {\n        throw new Error('Could not build cross reference parser');\n    }\n}\nfunction buildKeyword(ctx, keyword) {\n    const idx = ctx.consume++;\n    const token = ctx.tokens[keyword.value];\n    if (!token) {\n        throw new Error('Could not find token for keyword: ' + keyword.value);\n    }\n    return () => ctx.parser.consume(idx, token, keyword);\n}\nfunction wrap(ctx, guard, method, cardinality) {\n    const gate = guard && buildPredicate(guard);\n    if (!cardinality) {\n        if (gate) {\n            const idx = ctx.or++;\n            return (args) => ctx.parser.alternatives(idx, [\n                {\n                    ALT: () => method(args),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        }\n        else {\n            return method;\n        }\n    }\n    if (cardinality === '*') {\n        const idx = ctx.many++;\n        return (args) => ctx.parser.many(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    }\n    else if (cardinality === '+') {\n        const idx = ctx.many++;\n        if (gate) {\n            const orIdx = ctx.or++;\n            // In the case of a guard condition for the `+` group\n            // We combine it with an empty alternative\n            // If the condition returns true, it needs to parse at least a single iteration\n            // If its false, it is not allowed to parse anything\n            return (args) => ctx.parser.alternatives(orIdx, [\n                {\n                    ALT: () => ctx.parser.atLeastOne(idx, {\n                        DEF: () => method(args)\n                    }),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        }\n        else {\n            return (args) => ctx.parser.atLeastOne(idx, {\n                DEF: () => method(args),\n            });\n        }\n    }\n    else if (cardinality === '?') {\n        const idx = ctx.optional++;\n        return (args) => ctx.parser.optional(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    }\n    else {\n        assertUnreachable(cardinality);\n    }\n}\nfunction getRule(ctx, element) {\n    const name = getRuleName(ctx, element);\n    const rule = ctx.rules.get(name);\n    if (!rule)\n        throw new Error(`Rule \"${name}\" not found.\"`);\n    return rule;\n}\nfunction getRuleName(ctx, element) {\n    if (isParserRule(element)) {\n        return element.name;\n    }\n    else if (ctx.ruleNames.has(element)) {\n        return ctx.ruleNames.get(element);\n    }\n    else {\n        let item = element;\n        let parent = item.$container;\n        let ruleName = element.$type;\n        while (!isParserRule(parent)) {\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\n                const index = parent.elements.indexOf(item);\n                ruleName = index.toString() + ':' + ruleName;\n            }\n            item = parent;\n            parent = parent.$container;\n        }\n        const rule = parent;\n        ruleName = rule.name + ':' + ruleName;\n        ctx.ruleNames.set(element, ruleName);\n        return ruleName;\n    }\n}\nfunction getToken(ctx, name) {\n    const token = ctx.tokens[name];\n    if (!token)\n        throw new Error(`Token \"${name}\" not found.\"`);\n    return token;\n}\n//# sourceMappingURL=parser-builder-base.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { LangiumCompletionParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\nexport function createCompletionParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumCompletionParser(services);\n    createParser(grammar, parser, lexer.definition);\n    parser.finalize();\n    return parser;\n}\n//# sourceMappingURL=completion-parser-builder.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { LangiumParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\n/**\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\n * available at `services.Grammar`.\n */\nexport function createLangiumParser(services) {\n    const parser = prepareLangiumParser(services);\n    parser.finalize();\n    return parser;\n}\n/**\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\n * information when the parser is initially validated.\n */\nexport function prepareLangiumParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumParser(services);\n    return createParser(grammar, parser, lexer.definition);\n}\n//# sourceMappingURL=langium-parser-builder.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Lexer } from 'chevrotain';\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\nimport { streamAllContents } from '../utils/ast-utils.js';\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\nimport { stream } from '../utils/stream.js';\nexport class DefaultTokenBuilder {\n    buildTokens(grammar, options) {\n        const reachableRules = stream(getAllReachableRules(grammar, false));\n        const terminalTokens = this.buildTerminalTokens(reachableRules);\n        const tokens = this.buildKeywordTokens(reachableRules, terminalTokens, options);\n        terminalTokens.forEach(terminalToken => {\n            const pattern = terminalToken.PATTERN;\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\n                tokens.unshift(terminalToken);\n            }\n            else {\n                tokens.push(terminalToken);\n            }\n        });\n        // We don't need to add the EOF token explicitly.\n        // It is automatically available at the end of the token stream.\n        return tokens;\n    }\n    buildTerminalTokens(rules) {\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\n    }\n    buildTerminalToken(terminal) {\n        const regex = terminalRegex(terminal);\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\n        const tokenType = {\n            name: terminal.name,\n            PATTERN: pattern,\n            LINE_BREAKS: true\n        };\n        if (terminal.hidden) {\n            // Only skip tokens that are able to accept whitespace\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\n        }\n        return tokenType;\n    }\n    requiresCustomPattern(regex) {\n        if (regex.flags.includes('u')) {\n            // Unicode regexes are not supported by Chevrotain.\n            return true;\n        }\n        else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    regexPatternFunction(regex) {\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\n        return (text, offset) => {\n            stickyRegex.lastIndex = offset;\n            const execResult = stickyRegex.exec(text);\n            return execResult;\n        };\n    }\n    buildKeywordTokens(rules, terminalTokens, options) {\n        return rules\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\n            .filter(isParserRule)\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\n            .distinct(e => e.value).toArray()\n            // Sort keywords by descending length\n            .sort((a, b) => b.value.length - a.value.length)\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options === null || options === void 0 ? void 0 : options.caseInsensitive)));\n    }\n    buildKeywordToken(keyword, terminalTokens, caseInsensitive) {\n        return {\n            name: keyword.value,\n            PATTERN: this.buildKeywordPattern(keyword, caseInsensitive),\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\n        };\n    }\n    buildKeywordPattern(keyword, caseInsensitive) {\n        return caseInsensitive ?\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\n            keyword.value;\n    }\n    findLongerAlt(keyword, terminalTokens) {\n        return terminalTokens.reduce((longerAlts, token) => {\n            const pattern = token === null || token === void 0 ? void 0 : token.PATTERN;\n            if ((pattern === null || pattern === void 0 ? void 0 : pattern.source) && partialMatches('^' + pattern.source + '$', keyword.value)) {\n                longerAlts.push(token);\n            }\n            return longerAlts;\n        }, []);\n    }\n}\n//# sourceMappingURL=token-builder.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\nexport class DefaultValueConverter {\n    convert(input, cstNode) {\n        let feature = cstNode.grammarSource;\n        if (isCrossReference(feature)) {\n            feature = getCrossReferenceTerminal(feature);\n        }\n        if (isRuleCall(feature)) {\n            const rule = feature.rule.ref;\n            if (!rule) {\n                throw new Error('This cst node was not parsed by a rule.');\n            }\n            return this.runConverter(rule, input, cstNode);\n        }\n        return input;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    runConverter(rule, input, cstNode) {\n        var _a;\n        switch (rule.name.toUpperCase()) {\n            case 'INT': return ValueConverter.convertInt(input);\n            case 'STRING': return ValueConverter.convertString(input);\n            case 'ID': return ValueConverter.convertID(input);\n        }\n        switch ((_a = getRuleType(rule)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) {\n            case 'number': return ValueConverter.convertNumber(input);\n            case 'boolean': return ValueConverter.convertBoolean(input);\n            case 'bigint': return ValueConverter.convertBigint(input);\n            case 'date': return ValueConverter.convertDate(input);\n            default: return input;\n        }\n    }\n}\nexport var ValueConverter;\n(function (ValueConverter) {\n    function convertString(input) {\n        let result = '';\n        for (let i = 1; i < input.length - 1; i++) {\n            const c = input.charAt(i);\n            if (c === '\\\\') {\n                const c1 = input.charAt(++i);\n                result += convertEscapeCharacter(c1);\n            }\n            else {\n                result += c;\n            }\n        }\n        return result;\n    }\n    ValueConverter.convertString = convertString;\n    function convertEscapeCharacter(char) {\n        switch (char) {\n            case 'b': return '\\b';\n            case 'f': return '\\f';\n            case 'n': return '\\n';\n            case 'r': return '\\r';\n            case 't': return '\\t';\n            case 'v': return '\\v';\n            case '0': return '\\0';\n            default: return char;\n        }\n    }\n    function convertID(input) {\n        if (input.charAt(0) === '^') {\n            return input.substring(1);\n        }\n        else {\n            return input;\n        }\n    }\n    ValueConverter.convertID = convertID;\n    function convertInt(input) {\n        return parseInt(input);\n    }\n    ValueConverter.convertInt = convertInt;\n    function convertBigint(input) {\n        return BigInt(input);\n    }\n    ValueConverter.convertBigint = convertBigint;\n    function convertDate(input) {\n        return new Date(input);\n    }\n    ValueConverter.convertDate = convertDate;\n    function convertNumber(input) {\n        return Number(input);\n    }\n    ValueConverter.convertNumber = convertNumber;\n    function convertBoolean(input) {\n        return input.toLowerCase() === 'true';\n    }\n    ValueConverter.convertBoolean = convertBoolean;\n})(ValueConverter || (ValueConverter = {}));\n//# sourceMappingURL=value-converter.js.map","/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n// eslint-disable-next-line no-restricted-imports\nexport * from 'vscode-jsonrpc/lib/common/cancellation.js';\n//# sourceMappingURL=cancellation.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\n/**\n * Delays the execution of the current code to the next tick of the event loop.\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\n */\nexport function delayNextTick() {\n    return new Promise(resolve => {\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\n        // Using `setTimeout` of the browser API accomplishes the same result.\n        if (typeof setImmediate === 'undefined') {\n            setTimeout(resolve, 0);\n        }\n        else {\n            setImmediate(resolve);\n        }\n    });\n}\nlet lastTick = 0;\nlet globalInterruptionPeriod = 10;\n/**\n * Reset the global interruption period and create a cancellation token source.\n */\nexport function startCancelableOperation() {\n    lastTick = Date.now();\n    return new CancellationTokenSource();\n}\n/**\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\n * The default value is 10ms.\n */\nexport function setInterruptionPeriod(period) {\n    globalInterruptionPeriod = period;\n}\n/**\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\n * this symbol as rejection reason.\n */\nexport const OperationCancelled = Symbol('OperationCancelled');\n/**\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\n * has been cancelled.\n */\nexport function isOperationCancelled(err) {\n    return err === OperationCancelled;\n}\n/**\n * This function does two things:\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\n *\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\n * the promise) to avoid that event being exposed as an error.\n */\nexport async function interruptAndCheck(token) {\n    if (token === CancellationToken.None) {\n        // Early exit in case cancellation was disabled by the caller\n        return;\n    }\n    const current = Date.now();\n    if (current - lastTick >= globalInterruptionPeriod) {\n        lastTick = current;\n        await delayNextTick();\n    }\n    if (token.isCancellationRequested) {\n        throw OperationCancelled;\n    }\n}\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nexport class Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (arg) => {\n                resolve(arg);\n                return this;\n            };\n            this.reject = (err) => {\n                reject(err);\n                return this;\n            };\n        });\n    }\n}\n//# sourceMappingURL=promise-utils.js.map","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","var LIB;(()=>{\"use strict\";var t={470:t=>{function e(t){if(\"string\"!=typeof t)throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(t))}function r(t,e){for(var r,n=\"\",i=0,o=-1,s=0,h=0;h<=t.length;++h){if(h<t.length)r=t.charCodeAt(h);else{if(47===r)break;r=47}if(47===r){if(o===h-1||1===s);else if(o!==h-1&&2===s){if(n.length<2||2!==i||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var a=n.lastIndexOf(\"/\");if(a!==n.length-1){-1===a?(n=\"\",i=0):i=(n=n.slice(0,a)).length-1-n.lastIndexOf(\"/\"),o=h,s=0;continue}}else if(2===n.length||1===n.length){n=\"\",i=0,o=h,s=0;continue}e&&(n.length>0?n+=\"/..\":n=\"..\",i=2)}else n.length>0?n+=\"/\"+t.slice(o+1,h):n=t.slice(o+1,h),i=h-o-1;o=h,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var t,n=\"\",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var s;o>=0?s=arguments[o]:(void 0===t&&(t=process.cwd()),s=t),e(s),0!==s.length&&(n=s+\"/\"+n,i=47===s.charCodeAt(0))}return n=r(n,!i),i?n.length>0?\"/\"+n:\"/\":n.length>0?n:\".\"},normalize:function(t){if(e(t),0===t.length)return\".\";var n=47===t.charCodeAt(0),i=47===t.charCodeAt(t.length-1);return 0!==(t=r(t,!n)).length||n||(t=\".\"),t.length>0&&i&&(t+=\"/\"),n?\"/\"+t:t},isAbsolute:function(t){return e(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return\".\";for(var t,r=0;r<arguments.length;++r){var i=arguments[r];e(i),i.length>0&&(void 0===t?t=i:t+=\"/\"+i)}return void 0===t?\".\":n.normalize(t)},relative:function(t,r){if(e(t),e(r),t===r)return\"\";if((t=n.resolve(t))===(r=n.resolve(r)))return\"\";for(var i=1;i<t.length&&47===t.charCodeAt(i);++i);for(var o=t.length,s=o-i,h=1;h<r.length&&47===r.charCodeAt(h);++h);for(var a=r.length-h,c=s<a?s:a,f=-1,u=0;u<=c;++u){if(u===c){if(a>c){if(47===r.charCodeAt(h+u))return r.slice(h+u+1);if(0===u)return r.slice(h+u)}else s>c&&(47===t.charCodeAt(i+u)?f=u:0===u&&(f=0));break}var l=t.charCodeAt(i+u);if(l!==r.charCodeAt(h+u))break;47===l&&(f=u)}var g=\"\";for(u=i+f+1;u<=o;++u)u!==o&&47!==t.charCodeAt(u)||(0===g.length?g+=\"..\":g+=\"/..\");return g.length>0?g+r.slice(h+f):(h+=f,47===r.charCodeAt(h)&&++h,r.slice(h))},_makeLong:function(t){return t},dirname:function(t){if(e(t),0===t.length)return\".\";for(var r=t.charCodeAt(0),n=47===r,i=-1,o=!0,s=t.length-1;s>=1;--s)if(47===(r=t.charCodeAt(s))){if(!o){i=s;break}}else o=!1;return-1===i?n?\"/\":\".\":n&&1===i?\"//\":t.slice(0,i)},basename:function(t,r){if(void 0!==r&&\"string\"!=typeof r)throw new TypeError('\"ext\" argument must be a string');e(t);var n,i=0,o=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return\"\";var h=r.length-1,a=-1;for(n=t.length-1;n>=0;--n){var c=t.charCodeAt(n);if(47===c){if(!s){i=n+1;break}}else-1===a&&(s=!1,a=n+1),h>=0&&(c===r.charCodeAt(h)?-1==--h&&(o=n):(h=-1,o=a))}return i===o?o=a:-1===o&&(o=t.length),t.slice(i,o)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!s){i=n+1;break}}else-1===o&&(s=!1,o=n+1);return-1===o?\"\":t.slice(i,o)},extname:function(t){e(t);for(var r=-1,n=0,i=-1,o=!0,s=0,h=t.length-1;h>=0;--h){var a=t.charCodeAt(h);if(47!==a)-1===i&&(o=!1,i=h+1),46===a?-1===r?r=h:1!==s&&(s=1):-1!==r&&(s=-1);else if(!o){n=h+1;break}}return-1===r||-1===i||0===s||1===s&&r===i-1&&r===n+1?\"\":t.slice(r,i)},format:function(t){if(null===t||\"object\"!=typeof t)throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof t);return function(t,e){var r=e.dir||e.root,n=e.base||(e.name||\"\")+(e.ext||\"\");return r?r===e.root?r+n:r+\"/\"+n:n}(0,t)},parse:function(t){e(t);var r={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(0===t.length)return r;var n,i=t.charCodeAt(0),o=47===i;o?(r.root=\"/\",n=1):n=0;for(var s=-1,h=0,a=-1,c=!0,f=t.length-1,u=0;f>=n;--f)if(47!==(i=t.charCodeAt(f)))-1===a&&(c=!1,a=f+1),46===i?-1===s?s=f:1!==u&&(u=1):-1!==s&&(u=-1);else if(!c){h=f+1;break}return-1===s||-1===a||0===u||1===u&&s===a-1&&s===h+1?-1!==a&&(r.base=r.name=0===h&&o?t.slice(1,a):t.slice(h,a)):(0===h&&o?(r.name=t.slice(1,s),r.base=t.slice(1,a)):(r.name=t.slice(h,s),r.base=t.slice(h,a)),r.ext=t.slice(s,a)),h>0?r.dir=t.slice(0,h-1):o&&(r.dir=\"/\"),r},sep:\"/\",delimiter:\":\",win32:null,posix:null};n.posix=n,t.exports=n}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})};var n={};(()=>{let t;if(r.r(n),r.d(n,{URI:()=>f,Utils:()=>P}),\"object\"==typeof process)t=\"win32\"===process.platform;else if(\"object\"==typeof navigator){let e=navigator.userAgent;t=e.indexOf(\"Windows\")>=0}const e=/^\\w[\\w\\d+.-]*$/,i=/^\\//,o=/^\\/\\//;function s(t,r){if(!t.scheme&&r)throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${t.authority}\", path: \"${t.path}\", query: \"${t.query}\", fragment: \"${t.fragment}\"}`);if(t.scheme&&!e.test(t.scheme))throw new Error(\"[UriError]: Scheme contains illegal characters.\");if(t.path)if(t.authority){if(!i.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character')}else if(o.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")')}const h=\"\",a=\"/\",c=/^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;class f{static isUri(t){return t instanceof f||!!t&&\"string\"==typeof t.authority&&\"string\"==typeof t.fragment&&\"string\"==typeof t.path&&\"string\"==typeof t.query&&\"string\"==typeof t.scheme&&\"string\"==typeof t.fsPath&&\"function\"==typeof t.with&&\"function\"==typeof t.toString}scheme;authority;path;query;fragment;constructor(t,e,r,n,i,o=!1){\"object\"==typeof t?(this.scheme=t.scheme||h,this.authority=t.authority||h,this.path=t.path||h,this.query=t.query||h,this.fragment=t.fragment||h):(this.scheme=function(t,e){return t||e?t:\"file\"}(t,o),this.authority=e||h,this.path=function(t,e){switch(t){case\"https\":case\"http\":case\"file\":e?e[0]!==a&&(e=a+e):e=a}return e}(this.scheme,r||h),this.query=n||h,this.fragment=i||h,s(this,o))}get fsPath(){return m(this,!1)}with(t){if(!t)return this;let{scheme:e,authority:r,path:n,query:i,fragment:o}=t;return void 0===e?e=this.scheme:null===e&&(e=h),void 0===r?r=this.authority:null===r&&(r=h),void 0===n?n=this.path:null===n&&(n=h),void 0===i?i=this.query:null===i&&(i=h),void 0===o?o=this.fragment:null===o&&(o=h),e===this.scheme&&r===this.authority&&n===this.path&&i===this.query&&o===this.fragment?this:new l(e,r,n,i,o)}static parse(t,e=!1){const r=c.exec(t);return r?new l(r[2]||h,C(r[4]||h),C(r[5]||h),C(r[7]||h),C(r[9]||h),e):new l(h,h,h,h,h)}static file(e){let r=h;if(t&&(e=e.replace(/\\\\/g,a)),e[0]===a&&e[1]===a){const t=e.indexOf(a,2);-1===t?(r=e.substring(2),e=a):(r=e.substring(2,t),e=e.substring(t)||a)}return new l(\"file\",r,e,h,h)}static from(t){const e=new l(t.scheme,t.authority,t.path,t.query,t.fragment);return s(e,!0),e}toString(t=!1){return y(this,t)}toJSON(){return this}static revive(t){if(t){if(t instanceof f)return t;{const e=new l(t);return e._formatted=t.external,e._fsPath=t._sep===u?t.fsPath:null,e}}return t}}const u=t?1:void 0;class l extends f{_formatted=null;_fsPath=null;get fsPath(){return this._fsPath||(this._fsPath=m(this,!1)),this._fsPath}toString(t=!1){return t?y(this,!0):(this._formatted||(this._formatted=y(this,!1)),this._formatted)}toJSON(){const t={$mid:1};return this._fsPath&&(t.fsPath=this._fsPath,t._sep=u),this._formatted&&(t.external=this._formatted),this.path&&(t.path=this.path),this.scheme&&(t.scheme=this.scheme),this.authority&&(t.authority=this.authority),this.query&&(t.query=this.query),this.fragment&&(t.fragment=this.fragment),t}}const g={58:\"%3A\",47:\"%2F\",63:\"%3F\",35:\"%23\",91:\"%5B\",93:\"%5D\",64:\"%40\",33:\"%21\",36:\"%24\",38:\"%26\",39:\"%27\",40:\"%28\",41:\"%29\",42:\"%2A\",43:\"%2B\",44:\"%2C\",59:\"%3B\",61:\"%3D\",32:\"%20\"};function d(t,e,r){let n,i=-1;for(let o=0;o<t.length;o++){const s=t.charCodeAt(o);if(s>=97&&s<=122||s>=65&&s<=90||s>=48&&s<=57||45===s||46===s||95===s||126===s||e&&47===s||r&&91===s||r&&93===s||r&&58===s)-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),void 0!==n&&(n+=t.charAt(o));else{void 0===n&&(n=t.substr(0,o));const e=g[s];void 0!==e?(-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),n+=e):-1===i&&(i=o)}}return-1!==i&&(n+=encodeURIComponent(t.substring(i))),void 0!==n?n:t}function p(t){let e;for(let r=0;r<t.length;r++){const n=t.charCodeAt(r);35===n||63===n?(void 0===e&&(e=t.substr(0,r)),e+=g[n]):void 0!==e&&(e+=t[r])}return void 0!==e?e:t}function m(e,r){let n;return n=e.authority&&e.path.length>1&&\"file\"===e.scheme?`//${e.authority}${e.path}`:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?r?e.path.substr(1):e.path[1].toLowerCase()+e.path.substr(2):e.path,t&&(n=n.replace(/\\//g,\"\\\\\")),n}function y(t,e){const r=e?p:d;let n=\"\",{scheme:i,authority:o,path:s,query:h,fragment:c}=t;if(i&&(n+=i,n+=\":\"),(o||\"file\"===i)&&(n+=a,n+=a),o){let t=o.indexOf(\"@\");if(-1!==t){const e=o.substr(0,t);o=o.substr(t+1),t=e.lastIndexOf(\":\"),-1===t?n+=r(e,!1,!1):(n+=r(e.substr(0,t),!1,!1),n+=\":\",n+=r(e.substr(t+1),!1,!0)),n+=\"@\"}o=o.toLowerCase(),t=o.lastIndexOf(\":\"),-1===t?n+=r(o,!1,!0):(n+=r(o.substr(0,t),!1,!0),n+=o.substr(t))}if(s){if(s.length>=3&&47===s.charCodeAt(0)&&58===s.charCodeAt(2)){const t=s.charCodeAt(1);t>=65&&t<=90&&(s=`/${String.fromCharCode(t+32)}:${s.substr(3)}`)}else if(s.length>=2&&58===s.charCodeAt(1)){const t=s.charCodeAt(0);t>=65&&t<=90&&(s=`${String.fromCharCode(t+32)}:${s.substr(2)}`)}n+=r(s,!0,!1)}return h&&(n+=\"?\",n+=r(h,!1,!1)),c&&(n+=\"#\",n+=e?c:d(c,!1,!1)),n}function v(t){try{return decodeURIComponent(t)}catch{return t.length>3?t.substr(0,3)+v(t.substr(3)):t}}const b=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function C(t){return t.match(b)?t.replace(b,(t=>v(t))):t}var A=r(470);const w=A.posix||A,x=\"/\";var P;!function(t){t.joinPath=function(t,...e){return t.with({path:w.join(t.path,...e)})},t.resolvePath=function(t,...e){let r=t.path,n=!1;r[0]!==x&&(r=x+r,n=!0);let i=w.resolve(r,...e);return n&&i[0]===x&&!t.authority&&(i=i.substring(1)),t.with({path:i})},t.dirname=function(t){if(0===t.path.length||t.path===x)return t;let e=w.dirname(t.path);return 1===e.length&&46===e.charCodeAt(0)&&(e=\"\"),t.with({path:e})},t.basename=function(t){return w.basename(t.path)},t.extname=function(t){return w.extname(t.path)}}(P||(P={}))})(),LIB=n})();export const{URI,Utils}=LIB;\n//# sourceMappingURL=index.mjs.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { URI, Utils } from 'vscode-uri';\nexport { URI };\nexport var UriUtils;\n(function (UriUtils) {\n    UriUtils.basename = Utils.basename;\n    UriUtils.dirname = Utils.dirname;\n    UriUtils.extname = Utils.extname;\n    UriUtils.joinPath = Utils.joinPath;\n    UriUtils.resolvePath = Utils.resolvePath;\n    function equals(a, b) {\n        return (a === null || a === void 0 ? void 0 : a.toString()) === (b === null || b === void 0 ? void 0 : b.toString());\n    }\n    UriUtils.equals = equals;\n    function relative(from, to) {\n        const fromPath = typeof from === 'string' ? from : from.path;\n        const toPath = typeof to === 'string' ? to : to.path;\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\n        const toParts = toPath.split('/').filter(e => e.length > 0);\n        let i = 0;\n        for (; i < fromParts.length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n                break;\n            }\n        }\n        const backPart = '../'.repeat(fromParts.length - i);\n        const toPart = toParts.slice(i).join('/');\n        return backPart + toPart;\n    }\n    UriUtils.relative = relative;\n})(UriUtils || (UriUtils = {}));\n//# sourceMappingURL=uri-utils.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n/**\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\n *  the overhead is very small, just a few kilobytes.\n * Everything else of that package (at the time contributing) is also defined\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\n */\nexport { TextDocument } from 'vscode-languageserver-textdocument';\nimport { TextDocument } from './documents.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { stream } from '../utils/stream.js';\nimport { URI } from '../utils/uri-utils.js';\n/**\n * A document is subject to several phases that are run in predefined order. Any state value implies that\n * smaller state values are finished as well.\n */\nexport var DocumentState;\n(function (DocumentState) {\n    /**\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\n     * document instance is no longer valid.\n     */\n    DocumentState[DocumentState[\"Changed\"] = 0] = \"Changed\";\n    /**\n     * An AST has been created from the text content. The document structure can be traversed,\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\n     * at this stage as a preprocessing step.\n     */\n    DocumentState[DocumentState[\"Parsed\"] = 1] = \"Parsed\";\n    /**\n     * The `IndexManager` service has processed AST nodes of this document. This means the\n     * exported symbols are available in the global scope and can be resolved from other documents.\n     */\n    DocumentState[DocumentState[\"IndexedContent\"] = 2] = \"IndexedContent\";\n    /**\n     * The `ScopeComputation` service has processed this document. This means the local symbols\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\n     * Once a document has reached this state, you may follow every reference - it will lazily\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\n     * the target is not in scope.\n     */\n    DocumentState[DocumentState[\"ComputedScopes\"] = 3] = \"ComputedScopes\";\n    /**\n     * The `Linker` service has processed this document. All outgoing references have been\n     * resolved or marked as erroneous.\n     */\n    DocumentState[DocumentState[\"Linked\"] = 4] = \"Linked\";\n    /**\n     * The `IndexManager` service has processed AST node references of this document. This is\n     * necessary to determine which documents are affected by a change in one of the workspace\n     * documents.\n     */\n    DocumentState[DocumentState[\"IndexedReferences\"] = 5] = \"IndexedReferences\";\n    /**\n     * The `DocumentValidator` service has processed this document. The language server listens\n     * to the results of this phase and sends diagnostics to the client.\n     */\n    DocumentState[DocumentState[\"Validated\"] = 6] = \"Validated\";\n})(DocumentState || (DocumentState = {}));\nexport class DefaultLangiumDocumentFactory {\n    constructor(services) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n    }\n    async fromUri(uri, cancellationToken = CancellationToken.None) {\n        const content = await this.fileSystemProvider.readFile(uri);\n        return this.createAsync(uri, content, cancellationToken);\n    }\n    fromTextDocument(textDocument, uri, cancellationToken) {\n        uri = uri !== null && uri !== void 0 ? uri : URI.parse(textDocument.uri);\n        if (cancellationToken) {\n            return this.createAsync(uri, textDocument, cancellationToken);\n        }\n        else {\n            return this.create(uri, textDocument);\n        }\n    }\n    fromString(text, uri, cancellationToken) {\n        if (cancellationToken) {\n            return this.createAsync(uri, text, cancellationToken);\n        }\n        else {\n            return this.create(uri, text);\n        }\n    }\n    fromModel(model, uri) {\n        return this.create(uri, { $model: model });\n    }\n    create(uri, content) {\n        if (typeof content === 'string') {\n            const parseResult = this.parse(uri, content);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        }\n        else if ('$model' in content) {\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\n            return this.createLangiumDocument(parseResult, uri);\n        }\n        else {\n            const parseResult = this.parse(uri, content.getText());\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    async createAsync(uri, content, cancelToken) {\n        if (typeof content === 'string') {\n            const parseResult = await this.parseAsync(uri, content, cancelToken);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        }\n        else {\n            const parseResult = await this.parseAsync(uri, content.getText(), cancelToken);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    /**\n     * Create a LangiumDocument from a given parse result.\n     *\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\n     * should not be necessary because the main purpose of the TextDocument is to convert between\n     * text ranges and offsets, which is done solely in LSP request handling.\n     *\n     * With the introduction of {@link update} below this method is supposed to be mainly called\n     * during workspace initialization and on addition/recognition of new files, while changes in\n     * existing documents are processed via {@link update}.\n     */\n    createLangiumDocument(parseResult, uri, textDocument, text) {\n        let document;\n        if (textDocument) {\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                textDocument\n            };\n        }\n        else {\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                get textDocument() {\n                    return textDocumentGetter();\n                }\n            };\n        }\n        parseResult.value.$document = document;\n        return document;\n    }\n    async update(document, cancellationToken) {\n        var _a, _b;\n        // The CST full text property contains the original text that was used to create the AST.\n        const oldText = (_a = document.parseResult.value.$cstNode) === null || _a === void 0 ? void 0 : _a.root.fullText;\n        const textDocument = (_b = this.textDocuments) === null || _b === void 0 ? void 0 : _b.get(document.uri.toString());\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\n        if (textDocument) {\n            Object.defineProperty(document, 'textDocument', {\n                value: textDocument\n            });\n        }\n        else {\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\n            Object.defineProperty(document, 'textDocument', {\n                get: textDocumentGetter\n            });\n        }\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\n        // Therefore, we only parse if the text has actually changed.\n        if (oldText !== text) {\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\n            document.parseResult.value.$document = document;\n        }\n        document.state = DocumentState.Parsed;\n        return document;\n    }\n    parse(uri, text) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.LangiumParser.parse(text);\n    }\n    parseAsync(uri, text, cancellationToken) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.AsyncParser.parse(text, cancellationToken);\n    }\n    createTextDocumentGetter(uri, text) {\n        const serviceRegistry = this.serviceRegistry;\n        let textDoc = undefined;\n        return () => {\n            return textDoc !== null && textDoc !== void 0 ? textDoc : (textDoc = TextDocument.create(uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text !== null && text !== void 0 ? text : ''));\n        };\n    }\n}\nexport class DefaultLangiumDocuments {\n    constructor(services) {\n        this.documentMap = new Map();\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n    }\n    get all() {\n        return stream(this.documentMap.values());\n    }\n    addDocument(document) {\n        const uriString = document.uri.toString();\n        if (this.documentMap.has(uriString)) {\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\n        }\n        this.documentMap.set(uriString, document);\n    }\n    getDocument(uri) {\n        const uriString = uri.toString();\n        return this.documentMap.get(uriString);\n    }\n    async getOrCreateDocument(uri, cancellationToken) {\n        let document = this.getDocument(uri);\n        if (document) {\n            return document;\n        }\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n        this.addDocument(document);\n        return document;\n    }\n    createDocument(uri, text, cancellationToken) {\n        if (cancellationToken) {\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\n                this.addDocument(document);\n                return document;\n            });\n        }\n        else {\n            const document = this.langiumDocumentFactory.fromString(text, uri);\n            this.addDocument(document);\n            return document;\n        }\n    }\n    hasDocument(uri) {\n        return this.documentMap.has(uri.toString());\n    }\n    invalidateDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            langiumDoc.precomputedScopes = undefined;\n            langiumDoc.references = [];\n            langiumDoc.diagnostics = undefined;\n        }\n        return langiumDoc;\n    }\n    deleteDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            this.documentMap.delete(uriString);\n        }\n        return langiumDoc;\n    }\n}\n//# sourceMappingURL=documents.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { DocumentState } from '../workspace/documents.js';\nexport class DefaultLinker {\n    constructor(services) {\n        this.reflection = services.shared.AstReflection;\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\n        this.scopeProvider = services.references.ScopeProvider;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n    }\n    async link(document, cancelToken = CancellationToken.None) {\n        for (const node of streamAst(document.parseResult.value)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\n        }\n    }\n    doLink(refInfo, document) {\n        const ref = refInfo.reference;\n        // The reference may already have been resolved lazily by accessing its `ref` property.\n        if (ref._ref === undefined) {\n            try {\n                const description = this.getCandidate(refInfo);\n                if (isLinkingError(description)) {\n                    ref._ref = description;\n                }\n                else {\n                    ref._nodeDescription = description;\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\n                        // The target document is already loaded\n                        const linkedNode = this.loadAstNode(description);\n                        ref._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : this.createLinkingError(refInfo, description);\n                    }\n                }\n            }\n            catch (err) {\n                ref._ref = Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${ref.$refText}': ${err}` });\n            }\n        }\n        // Add the reference to the document's array of references\n        document.references.push(ref);\n    }\n    unlink(document) {\n        for (const ref of document.references) {\n            delete ref._ref;\n            delete ref._nodeDescription;\n        }\n        document.references = [];\n    }\n    getCandidate(refInfo) {\n        const scope = this.scopeProvider.getScope(refInfo);\n        const description = scope.getElement(refInfo.reference.$refText);\n        return description !== null && description !== void 0 ? description : this.createLinkingError(refInfo);\n    }\n    buildReference(node, property, refNode, refText) {\n        // See behavior description in doc of Linker, update that on changes in here.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const linker = this;\n        const reference = {\n            $refNode: refNode,\n            $refText: refText,\n            get ref() {\n                var _a;\n                if (isAstNode(this._ref)) {\n                    // Most frequent case: the target is already resolved.\n                    return this._ref;\n                }\n                else if (isAstNodeDescription(this._nodeDescription)) {\n                    // A candidate has been found before, but it is not loaded yet.\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\n                    this._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\n                }\n                else if (this._ref === undefined) {\n                    // The reference has not been linked yet, so do that now.\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\n                    if (refData.error && getDocument(node).state < DocumentState.ComputedScopes) {\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\n                        return undefined;\n                    }\n                    this._ref = (_a = refData.node) !== null && _a !== void 0 ? _a : refData.error;\n                    this._nodeDescription = refData.descr;\n                }\n                return isAstNode(this._ref) ? this._ref : undefined;\n            },\n            get $nodeDescription() {\n                return this._nodeDescription;\n            },\n            get error() {\n                return isLinkingError(this._ref) ? this._ref : undefined;\n            }\n        };\n        return reference;\n    }\n    getLinkedNode(refInfo) {\n        try {\n            const description = this.getCandidate(refInfo);\n            if (isLinkingError(description)) {\n                return { error: description };\n            }\n            const linkedNode = this.loadAstNode(description);\n            if (linkedNode) {\n                return { node: linkedNode, descr: description };\n            }\n            else {\n                return {\n                    descr: description,\n                    error: this.createLinkingError(refInfo, description)\n                };\n            }\n        }\n        catch (err) {\n            return {\n                error: Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${err}` })\n            };\n        }\n    }\n    loadAstNode(nodeDescription) {\n        if (nodeDescription.node) {\n            return nodeDescription.node;\n        }\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\n        if (!doc) {\n            return undefined;\n        }\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\n    }\n    createLinkingError(refInfo, targetDescription) {\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\n        // in the language implementation.\n        const document = getDocument(refInfo.container);\n        if (document.state < DocumentState.ComputedScopes) {\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\n        }\n        const referenceType = this.reflection.getReferenceType(refInfo);\n        return Object.assign(Object.assign({}, refInfo), { message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`, targetDescription });\n    }\n}\n//# sourceMappingURL=linker.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\nexport function isNamed(node) {\n    return typeof node.name === 'string';\n}\nexport class DefaultNameProvider {\n    getName(node) {\n        if (isNamed(node)) {\n            return node.name;\n        }\n        return undefined;\n    }\n    getNameNode(node) {\n        return findNodeForProperty(node.$cstNode, 'name');\n    }\n}\n//# sourceMappingURL=name-provider.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { findAssignment } from '../utils/grammar-utils.js';\nimport { isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nexport class DefaultReferences {\n    constructor(services) {\n        this.nameProvider = services.references.NameProvider;\n        this.index = services.shared.workspace.IndexManager;\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    findDeclaration(sourceCstNode) {\n        if (sourceCstNode) {\n            const assignment = findAssignment(sourceCstNode);\n            const nodeElem = sourceCstNode.astNode;\n            if (assignment && nodeElem) {\n                const reference = nodeElem[assignment.feature];\n                if (isReference(reference)) {\n                    return reference.ref;\n                }\n                else if (Array.isArray(reference)) {\n                    for (const ref of reference) {\n                        if (isReference(ref) && ref.$refNode\n                            && ref.$refNode.offset <= sourceCstNode.offset\n                            && ref.$refNode.end >= sourceCstNode.end) {\n                            return ref.ref;\n                        }\n                    }\n                }\n            }\n            if (nodeElem) {\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\n                    return nodeElem;\n                }\n            }\n        }\n        return undefined;\n    }\n    findDeclarationNode(sourceCstNode) {\n        const astNode = this.findDeclaration(sourceCstNode);\n        if (astNode === null || astNode === void 0 ? void 0 : astNode.$cstNode) {\n            const targetNode = this.nameProvider.getNameNode(astNode);\n            return targetNode !== null && targetNode !== void 0 ? targetNode : astNode.$cstNode;\n        }\n        return undefined;\n    }\n    findReferences(targetNode, options) {\n        const refs = [];\n        if (options.includeDeclaration) {\n            const ref = this.getReferenceToSelf(targetNode);\n            if (ref) {\n                refs.push(ref);\n            }\n        }\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\n        if (options.documentUri) {\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\n        }\n        refs.push(...indexReferences);\n        return stream(refs);\n    }\n    getReferenceToSelf(targetNode) {\n        const nameNode = this.nameProvider.getNameNode(targetNode);\n        if (nameNode) {\n            const doc = getDocument(targetNode);\n            const path = this.nodeLocator.getAstNodePath(targetNode);\n            return {\n                sourceUri: doc.uri,\n                sourcePath: path,\n                targetUri: doc.uri,\n                targetPath: path,\n                segment: toDocumentSegment(nameNode),\n                local: true\n            };\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=references.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Reduction, stream } from './stream.js';\n/**\n * A multimap is a variation of a Map that has potentially multiple values for every key.\n */\nexport class MultiMap {\n    constructor(elements) {\n        this.map = new Map();\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.add(key, value);\n            }\n        }\n    }\n    /**\n     * The total number of values in the multimap.\n     */\n    get size() {\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\n    }\n    /**\n     * Clear all entries in the multimap.\n     */\n    clear() {\n        this.map.clear();\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\n     *  * Without a value, all values associated with the given key are deleted.\n     *\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\n     *     key / value does not exist.\n     */\n    delete(key, value) {\n        if (value === undefined) {\n            return this.map.delete(key);\n        }\n        else {\n            const values = this.map.get(key);\n            if (values) {\n                const index = values.indexOf(value);\n                if (index >= 0) {\n                    if (values.length === 1) {\n                        this.map.delete(key);\n                    }\n                    else {\n                        values.splice(index, 1);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Returns an array of all values associated with the given key. If no value exists,\n     * an empty array is returned.\n     *\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\n     * value and `delete` to remove a value from the multimap.\n     */\n    get(key) {\n        var _a;\n        return (_a = this.map.get(key)) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\n     */\n    has(key, value) {\n        if (value === undefined) {\n            return this.map.has(key);\n        }\n        else {\n            const values = this.map.get(key);\n            if (values) {\n                return values.indexOf(value) >= 0;\n            }\n            return false;\n        }\n    }\n    /**\n     * Add the given key / value pair to the multimap.\n     */\n    add(key, value) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(value);\n        }\n        else {\n            this.map.set(key, [value]);\n        }\n        return this;\n    }\n    /**\n     * Add the given set of key / value pairs to the multimap.\n     */\n    addAll(key, values) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(...values);\n        }\n        else {\n            this.map.set(key, Array.from(values));\n        }\n        return this;\n    }\n    /**\n     * Invokes the given callback function for every key / value pair in the multimap.\n     */\n    forEach(callbackfn) {\n        this.map.forEach((array, key) => array.forEach(value => callbackfn(value, key, this)));\n    }\n    /**\n     * Returns an iterator of key, value pairs for every entry in the map.\n     */\n    [Symbol.iterator]() {\n        return this.entries().iterator();\n    }\n    /**\n     * Returns a stream of key, value pairs for every entry in the map.\n     */\n    entries() {\n        return stream(this.map.entries())\n            .flatMap(([key, array]) => array.map(value => [key, value]));\n    }\n    /**\n     * Returns a stream of keys in the map.\n     */\n    keys() {\n        return stream(this.map.keys());\n    }\n    /**\n     * Returns a stream of values in the map.\n     */\n    values() {\n        return stream(this.map.values()).flat();\n    }\n    /**\n     * Returns a stream of key, value set pairs for every key in the map.\n     */\n    entriesGroupedByKey() {\n        return stream(this.map.entries());\n    }\n}\nexport class BiMap {\n    get size() {\n        return this.map.size;\n    }\n    constructor(elements) {\n        this.map = new Map();\n        this.inverse = new Map();\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.set(key, value);\n            }\n        }\n    }\n    clear() {\n        this.map.clear();\n        this.inverse.clear();\n    }\n    set(key, value) {\n        this.map.set(key, value);\n        this.inverse.set(value, key);\n        return this;\n    }\n    get(key) {\n        return this.map.get(key);\n    }\n    getKey(value) {\n        return this.inverse.get(value);\n    }\n    delete(key) {\n        const value = this.map.get(key);\n        if (value !== undefined) {\n            this.map.delete(key);\n            this.inverse.delete(value);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=collections.js.map","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\n/**\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\n * contained child nodes.\n *\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\n * are _invisible_ by default, but that can be changed by customizing this service.\n */\nexport class DefaultScopeComputation {\n    constructor(services) {\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n    }\n    async computeExports(document, cancelToken = CancellationToken.None) {\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\n    }\n    /**\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\n     * The list of children to be considered is determined by the function parameter {@link children}.\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\n     *\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\n     * @param document The document containing the AST node to be exported.\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution.\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\n     */\n    async computeExportsForNode(parentNode, document, children = streamContents, cancelToken = CancellationToken.None) {\n        const exports = [];\n        this.exportNode(parentNode, exports, document);\n        for (const node of children(parentNode)) {\n            await interruptAndCheck(cancelToken);\n            this.exportNode(node, exports, document);\n        }\n        return exports;\n    }\n    /**\n     * Add a single node to the list of exports if it has a name. Override this method to change how\n     * symbols are exported, e.g. by modifying their exported name.\n     */\n    exportNode(node, exports, document) {\n        const name = this.nameProvider.getName(node);\n        if (name) {\n            exports.push(this.descriptions.createDescription(node, name, document));\n        }\n    }\n    async computeLocalScopes(document, cancelToken = CancellationToken.None) {\n        const rootNode = document.parseResult.value;\n        const scopes = new MultiMap();\n        // Here we navigate the full AST - local scopes shall be available in the whole document\n        for (const node of streamAllContents(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            this.processNode(node, document, scopes);\n        }\n        return scopes;\n    }\n    /**\n     * Process a single node during scopes computation. The default implementation makes the node visible\n     * in the subtree of its container (if the node has a name). Override this method to change this,\n     * e.g. by increasing the visibility to a higher level in the AST.\n     */\n    processNode(node, document, scopes) {\n        const container = node.$container;\n        if (container) {\n            const name = this.nameProvider.getName(node);\n            if (name) {\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\n            }\n        }\n    }\n}\n//# sourceMappingURL=scope-computation.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\n/**\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\n * the next level of elements, which are queried when a target element is not found in the stream provided\n * to this scope.\n */\nexport class StreamScope {\n    constructor(elements, outerScope, options) {\n        var _a;\n        this.elements = elements;\n        this.outerScope = outerScope;\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n    }\n    getAllElements() {\n        if (this.outerScope) {\n            return this.elements.concat(this.outerScope.getAllElements());\n        }\n        else {\n            return this.elements;\n        }\n    }\n    getElement(name) {\n        const local = this.caseInsensitive\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\n            : this.elements.find(e => e.name === name);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n}\nexport class MapScope {\n    constructor(elements, outerScope, options) {\n        var _a;\n        this.elements = new Map();\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n        for (const element of elements) {\n            const name = this.caseInsensitive\n                ? element.name.toLowerCase()\n                : element.name;\n            this.elements.set(name, element);\n        }\n        this.outerScope = outerScope;\n    }\n    getElement(name) {\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\n        const local = this.elements.get(localName);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n    getAllElements() {\n        let elementStream = stream(this.elements.values());\n        if (this.outerScope) {\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\n        }\n        return elementStream;\n    }\n}\nexport const EMPTY_SCOPE = {\n    getElement() {\n        return undefined;\n    },\n    getAllElements() {\n        return EMPTY_STREAM;\n    }\n};\n//# sourceMappingURL=scope.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport class DisposableCache {\n    constructor() {\n        this.toDispose = [];\n        this.isDisposed = false;\n    }\n    onDispose(disposable) {\n        this.toDispose.push(disposable);\n    }\n    dispose() {\n        this.throwIfDisposed();\n        this.clear();\n        this.isDisposed = true;\n        this.toDispose.forEach(disposable => disposable.dispose());\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('This cache has already been disposed');\n        }\n    }\n}\nexport class SimpleCache extends DisposableCache {\n    constructor() {\n        super(...arguments);\n        this.cache = new Map();\n    }\n    has(key) {\n        this.throwIfDisposed();\n        return this.cache.has(key);\n    }\n    set(key, value) {\n        this.throwIfDisposed();\n        this.cache.set(key, value);\n    }\n    get(key, provider) {\n        this.throwIfDisposed();\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        else if (provider) {\n            const value = provider();\n            this.cache.set(key, value);\n            return value;\n        }\n        else {\n            return undefined;\n        }\n    }\n    delete(key) {\n        this.throwIfDisposed();\n        return this.cache.delete(key);\n    }\n    clear() {\n        this.throwIfDisposed();\n        this.cache.clear();\n    }\n}\nexport class ContextCache extends DisposableCache {\n    constructor(converter) {\n        super();\n        this.cache = new Map();\n        this.converter = converter !== null && converter !== void 0 ? converter : (value => value);\n    }\n    has(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).has(key);\n    }\n    set(contextKey, key, value) {\n        this.throwIfDisposed();\n        this.cacheForContext(contextKey).set(key, value);\n    }\n    get(contextKey, key, provider) {\n        this.throwIfDisposed();\n        const contextCache = this.cacheForContext(contextKey);\n        if (contextCache.has(key)) {\n            return contextCache.get(key);\n        }\n        else if (provider) {\n            const value = provider();\n            contextCache.set(key, value);\n            return value;\n        }\n        else {\n            return undefined;\n        }\n    }\n    delete(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).delete(key);\n    }\n    clear(contextKey) {\n        this.throwIfDisposed();\n        if (contextKey) {\n            const mapKey = this.converter(contextKey);\n            this.cache.delete(mapKey);\n        }\n        else {\n            this.cache.clear();\n        }\n    }\n    cacheForContext(contextKey) {\n        const mapKey = this.converter(contextKey);\n        let documentCache = this.cache.get(mapKey);\n        if (!documentCache) {\n            documentCache = new Map();\n            this.cache.set(mapKey, documentCache);\n        }\n        return documentCache;\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to a document.\n * If this document is changed or deleted, all associated key/value pairs are deleted.\n */\nexport class DocumentCache extends ContextCache {\n    constructor(sharedServices) {\n        super(uri => uri.toString());\n        this.onDispose(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\n            const allUris = changed.concat(deleted);\n            for (const uri of allUris) {\n                this.clear(uri);\n            }\n        }));\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to the whole workspace.\n * If any document in the workspace changes, the whole cache is evicted.\n */\nexport class WorkspaceCache extends SimpleCache {\n    constructor(sharedServices) {\n        super();\n        this.onDispose(sharedServices.workspace.DocumentBuilder.onUpdate(() => {\n            this.clear();\n        }));\n    }\n}\n//# sourceMappingURL=caching.js.map","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { MapScope, StreamScope } from './scope.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { WorkspaceCache } from '../utils/caching.js';\nexport class DefaultScopeProvider {\n    constructor(services) {\n        this.reflection = services.shared.AstReflection;\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.globalScopeCache = new WorkspaceCache(services.shared);\n    }\n    getScope(context) {\n        const scopes = [];\n        const referenceType = this.reflection.getReferenceType(context);\n        const precomputed = getDocument(context.container).precomputedScopes;\n        if (precomputed) {\n            let currentNode = context.container;\n            do {\n                const allDescriptions = precomputed.get(currentNode);\n                if (allDescriptions.length > 0) {\n                    scopes.push(stream(allDescriptions).filter(desc => this.reflection.isSubtype(desc.type, referenceType)));\n                }\n                currentNode = currentNode.$container;\n            } while (currentNode);\n        }\n        let result = this.getGlobalScope(referenceType, context);\n        for (let i = scopes.length - 1; i >= 0; i--) {\n            result = this.createScope(scopes[i], result);\n        }\n        return result;\n    }\n    /**\n     * Create a scope for the given collection of AST node descriptions.\n     */\n    createScope(elements, outerScope, options) {\n        return new StreamScope(stream(elements), outerScope, options);\n    }\n    /**\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\n     */\n    createScopeForNodes(elements, outerScope, options) {\n        const s = stream(elements).map(e => {\n            const name = this.nameProvider.getName(e);\n            if (name) {\n                return this.descriptions.createDescription(e, name);\n            }\n            return undefined;\n        }).nonNullable();\n        return new StreamScope(s, outerScope, options);\n    }\n    /**\n     * Create a global scope filtered for the given reference type.\n     */\n    getGlobalScope(referenceType, _context) {\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\n    }\n}\n//# sourceMappingURL=scope-provider.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { URI } from 'vscode-uri';\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\nexport function isAstNodeWithComment(node) {\n    return typeof node.$comment === 'string';\n}\nfunction isIntermediateReference(obj) {\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\n}\nexport class DefaultJsonSerializer {\n    constructor(services) {\n        /** The set of AstNode properties to be ignored by the serializer. */\n        this.ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    serialize(node, options = {}) {\n        const specificReplacer = options === null || options === void 0 ? void 0 : options.replacer;\n        const defaultReplacer = (key, value) => this.replacer(key, value, options);\n        const replacer = specificReplacer ? (key, value) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\n        try {\n            this.currentDocument = getDocument(node);\n            return JSON.stringify(node, replacer, options === null || options === void 0 ? void 0 : options.space);\n        }\n        finally {\n            this.currentDocument = undefined;\n        }\n    }\n    deserialize(content, options = {}) {\n        const root = JSON.parse(content);\n        this.linkNode(root, root, options);\n        return root;\n    }\n    replacer(key, value, { refText, sourceText, textRegions, comments, uriConverter }) {\n        var _a, _b, _c, _d;\n        if (this.ignoreProperties.has(key)) {\n            return undefined;\n        }\n        else if (isReference(value)) {\n            const refValue = value.ref;\n            const $refText = refText ? value.$refText : undefined;\n            if (refValue) {\n                const targetDocument = getDocument(refValue);\n                let targetUri = '';\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\n                    if (uriConverter) {\n                        targetUri = uriConverter(targetDocument.uri, value);\n                    }\n                    else {\n                        targetUri = targetDocument.uri.toString();\n                    }\n                }\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\n                return {\n                    $ref: `${targetUri}#${targetPath}`,\n                    $refText\n                };\n            }\n            else {\n                return {\n                    $error: (_b = (_a = value.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : 'Could not resolve reference',\n                    $refText\n                };\n            }\n        }\n        else if (isAstNode(value)) {\n            let astNode = undefined;\n            if (textRegions) {\n                astNode = this.addAstNodeRegionWithAssignmentsTo(Object.assign({}, value));\n                if ((!key || value.$document) && (astNode === null || astNode === void 0 ? void 0 : astNode.$textRegion)) {\n                    // The document URI is added to the root node of the resulting JSON tree\n                    astNode.$textRegion.documentURI = (_c = this.currentDocument) === null || _c === void 0 ? void 0 : _c.uri.toString();\n                }\n            }\n            if (sourceText && !key) {\n                astNode !== null && astNode !== void 0 ? astNode : (astNode = Object.assign({}, value));\n                astNode.$sourceText = (_d = value.$cstNode) === null || _d === void 0 ? void 0 : _d.text;\n            }\n            if (comments) {\n                astNode !== null && astNode !== void 0 ? astNode : (astNode = Object.assign({}, value));\n                const comment = this.commentProvider.getComment(value);\n                if (comment) {\n                    astNode.$comment = comment.replace(/\\r/g, '');\n                }\n            }\n            return astNode !== null && astNode !== void 0 ? astNode : value;\n        }\n        else {\n            return value;\n        }\n    }\n    addAstNodeRegionWithAssignmentsTo(node) {\n        const createDocumentSegment = cstNode => ({\n            offset: cstNode.offset,\n            end: cstNode.end,\n            length: cstNode.length,\n            range: cstNode.range,\n        });\n        if (node.$cstNode) {\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\n            const assignments = textRegion.assignments = {};\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\n                if (propertyAssignments.length !== 0) {\n                    assignments[key] = propertyAssignments;\n                }\n            });\n            return node;\n        }\n        return undefined;\n    }\n    linkNode(node, root, options, container, containerProperty, containerIndex) {\n        for (const [propertyName, item] of Object.entries(node)) {\n            if (Array.isArray(item)) {\n                for (let index = 0; index < item.length; index++) {\n                    const element = item[index];\n                    if (isIntermediateReference(element)) {\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\n                    }\n                    else if (isAstNode(element)) {\n                        this.linkNode(element, root, options, node, propertyName, index);\n                    }\n                }\n            }\n            else if (isIntermediateReference(item)) {\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\n            }\n            else if (isAstNode(item)) {\n                this.linkNode(item, root, options, node, propertyName);\n            }\n        }\n        const mutable = node;\n        mutable.$container = container;\n        mutable.$containerProperty = containerProperty;\n        mutable.$containerIndex = containerIndex;\n    }\n    reviveReference(container, property, root, reference, options) {\n        let refText = reference.$refText;\n        let error = reference.$error;\n        if (reference.$ref) {\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\n            if (isAstNode(ref)) {\n                if (!refText) {\n                    refText = this.nameProvider.getName(ref);\n                }\n                return {\n                    $refText: refText !== null && refText !== void 0 ? refText : '',\n                    ref\n                };\n            }\n            else {\n                error = ref;\n            }\n        }\n        if (error) {\n            const ref = {\n                $refText: refText !== null && refText !== void 0 ? refText : ''\n            };\n            ref.error = {\n                container,\n                property,\n                message: error,\n                reference: ref\n            };\n            return ref;\n        }\n        else {\n            return undefined;\n        }\n    }\n    getRefNode(root, uri, uriConverter) {\n        try {\n            const fragmentIndex = uri.indexOf('#');\n            if (fragmentIndex === 0) {\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\n                if (!node) {\n                    return 'Could not resolve path: ' + uri;\n                }\n                return node;\n            }\n            if (fragmentIndex < 0) {\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\n                const document = this.langiumDocuments.getDocument(documentUri);\n                if (!document) {\n                    return 'Could not find document for URI: ' + uri;\n                }\n                return document.parseResult.value;\n            }\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\n            const document = this.langiumDocuments.getDocument(documentUri);\n            if (!document) {\n                return 'Could not find document for URI: ' + uri;\n            }\n            if (fragmentIndex === uri.length - 1) {\n                return document.parseResult.value;\n            }\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\n            if (!node) {\n                return 'Could not resolve URI: ' + uri;\n            }\n            return node;\n        }\n        catch (err) {\n            return String(err);\n        }\n    }\n}\n//# sourceMappingURL=json-serializer.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { UriUtils } from './utils/uri-utils.js';\n/**\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\n */\nexport class DefaultServiceRegistry {\n    register(language) {\n        if (!this.singleton && !this.map) {\n            // This is the first language to be registered; store it as singleton.\n            this.singleton = language;\n            return;\n        }\n        if (!this.map) {\n            this.map = {};\n            if (this.singleton) {\n                // Move the previous singleton instance to the new map.\n                for (const ext of this.singleton.LanguageMetaData.fileExtensions) {\n                    this.map[ext] = this.singleton;\n                }\n                this.singleton = undefined;\n            }\n        }\n        // Store the language services in the map.\n        for (const ext of language.LanguageMetaData.fileExtensions) {\n            if (this.map[ext] !== undefined && this.map[ext] !== language) {\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${language.LanguageMetaData.languageId}'.`);\n            }\n            this.map[ext] = language;\n        }\n    }\n    getServices(uri) {\n        if (this.singleton !== undefined) {\n            return this.singleton;\n        }\n        if (this.map === undefined) {\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\n        }\n        const ext = UriUtils.extname(uri);\n        const services = this.map[ext];\n        if (!services) {\n            throw new Error(`The service registry contains no services for the extension '${ext}'.`);\n        }\n        return services;\n    }\n    get all() {\n        if (this.singleton !== undefined) {\n            return [this.singleton];\n        }\n        if (this.map !== undefined) {\n            return Object.values(this.map);\n        }\n        return [];\n    }\n}\n//# sourceMappingURL=service-registry.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { MultiMap } from '../utils/collections.js';\nimport { isOperationCancelled } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\n/**\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\n */\nexport function diagnosticData(code) {\n    return { code };\n}\nexport var ValidationCategory;\n(function (ValidationCategory) {\n    ValidationCategory.all = ['fast', 'slow', 'built-in'];\n})(ValidationCategory || (ValidationCategory = {}));\n/**\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\n */\nexport class ValidationRegistry {\n    constructor(services) {\n        this.entries = new MultiMap();\n        this.reflection = services.shared.AstReflection;\n    }\n    /**\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\n     * or an array of validation checks.\n     *\n     * @param checksRecord Set of validation checks to register.\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    register(checksRecord, thisObj = this, category = 'fast') {\n        if (category === 'built-in') {\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\n        }\n        for (const [type, ch] of Object.entries(checksRecord)) {\n            const callbacks = ch;\n            if (Array.isArray(callbacks)) {\n                for (const check of callbacks) {\n                    const entry = {\n                        check: this.wrapValidationException(check, thisObj),\n                        category\n                    };\n                    this.addEntry(type, entry);\n                }\n            }\n            else if (typeof callbacks === 'function') {\n                const entry = {\n                    check: this.wrapValidationException(callbacks, thisObj),\n                    category\n                };\n                this.addEntry(type, entry);\n            }\n        }\n    }\n    wrapValidationException(check, thisObj) {\n        return async (node, accept, cancelToken) => {\n            try {\n                await check.call(thisObj, node, accept, cancelToken);\n            }\n            catch (err) {\n                if (isOperationCancelled(err)) {\n                    throw err;\n                }\n                console.error('An error occurred during validation:', err);\n                const message = err instanceof Error ? err.message : String(err);\n                if (err instanceof Error && err.stack) {\n                    console.error(err.stack);\n                }\n                accept('error', 'An error occurred during validation: ' + message, { node });\n            }\n        };\n    }\n    addEntry(type, entry) {\n        if (type === 'AstNode') {\n            this.entries.add('AstNode', entry);\n            return;\n        }\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\n            this.entries.add(subtype, entry);\n        }\n    }\n    getChecks(type, categories) {\n        let checks = stream(this.entries.get(type))\n            .concat(this.entries.get('AstNode'));\n        if (categories) {\n            checks = checks.filter(entry => categories.includes(entry.category));\n        }\n        return checks.map(entry => entry.check);\n    }\n}\n//# sourceMappingURL=validation-registry.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\nimport { diagnosticData } from './validation-registry.js';\nexport class DefaultDocumentValidator {\n    constructor(services) {\n        this.validationRegistry = services.validation.ValidationRegistry;\n        this.metadata = services.LanguageMetaData;\n    }\n    async validateDocument(document, options = {}, cancelToken = CancellationToken.None) {\n        const parseResult = document.parseResult;\n        const diagnostics = [];\n        await interruptAndCheck(cancelToken);\n        if (!options.categories || options.categories.includes('built-in')) {\n            this.processLexingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterLexingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LexingError; })) {\n                return diagnostics;\n            }\n            this.processParsingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterParsingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.ParsingError; })) {\n                return diagnostics;\n            }\n            this.processLinkingErrors(document, diagnostics, options);\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LinkingError; })) {\n                return diagnostics;\n            }\n        }\n        // Process custom validations\n        try {\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\n        }\n        catch (err) {\n            if (isOperationCancelled(err)) {\n                throw err;\n            }\n            console.error('An error occurred during validation:', err);\n        }\n        await interruptAndCheck(cancelToken);\n        return diagnostics;\n    }\n    processLexingErrors(parseResult, diagnostics, _options) {\n        for (const lexerError of parseResult.lexerErrors) {\n            const diagnostic = {\n                severity: toDiagnosticSeverity('error'),\n                range: {\n                    start: {\n                        line: lexerError.line - 1,\n                        character: lexerError.column - 1\n                    },\n                    end: {\n                        line: lexerError.line - 1,\n                        character: lexerError.column + lexerError.length - 1\n                    }\n                },\n                message: lexerError.message,\n                data: diagnosticData(DocumentValidator.LexingError),\n                source: this.getSource()\n            };\n            diagnostics.push(diagnostic);\n        }\n    }\n    processParsingErrors(parseResult, diagnostics, _options) {\n        for (const parserError of parseResult.parserErrors) {\n            let range = undefined;\n            // We can run into the chevrotain error recovery here\n            // The token contained in the parser error might be automatically inserted\n            // In this case every position value will be `NaN`\n            if (isNaN(parserError.token.startOffset)) {\n                // Some special parser error types contain a `previousToken`\n                // We can simply append our diagnostic to that token\n                if ('previousToken' in parserError) {\n                    const token = parserError.previousToken;\n                    if (!isNaN(token.startOffset)) {\n                        const position = { line: token.endLine - 1, character: token.endColumn };\n                        range = { start: position, end: position };\n                    }\n                    else {\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\n                        // Point to document start\n                        const position = { line: 0, character: 0 };\n                        range = { start: position, end: position };\n                    }\n                }\n            }\n            else {\n                range = tokenToRange(parserError.token);\n            }\n            if (range) {\n                const diagnostic = {\n                    severity: toDiagnosticSeverity('error'),\n                    range,\n                    message: parserError.message,\n                    data: diagnosticData(DocumentValidator.ParsingError),\n                    source: this.getSource()\n                };\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n    processLinkingErrors(document, diagnostics, _options) {\n        for (const reference of document.references) {\n            const linkingError = reference.error;\n            if (linkingError) {\n                const info = {\n                    node: linkingError.container,\n                    property: linkingError.property,\n                    index: linkingError.index,\n                    data: {\n                        code: DocumentValidator.LinkingError,\n                        containerType: linkingError.container.$type,\n                        property: linkingError.property,\n                        refText: linkingError.reference.$refText\n                    }\n                };\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\n            }\n        }\n    }\n    async validateAst(rootNode, options, cancelToken = CancellationToken.None) {\n        const validationItems = [];\n        const acceptor = (severity, message, info) => {\n            validationItems.push(this.toDiagnostic(severity, message, info));\n        };\n        await Promise.all(streamAst(rootNode).map(async (node) => {\n            await interruptAndCheck(cancelToken);\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n            for (const check of checks) {\n                await check(node, acceptor, cancelToken);\n            }\n        }));\n        return validationItems;\n    }\n    toDiagnostic(severity, message, info) {\n        return {\n            message,\n            range: getDiagnosticRange(info),\n            severity: toDiagnosticSeverity(severity),\n            code: info.code,\n            codeDescription: info.codeDescription,\n            tags: info.tags,\n            relatedInformation: info.relatedInformation,\n            data: info.data,\n            source: this.getSource()\n        };\n    }\n    getSource() {\n        return this.metadata.languageId;\n    }\n}\nexport function getDiagnosticRange(info) {\n    if (info.range) {\n        return info.range;\n    }\n    let cstNode;\n    if (typeof info.property === 'string') {\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\n    }\n    else if (typeof info.keyword === 'string') {\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\n    }\n    cstNode !== null && cstNode !== void 0 ? cstNode : (cstNode = info.node.$cstNode);\n    if (!cstNode) {\n        return {\n            start: { line: 0, character: 0 },\n            end: { line: 0, character: 0 }\n        };\n    }\n    return cstNode.range;\n}\nexport function toDiagnosticSeverity(severity) {\n    switch (severity) {\n        case 'error':\n            return 1; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Error\n        case 'warning':\n            return 2; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Warning\n        case 'info':\n            return 3; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Information\n        case 'hint':\n            return 4; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Hint\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\nexport var DocumentValidator;\n(function (DocumentValidator) {\n    DocumentValidator.LexingError = 'lexing-error';\n    DocumentValidator.ParsingError = 'parsing-error';\n    DocumentValidator.LinkingError = 'linking-error';\n})(DocumentValidator || (DocumentValidator = {}));\n//# sourceMappingURL=document-validator.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { toDocumentSegment } from '../utils/cst-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nexport class DefaultAstNodeDescriptionProvider {\n    constructor(services) {\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n    }\n    createDescription(node, name, document = getDocument(node)) {\n        name !== null && name !== void 0 ? name : (name = this.nameProvider.getName(node));\n        const path = this.astNodeLocator.getAstNodePath(node);\n        if (!name) {\n            throw new Error(`Node at path ${path} has no name.`);\n        }\n        let nameNodeSegment;\n        const nameSegmentGetter = () => { var _a; return nameNodeSegment !== null && nameNodeSegment !== void 0 ? nameNodeSegment : (nameNodeSegment = toDocumentSegment((_a = this.nameProvider.getNameNode(node)) !== null && _a !== void 0 ? _a : node.$cstNode)); };\n        return {\n            node,\n            name,\n            get nameSegment() {\n                return nameSegmentGetter();\n            },\n            selectionSegment: toDocumentSegment(node.$cstNode),\n            type: node.$type,\n            documentUri: document.uri,\n            path\n        };\n    }\n}\nexport class DefaultReferenceDescriptionProvider {\n    constructor(services) {\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    async createDescriptions(document, cancelToken = CancellationToken.None) {\n        const descr = [];\n        const rootNode = document.parseResult.value;\n        for (const astNode of streamAst(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\n                const description = this.createDescription(refInfo);\n                if (description) {\n                    descr.push(description);\n                }\n            });\n        }\n        return descr;\n    }\n    createDescription(refInfo) {\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\n        const refCstNode = refInfo.reference.$refNode;\n        if (!targetNodeDescr || !refCstNode) {\n            return undefined;\n        }\n        const docUri = getDocument(refInfo.container).uri;\n        return {\n            sourceUri: docUri,\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\n            targetUri: targetNodeDescr.documentUri,\n            targetPath: targetNodeDescr.path,\n            segment: toDocumentSegment(refCstNode),\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\n        };\n    }\n}\n//# sourceMappingURL=ast-descriptions.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport class DefaultAstNodeLocator {\n    constructor() {\n        this.segmentSeparator = '/';\n        this.indexSeparator = '@';\n    }\n    getAstNodePath(node) {\n        if (node.$container) {\n            const containerPath = this.getAstNodePath(node.$container);\n            const newSegment = this.getPathSegment(node);\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\n            return nodePath;\n        }\n        return '';\n    }\n    getPathSegment({ $containerProperty, $containerIndex }) {\n        if (!$containerProperty) {\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\n        }\n        if ($containerIndex !== undefined) {\n            return $containerProperty + this.indexSeparator + $containerIndex;\n        }\n        return $containerProperty;\n    }\n    getAstNode(node, path) {\n        const segments = path.split(this.segmentSeparator);\n        return segments.reduce((previousValue, currentValue) => {\n            if (!previousValue || currentValue.length === 0) {\n                return previousValue;\n            }\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\n            if (propertyIndex > 0) {\n                const property = currentValue.substring(0, propertyIndex);\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\n                const array = previousValue[property];\n                return array === null || array === void 0 ? void 0 : array[arrayIndex];\n            }\n            return previousValue[currentValue];\n        }, node);\n    }\n}\n//# sourceMappingURL=ast-node-locator.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Deferred } from '../utils/promise-utils.js';\n/**\n * Base configuration provider for building up other configuration providers\n */\nexport class DefaultConfigurationProvider {\n    constructor(services) {\n        this._ready = new Deferred();\n        this.settings = {};\n        this.workspaceConfig = false;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    initialize(params) {\n        var _a, _b;\n        this.workspaceConfig = (_b = (_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.configuration) !== null && _b !== void 0 ? _b : false;\n    }\n    async initialized(params) {\n        if (this.workspaceConfig) {\n            if (params.register) {\n                // params.register(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const languages = this.serviceRegistry.all;\n                params.register({\n                    // Listen to configuration changes for all languages\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\n                });\n            }\n            if (params.fetchConfiguration) {\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const configToUpdate = this.serviceRegistry.all.map(lang => ({\n                    // Fetch the configuration changes for all languages\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\n                }));\n                // get workspace configurations (default scope URI)\n                const configs = await params.fetchConfiguration(configToUpdate);\n                configToUpdate.forEach((conf, idx) => {\n                    this.updateSectionConfiguration(conf.section, configs[idx]);\n                });\n            }\n        }\n        this._ready.resolve();\n    }\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change) {\n        if (!change.settings) {\n            return;\n        }\n        Object.keys(change.settings).forEach(section => {\n            this.updateSectionConfiguration(section, change.settings[section]);\n        });\n    }\n    updateSectionConfiguration(section, configuration) {\n        this.settings[section] = configuration;\n    }\n    /**\n    * Returns a configuration value stored for the given language.\n    *\n    * @param language The language id\n    * @param configuration Configuration name\n    */\n    async getConfiguration(language, configuration) {\n        await this.ready;\n        const sectionName = this.toSectionName(language);\n        if (this.settings[sectionName]) {\n            return this.settings[sectionName][configuration];\n        }\n    }\n    toSectionName(languageId) {\n        return `${languageId}`;\n    }\n}\n//# sourceMappingURL=configuration.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport var Disposable;\n(function (Disposable) {\n    function create(callback) {\n        return {\n            dispose: async () => await callback()\n        };\n    }\n    Disposable.create = create;\n})(Disposable || (Disposable = {}));\n//# sourceMappingURL=disposable.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Disposable } from '../utils/disposable.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { OperationCancelled, interruptAndCheck } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { ValidationCategory } from '../validation/validation-registry.js';\nimport { DocumentState } from './documents.js';\nexport class DefaultDocumentBuilder {\n    constructor(services) {\n        this.updateBuildOptions = {\n            // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\n            validation: {\n                categories: ['built-in', 'fast']\n            }\n        };\n        this.updateListeners = [];\n        this.buildPhaseListeners = new MultiMap();\n        this.buildState = new Map();\n        this.documentBuildWaiters = new Map();\n        this.currentState = DocumentState.Changed;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.indexManager = services.workspace.IndexManager;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    async build(documents, options = {}, cancelToken = CancellationToken.None) {\n        var _a, _b;\n        for (const document of documents) {\n            const key = document.uri.toString();\n            if (document.state === DocumentState.Validated) {\n                if (typeof options.validation === 'boolean' && options.validation) {\n                    // Force re-running all validation checks\n                    document.state = DocumentState.IndexedReferences;\n                    document.diagnostics = undefined;\n                    this.buildState.delete(key);\n                }\n                else if (typeof options.validation === 'object') {\n                    const buildState = this.buildState.get(key);\n                    const previousCategories = (_a = buildState === null || buildState === void 0 ? void 0 : buildState.result) === null || _a === void 0 ? void 0 : _a.validationChecks;\n                    if (previousCategories) {\n                        // Validation with explicit options was requested for a document that has already been partly validated.\n                        // In this case, we need to merge the previous validation categories with the new ones.\n                        const newCategories = (_b = options.validation.categories) !== null && _b !== void 0 ? _b : ValidationCategory.all;\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\n                        if (categories.length > 0) {\n                            this.buildState.set(key, {\n                                completed: false,\n                                options: {\n                                    validation: Object.assign(Object.assign({}, options.validation), { categories })\n                                },\n                                result: buildState.result\n                            });\n                            document.state = DocumentState.IndexedReferences;\n                        }\n                    }\n                }\n            }\n            else {\n                // Default: forget any previous build options\n                this.buildState.delete(key);\n            }\n        }\n        this.currentState = DocumentState.Changed;\n        await this.emitUpdate(documents.map(e => e.uri), []);\n        await this.buildDocuments(documents, options, cancelToken);\n    }\n    async update(changed, deleted, cancelToken = CancellationToken.None) {\n        this.currentState = DocumentState.Changed;\n        // Remove all metadata of documents that are reported as deleted\n        for (const deletedUri of deleted) {\n            this.langiumDocuments.deleteDocument(deletedUri);\n            this.buildState.delete(deletedUri.toString());\n            this.indexManager.remove(deletedUri);\n        }\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\n        for (const changedUri of changed) {\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\n            if (!invalidated) {\n                // We create an unparsed, invalid document.\n                // This will be parsed as soon as we reach the first document builder phase.\n                // This allows to cancel the parsing process later in case we need it.\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\n                newDocument.state = DocumentState.Changed;\n                this.langiumDocuments.addDocument(newDocument);\n            }\n            this.buildState.delete(changedUri.toString());\n        }\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\n        this.langiumDocuments.all\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\n            .forEach(doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            linker.unlink(doc);\n            doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\n            doc.diagnostics = undefined;\n        });\n        // Notify listeners of the update\n        await this.emitUpdate(changed, deleted);\n        // Only allow interrupting the execution after all state changes are done\n        await interruptAndCheck(cancelToken);\n        // Collect all documents that we should rebuild\n        const rebuildDocuments = this.langiumDocuments.all\n            .filter(doc => {\n            var _a;\n            // This includes those that were reported as changed and those that we selected for relinking\n            return doc.state < DocumentState.Linked\n                // This includes those for which a previous build has been cancelled\n                || !((_a = this.buildState.get(doc.uri.toString())) === null || _a === void 0 ? void 0 : _a.completed);\n        })\n            .toArray();\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\n    }\n    async emitUpdate(changed, deleted) {\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\n    }\n    /**\n     * Check whether the given document should be relinked after changes were found in the given URIs.\n     */\n    shouldRelink(document, changedUris) {\n        // Relink documents with linking errors -- maybe those references can be resolved now\n        if (document.references.some(ref => ref.error !== undefined)) {\n            return true;\n        }\n        // Check whether the document is affected by any of the changed URIs\n        return this.indexManager.isAffected(document, changedUris);\n    }\n    onUpdate(callback) {\n        this.updateListeners.push(callback);\n        return Disposable.create(() => {\n            const index = this.updateListeners.indexOf(callback);\n            if (index >= 0) {\n                this.updateListeners.splice(index, 1);\n            }\n        });\n    }\n    /**\n     * Build the given documents by stepping through all build phases. If a document's state indicates\n     * that a certain build phase is already done, the phase is skipped for that document.\n     */\n    async buildDocuments(documents, options, cancelToken) {\n        this.prepareBuild(documents, options);\n        // 0. Parse content\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc => this.langiumDocumentFactory.update(doc, cancelToken));\n        // 1. Index content\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc => this.indexManager.updateContent(doc, cancelToken));\n        // 2. Compute scopes\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async (doc) => {\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\n        });\n        // 3. Linking\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            return linker.link(doc, cancelToken);\n        });\n        // 4. Index references\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc => this.indexManager.updateReferences(doc, cancelToken));\n        // 5. Validation\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc => this.validate(doc, cancelToken));\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\n        for (const doc of documents) {\n            const state = this.buildState.get(doc.uri.toString());\n            if (state) {\n                state.completed = true;\n            }\n        }\n    }\n    prepareBuild(documents, options) {\n        for (const doc of documents) {\n            const key = doc.uri.toString();\n            const state = this.buildState.get(key);\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\n            // and continue where it was cancelled.\n            if (!state || state.completed) {\n                this.buildState.set(key, {\n                    completed: false,\n                    options,\n                    result: state === null || state === void 0 ? void 0 : state.result\n                });\n            }\n        }\n    }\n    async runCancelable(documents, targetState, cancelToken, callback) {\n        const filtered = documents.filter(e => e.state < targetState);\n        for (const document of filtered) {\n            await interruptAndCheck(cancelToken);\n            await callback(document);\n            document.state = targetState;\n        }\n        await this.notifyBuildPhase(filtered, targetState, cancelToken);\n        this.currentState = targetState;\n    }\n    onBuildPhase(targetState, callback) {\n        this.buildPhaseListeners.add(targetState, callback);\n        return Disposable.create(() => {\n            this.buildPhaseListeners.delete(targetState, callback);\n        });\n    }\n    waitUntil(state, uriOrToken, cancelToken) {\n        let uri = undefined;\n        if (uriOrToken && 'path' in uriOrToken) {\n            uri = uriOrToken;\n        }\n        else {\n            cancelToken = uriOrToken;\n        }\n        cancelToken !== null && cancelToken !== void 0 ? cancelToken : (cancelToken = CancellationToken.None);\n        if (uri) {\n            const document = this.langiumDocuments.getDocument(uri);\n            if (document && document.state > state) {\n                return Promise.resolve(uri);\n            }\n        }\n        if (this.currentState >= state) {\n            return Promise.resolve(undefined);\n        }\n        else if (cancelToken.isCancellationRequested) {\n            return Promise.reject(OperationCancelled);\n        }\n        return new Promise((resolve, reject) => {\n            const buildDisposable = this.onBuildPhase(state, () => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                if (uri) {\n                    const document = this.langiumDocuments.getDocument(uri);\n                    resolve(document === null || document === void 0 ? void 0 : document.uri);\n                }\n                else {\n                    resolve(undefined);\n                }\n            });\n            const cancelDisposable = cancelToken.onCancellationRequested(() => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                reject(OperationCancelled);\n            });\n        });\n    }\n    async notifyBuildPhase(documents, state, cancelToken) {\n        if (documents.length === 0) {\n            // Don't notify when no document has been processed\n            return;\n        }\n        const listeners = this.buildPhaseListeners.get(state);\n        for (const listener of listeners) {\n            await interruptAndCheck(cancelToken);\n            await listener(documents, cancelToken);\n        }\n    }\n    /**\n     * Determine whether the given document should be validated during a build. The default\n     * implementation checks the `validation` property of the build options. If it's set to `true`\n     * or a `ValidationOptions` object, the document is included in the validation phase.\n     */\n    shouldValidate(document) {\n        return Boolean(this.getBuildOptions(document).validation);\n    }\n    /**\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\n     * If the document already contains diagnostics, the new ones are added to the list.\n     */\n    async validate(document, cancelToken) {\n        var _a, _b;\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\n        const validationSetting = this.getBuildOptions(document).validation;\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\n        if (document.diagnostics) {\n            document.diagnostics.push(...diagnostics);\n        }\n        else {\n            document.diagnostics = diagnostics;\n        }\n        // Store information about the executed validation in the build state\n        const state = this.buildState.get(document.uri.toString());\n        if (state) {\n            (_a = state.result) !== null && _a !== void 0 ? _a : (state.result = {});\n            const newCategories = (_b = options === null || options === void 0 ? void 0 : options.categories) !== null && _b !== void 0 ? _b : ValidationCategory.all;\n            if (state.result.validationChecks) {\n                state.result.validationChecks.push(...newCategories);\n            }\n            else {\n                state.result.validationChecks = [...newCategories];\n            }\n        }\n    }\n    getBuildOptions(document) {\n        var _a, _b;\n        return (_b = (_a = this.buildState.get(document.uri.toString())) === null || _a === void 0 ? void 0 : _a.options) !== null && _b !== void 0 ? _b : {};\n    }\n}\n//# sourceMappingURL=document-builder.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { getDocument } from '../utils/ast-utils.js';\nimport { ContextCache } from '../utils/caching.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { stream } from '../utils/stream.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nexport class DefaultIndexManager {\n    constructor(services) {\n        /**\n         * The symbol index stores all `AstNodeDescription` items exported by a document.\n         * The key used in this map is the string representation of the specific document URI.\n         */\n        this.symbolIndex = new Map();\n        /**\n         * This is a cache for the `allElements()` method.\n         * It caches the descriptions from `symbolIndex` grouped by types.\n         */\n        this.symbolByTypeIndex = new ContextCache();\n        /**\n         * This index keeps track of all `ReferenceDescription` items exported by a document.\n         * This is used to compute which elements are affected by a document change\n         * and for finding references to an AST node.\n         */\n        this.referenceIndex = new Map();\n        this.documents = services.workspace.LangiumDocuments;\n        this.serviceRegistry = services.ServiceRegistry;\n        this.astReflection = services.AstReflection;\n    }\n    findAllReferences(targetNode, astNodePath) {\n        const targetDocUri = getDocument(targetNode).uri;\n        const result = [];\n        this.referenceIndex.forEach(docRefs => {\n            docRefs.forEach(refDescr => {\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\n                    result.push(refDescr);\n                }\n            });\n        });\n        return stream(result);\n    }\n    allElements(nodeType, uris) {\n        let documentUris = stream(this.symbolIndex.keys());\n        if (uris) {\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\n        }\n        return documentUris\n            .map(uri => this.getFileDescriptions(uri, nodeType))\n            .flat();\n    }\n    getFileDescriptions(uri, nodeType) {\n        var _a;\n        if (!nodeType) {\n            return (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n        }\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\n            var _a;\n            const allFileDescriptions = (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\n        });\n        return descriptions;\n    }\n    remove(uri) {\n        const uriString = uri.toString();\n        this.symbolIndex.delete(uriString);\n        this.symbolByTypeIndex.clear(uriString);\n        this.referenceIndex.delete(uriString);\n    }\n    async updateContent(document, cancelToken = CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\n        const uri = document.uri.toString();\n        this.symbolIndex.set(uri, exports);\n        this.symbolByTypeIndex.clear(uri);\n    }\n    async updateReferences(document, cancelToken = CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\n        this.referenceIndex.set(document.uri.toString(), indexData);\n    }\n    isAffected(document, changedUris) {\n        const references = this.referenceIndex.get(document.uri.toString());\n        if (!references) {\n            return false;\n        }\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\n    }\n}\n//# sourceMappingURL=index-manager.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\nimport { URI, UriUtils } from '../utils/uri-utils.js';\nexport class DefaultWorkspaceManager {\n    constructor(services) {\n        this.initialBuildOptions = {};\n        this._ready = new Deferred();\n        this.serviceRegistry = services.ServiceRegistry;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.documentBuilder = services.workspace.DocumentBuilder;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n        this.mutex = services.workspace.WorkspaceLock;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    initialize(params) {\n        var _a;\n        this.folders = (_a = params.workspaceFolders) !== null && _a !== void 0 ? _a : undefined;\n    }\n    initialized(_params) {\n        // Initialize the workspace even if there are no workspace folders\n        // We still want to load additional documents (language library or similar) during initialization\n        return this.mutex.write(token => { var _a; return this.initializeWorkspace((_a = this.folders) !== null && _a !== void 0 ? _a : [], token); });\n    }\n    async initializeWorkspace(folders, cancelToken = CancellationToken.None) {\n        const documents = await this.performStartup(folders);\n        // Only after creating all documents do we check whether we need to cancel the initialization\n        // The document builder will later pick up on all unprocessed documents\n        await interruptAndCheck(cancelToken);\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\n    }\n    /**\n     * Performs the uninterruptable startup sequence of the workspace manager.\n     * This methods loads all documents in the workspace and other documents and returns them.\n     */\n    async performStartup(folders) {\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\n        const documents = [];\n        const collector = (document) => {\n            documents.push(document);\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\n                this.langiumDocuments.addDocument(document);\n            }\n        };\n        // Even though we don't await the initialization of the workspace manager,\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\n        await this.loadAdditionalDocuments(folders, collector);\n        await Promise.all(folders.map(wf => [wf, this.getRootFolder(wf)])\n            .map(async (entry) => this.traverseFolder(...entry, fileExtensions, collector)));\n        this._ready.resolve();\n        return documents;\n    }\n    /**\n     * Load all additional documents that shall be visible in the context of the given workspace\n     * folders and add them to the collector. This can be used to include built-in libraries of\n     * your language, which can be either loaded from provided files or constructed in memory.\n     */\n    loadAdditionalDocuments(_folders, _collector) {\n        return Promise.resolve();\n    }\n    /**\n     * Determine the root folder of the source documents in the given workspace folder.\n     * The default implementation returns the URI of the workspace folder, but you can override\n     * this to return a subfolder like `src` instead.\n     */\n    getRootFolder(workspaceFolder) {\n        return URI.parse(workspaceFolder.uri);\n    }\n    /**\n     * Traverse the file system folder identified by the given URI and its subfolders. All\n     * contained files that match the file extensions are added to the collector.\n     */\n    async traverseFolder(workspaceFolder, folderPath, fileExtensions, collector) {\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\n        await Promise.all(content.map(async (entry) => {\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\n                if (entry.isDirectory) {\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\n                }\n                else if (entry.isFile) {\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\n                    collector(document);\n                }\n            }\n        }));\n    }\n    /**\n     * Determine whether the given folder entry shall be included while indexing the workspace.\n     */\n    includeEntry(_workspaceFolder, entry, fileExtensions) {\n        const name = UriUtils.basename(entry.uri);\n        if (name.startsWith('.')) {\n            return false;\n        }\n        if (entry.isDirectory) {\n            return name !== 'node_modules' && name !== 'out';\n        }\n        else if (entry.isFile) {\n            const extname = UriUtils.extname(entry.uri);\n            return fileExtensions.includes(extname);\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=workspace-manager.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Lexer as ChevrotainLexer } from 'chevrotain';\nexport class DefaultLexer {\n    constructor(services) {\n        const tokens = services.parser.TokenBuilder.buildTokens(services.Grammar, {\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\n        });\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\n            positionTracking: 'full'\n        });\n    }\n    get definition() {\n        return this.tokenTypes;\n    }\n    tokenize(text) {\n        var _a;\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\n        return {\n            tokens: chevrotainResult.tokens,\n            errors: chevrotainResult.errors,\n            hidden: (_a = chevrotainResult.groups.hidden) !== null && _a !== void 0 ? _a : []\n        };\n    }\n    toTokenTypeDictionary(buildTokens) {\n        if (isTokenTypeDictionary(buildTokens))\n            return buildTokens;\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\n        const res = {};\n        tokens.forEach(token => res[token.name] = token);\n        return res;\n    }\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenType array\n */\nexport function isTokenTypeArray(tokenVocabulary) {\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\n}\n/**\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\n */\nexport function isIMultiModeLexerDefinition(tokenVocabulary) {\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\n */\nexport function isTokenTypeDictionary(tokenVocabulary) {\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\n}\n//# sourceMappingURL=lexer.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Position, Range } from 'vscode-languageserver-types';\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\nimport { URI } from '../utils/uri-utils.js';\nexport function parseJSDoc(node, start, options) {\n    let opts;\n    let position;\n    if (typeof node === 'string') {\n        position = start;\n        opts = options;\n    }\n    else {\n        position = node.range.start;\n        opts = start;\n    }\n    if (!position) {\n        position = Position.create(0, 0);\n    }\n    const lines = getLines(node);\n    const normalizedOptions = normalizeOptions(opts);\n    const tokens = tokenize({\n        lines,\n        position,\n        options: normalizedOptions\n    });\n    return parseJSDocComment({\n        index: 0,\n        tokens,\n        position\n    });\n}\nexport function isJSDoc(node, options) {\n    const normalizedOptions = normalizeOptions(options);\n    const lines = getLines(node);\n    if (lines.length === 0) {\n        return false;\n    }\n    const first = lines[0];\n    const last = lines[lines.length - 1];\n    const firstRegex = normalizedOptions.start;\n    const lastRegex = normalizedOptions.end;\n    return Boolean(firstRegex === null || firstRegex === void 0 ? void 0 : firstRegex.exec(first)) && Boolean(lastRegex === null || lastRegex === void 0 ? void 0 : lastRegex.exec(last));\n}\nfunction getLines(node) {\n    let content = '';\n    if (typeof node === 'string') {\n        content = node;\n    }\n    else {\n        content = node.text;\n    }\n    const lines = content.split(NEWLINE_REGEXP);\n    return lines;\n}\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\nfunction tokenize(context) {\n    var _a, _b, _c;\n    const tokens = [];\n    let currentLine = context.position.line;\n    let currentCharacter = context.position.character;\n    for (let i = 0; i < context.lines.length; i++) {\n        const first = i === 0;\n        const last = i === context.lines.length - 1;\n        let line = context.lines[i];\n        let index = 0;\n        if (first && context.options.start) {\n            const match = (_a = context.options.start) === null || _a === void 0 ? void 0 : _a.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        else {\n            const match = (_b = context.options.line) === null || _b === void 0 ? void 0 : _b.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        if (last) {\n            const match = (_c = context.options.end) === null || _c === void 0 ? void 0 : _c.exec(line);\n            if (match) {\n                line = line.substring(0, match.index);\n            }\n        }\n        line = line.substring(0, lastCharacter(line));\n        const whitespaceEnd = skipWhitespace(line, index);\n        if (whitespaceEnd >= line.length) {\n            // Only create a break token when we already have previous tokens\n            if (tokens.length > 0) {\n                const position = Position.create(currentLine, currentCharacter);\n                tokens.push({\n                    type: 'break',\n                    content: '',\n                    range: Range.create(position, position)\n                });\n            }\n        }\n        else {\n            tagRegex.lastIndex = index;\n            const tagMatch = tagRegex.exec(line);\n            if (tagMatch) {\n                const fullMatch = tagMatch[0];\n                const value = tagMatch[1];\n                const start = Position.create(currentLine, currentCharacter + index);\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\n                tokens.push({\n                    type: 'tag',\n                    content: value,\n                    range: Range.create(start, end)\n                });\n                index += fullMatch.length;\n                index = skipWhitespace(line, index);\n            }\n            if (index < line.length) {\n                const rest = line.substring(index);\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\n            }\n        }\n        currentLine++;\n        currentCharacter = 0;\n    }\n    // Remove last break token if there is one\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\n        return tokens.slice(0, -1);\n    }\n    return tokens;\n}\nfunction buildInlineTokens(tags, line, lineIndex, characterIndex) {\n    const tokens = [];\n    if (tags.length === 0) {\n        const start = Position.create(lineIndex, characterIndex);\n        const end = Position.create(lineIndex, characterIndex + line.length);\n        tokens.push({\n            type: 'text',\n            content: line,\n            range: Range.create(start, end)\n        });\n    }\n    else {\n        let lastIndex = 0;\n        for (const match of tags) {\n            const matchIndex = match.index;\n            const startContent = line.substring(lastIndex, matchIndex);\n            if (startContent.length > 0) {\n                tokens.push({\n                    type: 'text',\n                    content: line.substring(lastIndex, matchIndex),\n                    range: Range.create(Position.create(lineIndex, lastIndex + characterIndex), Position.create(lineIndex, matchIndex + characterIndex))\n                });\n            }\n            let offset = startContent.length + 1;\n            const tagName = match[1];\n            tokens.push({\n                type: 'inline-tag',\n                content: tagName,\n                range: Range.create(Position.create(lineIndex, lastIndex + offset + characterIndex), Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex))\n            });\n            offset += tagName.length;\n            if (match.length === 4) {\n                offset += match[2].length;\n                const value = match[3];\n                tokens.push({\n                    type: 'text',\n                    content: value,\n                    range: Range.create(Position.create(lineIndex, lastIndex + offset + characterIndex), Position.create(lineIndex, lastIndex + offset + value.length + characterIndex))\n                });\n            }\n            else {\n                tokens.push({\n                    type: 'text',\n                    content: '',\n                    range: Range.create(Position.create(lineIndex, lastIndex + offset + characterIndex), Position.create(lineIndex, lastIndex + offset + characterIndex))\n                });\n            }\n            lastIndex = matchIndex + match[0].length;\n        }\n        const endContent = line.substring(lastIndex);\n        if (endContent.length > 0) {\n            tokens.push({\n                type: 'text',\n                content: endContent,\n                range: Range.create(Position.create(lineIndex, lastIndex + characterIndex), Position.create(lineIndex, lastIndex + characterIndex + endContent.length))\n            });\n        }\n    }\n    return tokens;\n}\nconst nonWhitespaceRegex = /\\S/;\nconst whitespaceEndRegex = /\\s*$/;\nfunction skipWhitespace(line, index) {\n    const match = line.substring(index).match(nonWhitespaceRegex);\n    if (match) {\n        return index + match.index;\n    }\n    else {\n        return line.length;\n    }\n}\nfunction lastCharacter(line) {\n    const match = line.match(whitespaceEndRegex);\n    if (match && typeof match.index === 'number') {\n        return match.index;\n    }\n    return undefined;\n}\n// Parsing\nfunction parseJSDocComment(context) {\n    var _a, _b, _c, _d;\n    const startPosition = Position.create(context.position.line, context.position.character);\n    if (context.tokens.length === 0) {\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\n    }\n    const elements = [];\n    while (context.index < context.tokens.length) {\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\n        if (element) {\n            elements.push(element);\n        }\n    }\n    const start = (_b = (_a = elements[0]) === null || _a === void 0 ? void 0 : _a.range.start) !== null && _b !== void 0 ? _b : startPosition;\n    const end = (_d = (_c = elements[elements.length - 1]) === null || _c === void 0 ? void 0 : _c.range.end) !== null && _d !== void 0 ? _d : startPosition;\n    return new JSDocCommentImpl(elements, Range.create(start, end));\n}\nfunction parseJSDocElement(context, last) {\n    const next = context.tokens[context.index];\n    if (next.type === 'tag') {\n        return parseJSDocTag(context, false);\n    }\n    else if (next.type === 'text' || next.type === 'inline-tag') {\n        return parseJSDocText(context);\n    }\n    else {\n        appendEmptyLine(next, last);\n        context.index++;\n        return undefined;\n    }\n}\nfunction appendEmptyLine(token, element) {\n    if (element) {\n        const line = new JSDocLineImpl('', token.range);\n        if ('inlines' in element) {\n            element.inlines.push(line);\n        }\n        else {\n            element.content.inlines.push(line);\n        }\n    }\n}\nfunction parseJSDocText(context) {\n    let token = context.tokens[context.index];\n    const firstToken = token;\n    let lastToken = token;\n    const lines = [];\n    while (token && token.type !== 'break' && token.type !== 'tag') {\n        lines.push(parseJSDocInline(context));\n        lastToken = token;\n        token = context.tokens[context.index];\n    }\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\n}\nfunction parseJSDocInline(context) {\n    const token = context.tokens[context.index];\n    if (token.type === 'inline-tag') {\n        return parseJSDocTag(context, true);\n    }\n    else {\n        return parseJSDocLine(context);\n    }\n}\nfunction parseJSDocTag(context, inline) {\n    const tagToken = context.tokens[context.index++];\n    const name = tagToken.content.substring(1);\n    const nextToken = context.tokens[context.index];\n    if ((nextToken === null || nextToken === void 0 ? void 0 : nextToken.type) === 'text') {\n        if (inline) {\n            const docLine = parseJSDocLine(context);\n            return new JSDocTagImpl(name, new JSDocTextImpl([docLine], docLine.range), inline, Range.create(tagToken.range.start, docLine.range.end));\n        }\n        else {\n            const textDoc = parseJSDocText(context);\n            return new JSDocTagImpl(name, textDoc, inline, Range.create(tagToken.range.start, textDoc.range.end));\n        }\n    }\n    else {\n        const range = tagToken.range;\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\n    }\n}\nfunction parseJSDocLine(context) {\n    const token = context.tokens[context.index++];\n    return new JSDocLineImpl(token.content, token.range);\n}\nfunction normalizeOptions(options) {\n    if (!options) {\n        return normalizeOptions({\n            start: '/**',\n            end: '*/',\n            line: '*'\n        });\n    }\n    const { start, end, line } = options;\n    return {\n        start: normalizeOption(start, true),\n        end: normalizeOption(end, false),\n        line: normalizeOption(line, true)\n    };\n}\nfunction normalizeOption(option, start) {\n    if (typeof option === 'string' || typeof option === 'object') {\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\n        if (start) {\n            return new RegExp(`^\\\\s*${escaped}`);\n        }\n        else {\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\n        }\n    }\n    else {\n        return option;\n    }\n}\nclass JSDocCommentImpl {\n    constructor(elements, range) {\n        this.elements = elements;\n        this.range = range;\n    }\n    getTag(name) {\n        return this.getAllTags().find(e => e.name === name);\n    }\n    getTags(name) {\n        return this.getAllTags().filter(e => e.name === name);\n    }\n    getAllTags() {\n        return this.elements.filter((e) => 'name' in e);\n    }\n    toString() {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toString();\n            }\n            else {\n                const text = element.toString();\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n    toMarkdown(options) {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toMarkdown(options);\n            }\n            else {\n                const text = element.toMarkdown(options);\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n}\nclass JSDocTagImpl {\n    constructor(name, content, inline, range) {\n        this.name = name;\n        this.content = content;\n        this.inline = inline;\n        this.range = range;\n    }\n    toString() {\n        let text = `@${this.name}`;\n        const content = this.content.toString();\n        if (this.content.inlines.length === 1) {\n            text = `${text} ${content}`;\n        }\n        else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        }\n        else {\n            return text;\n        }\n    }\n    toMarkdown(options) {\n        var _a, _b;\n        return (_b = (_a = options === null || options === void 0 ? void 0 : options.renderTag) === null || _a === void 0 ? void 0 : _a.call(options, this)) !== null && _b !== void 0 ? _b : this.toMarkdownDefault(options);\n    }\n    toMarkdownDefault(options) {\n        const content = this.content.toMarkdown(options);\n        if (this.inline) {\n            const rendered = renderInlineTag(this.name, content, options !== null && options !== void 0 ? options : {});\n            if (typeof rendered === 'string') {\n                return rendered;\n            }\n        }\n        let marker = '';\n        if ((options === null || options === void 0 ? void 0 : options.tag) === 'italic' || (options === null || options === void 0 ? void 0 : options.tag) === undefined) {\n            marker = '*';\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.tag) === 'bold') {\n            marker = '**';\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.tag) === 'bold-italic') {\n            marker = '***';\n        }\n        let text = `${marker}@${this.name}${marker}`;\n        if (this.content.inlines.length === 1) {\n            text = `${text} — ${content}`;\n        }\n        else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        }\n        else {\n            return text;\n        }\n    }\n}\nfunction renderInlineTag(tag, content, options) {\n    var _a, _b;\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\n        const index = content.indexOf(' ');\n        let display = content;\n        if (index > 0) {\n            const displayStart = skipWhitespace(content, index);\n            display = content.substring(displayStart);\n            content = content.substring(0, index);\n        }\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\n            // Surround the display value in a markdown inline code block\n            display = `\\`${display}\\``;\n        }\n        const renderedLink = (_b = (_a = options.renderLink) === null || _a === void 0 ? void 0 : _a.call(options, content, display)) !== null && _b !== void 0 ? _b : renderLinkDefault(content, display);\n        return renderedLink;\n    }\n    return undefined;\n}\nfunction renderLinkDefault(content, display) {\n    try {\n        URI.parse(content, true);\n        return `[${display}](${content})`;\n    }\n    catch (_a) {\n        return content;\n    }\n}\nclass JSDocTextImpl {\n    constructor(lines, range) {\n        this.inlines = lines;\n        this.range = range;\n    }\n    toString() {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toString();\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n    toMarkdown(options) {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toMarkdown(options);\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n}\nclass JSDocLineImpl {\n    constructor(text, range) {\n        this.text = text;\n        this.range = range;\n    }\n    toString() {\n        return this.text;\n    }\n    toMarkdown() {\n        return this.text;\n    }\n}\nfunction fillNewlines(text) {\n    if (text.endsWith('\\n')) {\n        return '\\n';\n    }\n    else {\n        return '\\n\\n';\n    }\n}\n//# sourceMappingURL=jsdoc.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\nexport class JSDocDocumentationProvider {\n    constructor(services) {\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    getDocumentation(node) {\n        const comment = this.commentProvider.getComment(node);\n        if (comment && isJSDoc(comment)) {\n            const parsedJSDoc = parseJSDoc(comment);\n            return parsedJSDoc.toMarkdown({\n                renderLink: (link, display) => {\n                    return this.documentationLinkRenderer(node, link, display);\n                },\n                renderTag: (tag) => {\n                    return this.documentationTagRenderer(node, tag);\n                }\n            });\n        }\n        return undefined;\n    }\n    documentationLinkRenderer(node, name, display) {\n        var _a;\n        const description = (_a = this.findNameInPrecomputedScopes(node, name)) !== null && _a !== void 0 ? _a : this.findNameInGlobalScope(node, name);\n        if (description && description.nameSegment) {\n            const line = description.nameSegment.range.start.line + 1;\n            const character = description.nameSegment.range.start.character + 1;\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\n            return `[${display}](${uri.toString()})`;\n        }\n        else {\n            return undefined;\n        }\n    }\n    documentationTagRenderer(_node, _tag) {\n        // Fall back to the default tag rendering\n        return undefined;\n    }\n    findNameInPrecomputedScopes(node, name) {\n        const document = getDocument(node);\n        const precomputed = document.precomputedScopes;\n        if (!precomputed) {\n            return undefined;\n        }\n        let currentNode = node;\n        do {\n            const allDescriptions = precomputed.get(currentNode);\n            const description = allDescriptions.find(e => e.name === name);\n            if (description) {\n                return description;\n            }\n            currentNode = currentNode.$container;\n        } while (currentNode);\n        return undefined;\n    }\n    findNameInGlobalScope(node, name) {\n        const description = this.indexManager.allElements().find(e => e.name === name);\n        return description;\n    }\n}\n//# sourceMappingURL=documentation-provider.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\nimport { findCommentNode } from '../utils/cst-utils.js';\nexport class DefaultCommentProvider {\n    constructor(services) {\n        this.grammarConfig = () => services.parser.GrammarConfig;\n    }\n    getComment(node) {\n        var _a;\n        if (isAstNodeWithComment(node)) {\n            return node.$comment;\n        }\n        return (_a = findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)) === null || _a === void 0 ? void 0 : _a.text;\n    }\n}\n//# sourceMappingURL=comment-provider.js.map","/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n// eslint-disable-next-line no-restricted-imports\nexport * from 'vscode-jsonrpc/lib/common/events.js';\n//# sourceMappingURL=event.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\nimport { Emitter } from '../utils/event.js';\n/**\n * Default implementation of the async parser. This implementation only wraps the sync parser in a promise.\n *\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nexport class DefaultAsyncParser {\n    constructor(services) {\n        this.syncParser = services.parser.LangiumParser;\n    }\n    parse(text) {\n        return Promise.resolve(this.syncParser.parse(text));\n    }\n}\nexport class AbstractThreadedAsyncParser {\n    constructor(services) {\n        /**\n         * The thread count determines how many threads are used to parse files in parallel.\n         * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\n         */\n        this.threadCount = 8;\n        /**\n         * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\n         * The default value is 200(ms).\n         */\n        this.terminationDelay = 200;\n        this.workerPool = [];\n        this.queue = [];\n        this.hydrator = services.serializer.Hydrator;\n    }\n    initializeWorkers() {\n        while (this.workerPool.length < this.threadCount) {\n            const worker = this.createWorker();\n            worker.onReady(() => {\n                if (this.queue.length > 0) {\n                    const deferred = this.queue.shift();\n                    if (deferred) {\n                        worker.lock();\n                        deferred.resolve(worker);\n                    }\n                }\n            });\n            this.workerPool.push(worker);\n        }\n    }\n    async parse(text, cancelToken) {\n        const worker = await this.acquireParserWorker(cancelToken);\n        const deferred = new Deferred();\n        let timeout;\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\n        const cancellation = cancelToken.onCancellationRequested(() => {\n            timeout = setTimeout(() => {\n                this.terminateWorker(worker);\n            }, this.terminationDelay);\n        });\n        worker.parse(text).then(result => {\n            const hydrated = this.hydrator.hydrate(result);\n            deferred.resolve(hydrated);\n        }).catch(err => {\n            deferred.reject(err);\n        }).finally(() => {\n            cancellation.dispose();\n            clearTimeout(timeout);\n        });\n        return deferred.promise;\n    }\n    terminateWorker(worker) {\n        worker.terminate();\n        const index = this.workerPool.indexOf(worker);\n        if (index >= 0) {\n            this.workerPool.splice(index, 1);\n        }\n    }\n    async acquireParserWorker(cancelToken) {\n        this.initializeWorkers();\n        for (const worker of this.workerPool) {\n            if (worker.ready) {\n                worker.lock();\n                return worker;\n            }\n        }\n        const deferred = new Deferred();\n        cancelToken.onCancellationRequested(() => {\n            const index = this.queue.indexOf(deferred);\n            if (index >= 0) {\n                this.queue.splice(index, 1);\n            }\n            deferred.reject(OperationCancelled);\n        });\n        this.queue.push(deferred);\n        return deferred.promise;\n    }\n}\nexport class ParserWorker {\n    get ready() {\n        return this._ready;\n    }\n    get onReady() {\n        return this.onReadyEmitter.event;\n    }\n    constructor(sendMessage, onMessage, onError, terminate) {\n        this.onReadyEmitter = new Emitter();\n        this.deferred = new Deferred();\n        this._ready = true;\n        this._parsing = false;\n        this.sendMessage = sendMessage;\n        this._terminate = terminate;\n        onMessage(result => {\n            const parseResult = result;\n            this.deferred.resolve(parseResult);\n            this.unlock();\n        });\n        onError(error => {\n            this.deferred.reject(error);\n            this.unlock();\n        });\n    }\n    terminate() {\n        this.deferred.reject(OperationCancelled);\n        this._terminate();\n    }\n    lock() {\n        this._ready = false;\n    }\n    unlock() {\n        this._parsing = false;\n        this._ready = true;\n        this.onReadyEmitter.fire();\n    }\n    parse(text) {\n        if (this._parsing) {\n            throw new Error('Parser worker is busy');\n        }\n        this._parsing = true;\n        this.deferred = new Deferred();\n        this.sendMessage(text);\n        return this.deferred.promise;\n    }\n}\n//# sourceMappingURL=async-parser.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\nimport { Deferred, isOperationCancelled } from '../utils/promise-utils.js';\nexport class DefaultWorkspaceLock {\n    constructor() {\n        this.previousTokenSource = new CancellationTokenSource();\n        this.writeQueue = [];\n        this.readQueue = [];\n        this.done = true;\n    }\n    write(action) {\n        this.cancelWrite();\n        const tokenSource = new CancellationTokenSource();\n        this.previousTokenSource = tokenSource;\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\n    }\n    read(action) {\n        return this.enqueue(this.readQueue, action);\n    }\n    enqueue(queue, action, cancellationToken) {\n        const deferred = new Deferred();\n        const entry = {\n            action,\n            deferred,\n            cancellationToken: cancellationToken !== null && cancellationToken !== void 0 ? cancellationToken : CancellationToken.None\n        };\n        queue.push(entry);\n        this.performNextOperation();\n        return deferred.promise;\n    }\n    async performNextOperation() {\n        if (!this.done) {\n            return;\n        }\n        const entries = [];\n        if (this.writeQueue.length > 0) {\n            // Just perform the next write action\n            entries.push(this.writeQueue.shift());\n        }\n        else if (this.readQueue.length > 0) {\n            // Empty the read queue and perform all actions in parallel\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\n        }\n        else {\n            return;\n        }\n        this.done = false;\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\n            try {\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\n                const result = await Promise.resolve().then(() => action(cancellationToken));\n                deferred.resolve(result);\n            }\n            catch (err) {\n                if (isOperationCancelled(err)) {\n                    // If the operation was cancelled, we don't want to reject the promise\n                    deferred.resolve(undefined);\n                }\n                else {\n                    deferred.reject(err);\n                }\n            }\n        }));\n        this.done = true;\n        this.performNextOperation();\n    }\n    cancelWrite() {\n        this.previousTokenSource.cancel();\n    }\n}\n//# sourceMappingURL=workspace-lock.js.map","/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\nimport { isAbstractElement } from '../languages/generated/ast.js';\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { BiMap } from '../utils/collections.js';\nimport { streamCst } from '../utils/cst-utils.js';\nexport class DefaultHydrator {\n    constructor(services) {\n        this.grammarElementIdMap = new BiMap();\n        this.tokenTypeIdMap = new BiMap();\n        this.grammar = services.Grammar;\n        this.lexer = services.parser.Lexer;\n        this.linker = services.references.Linker;\n    }\n    dehydrate(result) {\n        return {\n            // We need to create shallow copies of the errors\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\n            lexerErrors: result.lexerErrors.map(e => (Object.assign({}, e))),\n            parserErrors: result.parserErrors.map(e => (Object.assign({}, e))),\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\n        };\n    }\n    createDehyrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {});\n        }\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                cstNodes.set(cstNode, {});\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    dehydrateAstNode(node, context) {\n        const obj = context.astNodes.get(node);\n        obj.$type = node.$type;\n        obj.$containerIndex = node.$containerIndex;\n        obj.$containerProperty = node.$containerProperty;\n        if (node.$cstNode !== undefined) {\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                obj[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.dehydrateAstNode(item, context));\n                    }\n                    else if (isReference(item)) {\n                        arr.push(this.dehydrateReference(item, context));\n                    }\n                    else {\n                        arr.push(item);\n                    }\n                }\n            }\n            else if (isAstNode(value)) {\n                obj[name] = this.dehydrateAstNode(value, context);\n            }\n            else if (isReference(value)) {\n                obj[name] = this.dehydrateReference(value, context);\n            }\n            else if (value !== undefined) {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n    dehydrateReference(reference, context) {\n        const obj = {};\n        obj.$refText = reference.$refText;\n        if (reference.$refNode) {\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\n        }\n        return obj;\n    }\n    dehydrateCstNode(node, context) {\n        const cstNode = context.cstNodes.get(node);\n        if (isRootCstNode(node)) {\n            cstNode.fullText = node.fullText;\n        }\n        else {\n            // Note: This returns undefined for hidden nodes (i.e. comments)\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\n        }\n        cstNode.hidden = node.hidden;\n        cstNode.astNode = context.astNodes.get(node.astNode);\n        if (isCompositeCstNode(node)) {\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\n        }\n        else if (isLeafCstNode(node)) {\n            cstNode.tokenType = node.tokenType.name;\n            cstNode.offset = node.offset;\n            cstNode.length = node.length;\n            cstNode.startLine = node.range.start.line;\n            cstNode.startColumn = node.range.start.character;\n            cstNode.endLine = node.range.end.line;\n            cstNode.endColumn = node.range.end.character;\n        }\n        return cstNode;\n    }\n    hydrate(result) {\n        const node = result.value;\n        const context = this.createHydrationContext(node);\n        if ('$cstNode' in node) {\n            this.hydrateCstNode(node.$cstNode, context);\n        }\n        return {\n            lexerErrors: result.lexerErrors,\n            parserErrors: result.parserErrors,\n            value: this.hydrateAstNode(node, context)\n        };\n    }\n    createHydrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {});\n        }\n        let root;\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                let cst;\n                if ('fullText' in cstNode) {\n                    cst = new RootCstNodeImpl(cstNode.fullText);\n                    root = cst;\n                }\n                else if ('content' in cstNode) {\n                    cst = new CompositeCstNodeImpl();\n                }\n                else if ('tokenType' in cstNode) {\n                    cst = this.hydrateCstLeafNode(cstNode);\n                }\n                if (cst) {\n                    cstNodes.set(cstNode, cst);\n                    cst.root = root;\n                }\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    hydrateAstNode(node, context) {\n        const astNode = context.astNodes.get(node);\n        astNode.$type = node.$type;\n        astNode.$containerIndex = node.$containerIndex;\n        astNode.$containerProperty = node.$containerProperty;\n        if (node.$cstNode) {\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                astNode[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\n                    }\n                    else if (isReference(item)) {\n                        arr.push(this.hydrateReference(item, astNode, name, context));\n                    }\n                    else {\n                        arr.push(item);\n                    }\n                }\n            }\n            else if (isAstNode(value)) {\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\n            }\n            else if (isReference(value)) {\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\n            }\n            else if (value !== undefined) {\n                astNode[name] = value;\n            }\n        }\n        return astNode;\n    }\n    setParent(node, parent) {\n        node.$container = parent;\n        return node;\n    }\n    hydrateReference(reference, node, name, context) {\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode), reference.$refText);\n    }\n    hydrateCstNode(cstNode, context, num = 0) {\n        const cstNodeObj = context.cstNodes.get(cstNode);\n        if (typeof cstNode.grammarSource === 'number') {\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\n        }\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode);\n        if (isCompositeCstNode(cstNodeObj)) {\n            for (const child of cstNode.content) {\n                const hydrated = this.hydrateCstNode(child, context, num++);\n                cstNodeObj.content.push(hydrated);\n            }\n        }\n        return cstNodeObj;\n    }\n    hydrateCstLeafNode(cstNode) {\n        const tokenType = this.getTokenType(cstNode.tokenType);\n        const offset = cstNode.offset;\n        const length = cstNode.length;\n        const startLine = cstNode.startLine;\n        const startColumn = cstNode.startColumn;\n        const endLine = cstNode.endLine;\n        const endColumn = cstNode.endColumn;\n        const hidden = cstNode.hidden;\n        const node = new LeafCstNodeImpl(offset, length, {\n            start: {\n                line: startLine,\n                character: startColumn\n            },\n            end: {\n                line: endLine,\n                character: endColumn\n            }\n        }, tokenType, hidden);\n        return node;\n    }\n    getTokenType(name) {\n        return this.lexer.definition[name];\n    }\n    getGrammarElementId(node) {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        return this.grammarElementIdMap.get(node);\n    }\n    getGrammarElement(id) {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        const element = this.grammarElementIdMap.getKey(id);\n        if (element) {\n            return element;\n        }\n        else {\n            throw new Error('Invalid grammar element id: ' + id);\n        }\n    }\n    createGrammarElementIdMap() {\n        let id = 0;\n        for (const element of streamAst(this.grammar)) {\n            if (isAbstractElement(element)) {\n                this.grammarElementIdMap.set(element, id++);\n            }\n        }\n    }\n}\n//# sourceMappingURL=hydrator.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/\nimport { createGrammarConfig } from './languages/grammar-config.js';\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\nimport { DefaultValueConverter } from './parser/value-converter.js';\nimport { DefaultLinker } from './references/linker.js';\nimport { DefaultNameProvider } from './references/name-provider.js';\nimport { DefaultReferences } from './references/references.js';\nimport { DefaultScopeComputation } from './references/scope-computation.js';\nimport { DefaultScopeProvider } from './references/scope-provider.js';\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\nimport { DefaultServiceRegistry } from './service-registry.js';\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\nimport { ValidationRegistry } from './validation/validation-registry.js';\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\nimport { DefaultIndexManager } from './workspace/index-manager.js';\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\nimport { DefaultLexer } from './parser/lexer.js';\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\nimport { DefaultAsyncParser } from './parser/async-parser.js';\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\nimport { DefaultHydrator } from './serializer/hydrator.js';\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */\nexport function createDefaultCoreModule(context) {\n    return {\n        documentation: {\n            CommentProvider: (services) => new DefaultCommentProvider(services),\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\n        },\n        parser: {\n            AsyncParser: (services) => new DefaultAsyncParser(services),\n            GrammarConfig: (services) => createGrammarConfig(services),\n            LangiumParser: (services) => createLangiumParser(services),\n            CompletionParser: (services) => createCompletionParser(services),\n            ValueConverter: () => new DefaultValueConverter(),\n            TokenBuilder: () => new DefaultTokenBuilder(),\n            Lexer: (services) => new DefaultLexer(services),\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider()\n        },\n        workspace: {\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\n        },\n        references: {\n            Linker: (services) => new DefaultLinker(services),\n            NameProvider: () => new DefaultNameProvider(),\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\n            References: (services) => new DefaultReferences(services)\n        },\n        serializer: {\n            Hydrator: (services) => new DefaultHydrator(services),\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\n        },\n        validation: {\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\n            ValidationRegistry: (services) => new ValidationRegistry(services)\n        },\n        shared: () => context.shared\n    };\n}\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */\nexport function createDefaultSharedCoreModule(context) {\n    return {\n        ServiceRegistry: () => new DefaultServiceRegistry(),\n        workspace: {\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\n            IndexManager: (services) => new DefaultIndexManager(services),\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\n        }\n    };\n}\n//# sourceMappingURL=default-module.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport var Module;\n(function (Module) {\n    Module.merge = (m1, m2) => _merge(_merge({}, m1), m2);\n})(Module || (Module = {}));\n/**\n * Given a set of modules, the inject function returns a lazily evaluated injector\n * that injects dependencies into the requested service when it is requested the\n * first time. Subsequent requests will return the same service.\n *\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\n * by injecting a provider `() => T` instead of a `T`.\n *\n * Please note that the arguments may be objects or arrays. However, the result will\n * be an object. Using it with for..of will have no effect.\n *\n * @param module1 first Module\n * @param module2 (optional) second Module\n * @param module3 (optional) third Module\n * @param module4 (optional) fourth Module\n * @param module5 (optional) fifth Module\n * @param module6 (optional) sixth Module\n * @param module7 (optional) seventh Module\n * @param module8 (optional) eighth Module\n * @param module9 (optional) ninth Module\n * @returns a new object of type I\n */\nexport function inject(module1, module2, module3, module4, module5, module6, module7, module8, module9) {\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {});\n    return _inject(module);\n}\nconst isProxy = Symbol('isProxy');\n/**\n * Eagerly load all services in the given dependency injection container. This is sometimes\n * necessary because services can register event listeners in their constructors.\n */\nexport function eagerLoad(item) {\n    if (item && item[isProxy]) {\n        for (const value of Object.values(item)) {\n            eagerLoad(value);\n        }\n    }\n    return item;\n}\n/**\n * Helper function that returns an injector by creating a proxy.\n * Invariant: injector is of type I. If injector is undefined, then T = I.\n */\nfunction _inject(module, injector) {\n    const proxy = new Proxy({}, {\n        deleteProperty: () => false,\n        get: (obj, prop) => _resolve(obj, prop, module, injector || proxy),\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)),\n        has: (_, prop) => prop in module,\n        ownKeys: () => [...Reflect.ownKeys(module), isProxy] // used by for..in\n    });\n    proxy[isProxy] = true;\n    return proxy;\n}\n/**\n * Internally used to tag a requested dependency, directly before calling the factory.\n * This allows us to find cycles during instance creation.\n */\nconst __requested__ = Symbol();\n/**\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\n * the module description. The result of service factories is cached. Groups are\n * recursively proxied.\n *\n * @param obj an object holding all group proxies and services\n * @param prop the key of a value within obj\n * @param module an object containing groups and service factories\n * @param injector the first level proxy that provides access to all values\n * @returns the requested value `obj[prop]`\n * @throws Error if a dependency cycle is detected\n */\nfunction _resolve(obj, prop, module, injector) {\n    if (prop in obj) {\n        if (obj[prop] instanceof Error) {\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', { cause: obj[prop] });\n        }\n        if (obj[prop] === __requested__) {\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. See https://langium.org/docs/configuration-services/#resolving-cyclic-dependencies');\n        }\n        return obj[prop];\n    }\n    else if (prop in module) {\n        const value = module[prop];\n        obj[prop] = __requested__;\n        try {\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\n        }\n        catch (error) {\n            obj[prop] = error instanceof Error ? error : undefined;\n            throw error;\n        }\n        return obj[prop];\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * Performs a deep-merge of two modules by writing source entries into the target module.\n *\n * @param target the module which is written\n * @param source the module which is read\n * @returns the target module\n */\nfunction _merge(target, source) {\n    if (source) {\n        for (const [key, value2] of Object.entries(source)) {\n            if (value2 !== undefined) {\n                const value1 = target[key];\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\n                    target[key] = _merge(value1, value2);\n                }\n                else {\n                    target[key] = value2;\n                }\n            }\n        }\n    }\n    return target;\n}\n//# sourceMappingURL=dependency-injection.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './comment-provider.js';\nexport * from './documentation-provider.js';\nexport * from './jsdoc.js';\n//# sourceMappingURL=index.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './grammar-config.js';\nexport * from './language-meta-data.js';\n//# sourceMappingURL=index.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './async-parser.js';\nexport * from './completion-parser-builder.js';\nexport * from './cst-node-builder.js';\nexport * from './langium-parser-builder.js';\nexport * from './langium-parser.js';\nexport * from './lexer.js';\nexport * from './parser-config.js';\nexport * from './token-builder.js';\nexport * from './value-converter.js';\n//# sourceMappingURL=index.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './linker.js';\nexport * from './name-provider.js';\nexport * from './references.js';\nexport * from './scope.js';\nexport * from './scope-computation.js';\nexport * from './scope-provider.js';\n//# sourceMappingURL=index.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './hydrator.js';\nexport * from './json-serializer.js';\n//# sourceMappingURL=index.js.map","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport class EmptyFileSystemProvider {\n    readFile() {\n        throw new Error('No file system is available.');\n    }\n    async readDirectory() {\n        return [];\n    }\n}\nexport const EmptyFileSystem = {\n    fileSystemProvider: () => new EmptyFileSystemProvider()\n};\n//# sourceMappingURL=file-system-provider.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\nimport { inject } from '../dependency-injection.js';\nimport * as ast from '../languages/generated/ast.js';\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\nimport { URI } from './uri-utils.js';\nconst minimalGrammarModule = {\n    Grammar: () => undefined,\n    LanguageMetaData: () => ({\n        caseInsensitive: false,\n        fileExtensions: ['.langium'],\n        languageId: 'langium'\n    })\n};\nconst minimalSharedGrammarModule = {\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\n};\nfunction createMinimalGrammarServices() {\n    const shared = inject(createDefaultSharedCoreModule(EmptyFileSystem), minimalSharedGrammarModule);\n    const grammar = inject(createDefaultCoreModule({ shared }), minimalGrammarModule);\n    shared.ServiceRegistry.register(grammar);\n    return grammar;\n}\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */\nexport function loadGrammarFromJson(json) {\n    var _a;\n    const services = createMinimalGrammarServices();\n    const astNode = services.serializer.JsonSerializer.deserialize(json);\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${(_a = astNode.name) !== null && _a !== void 0 ? _a : 'grammar'}.langium`));\n    return astNode;\n}\n//# sourceMappingURL=grammar-loader.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './caching.js';\nexport * from './event.js';\nexport * from './collections.js';\nexport * from './disposable.js';\nexport * from './errors.js';\nexport * from './grammar-loader.js';\nexport * from './promise-utils.js';\nexport * from './stream.js';\nexport * from './uri-utils.js';\nimport * as AstUtils from './ast-utils.js';\nimport * as Cancellation from './cancellation.js';\nimport * as CstUtils from './cst-utils.js';\nimport * as GrammarUtils from './grammar-utils.js';\nimport * as RegExpUtils from './regexp-utils.js';\nexport { AstUtils, Cancellation, CstUtils, GrammarUtils, RegExpUtils };\n//# sourceMappingURL=index.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './document-validator.js';\nexport * from './validation-registry.js';\n//# sourceMappingURL=index.js.map","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './ast-descriptions.js';\nexport * from './ast-node-locator.js';\nexport * from './configuration.js';\nexport * from './document-builder.js';\nexport * from './documents.js';\nexport * from './file-system-provider.js';\nexport * from './index-manager.js';\nexport * from './workspace-lock.js';\nexport * from './workspace-manager.js';\n//# sourceMappingURL=index.js.map","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport * from './default-module.js';\nexport * from './dependency-injection.js';\nexport * from './service-registry.js';\nexport * from './services.js';\nexport * from './syntax-tree.js';\nexport * from './documentation/index.js';\nexport * from './languages/index.js';\nexport * from './parser/index.js';\nexport * from './references/index.js';\nexport * from './serializer/index.js';\nexport * from './utils/index.js';\nexport * from './validation/index.js';\nexport * from './workspace/index.js';\n// Export the Langium Grammar AST definitions in the `GrammarAST` namespace\nimport * as GrammarAST from './languages/generated/ast.js';\nexport { GrammarAST };\n//# sourceMappingURL=index.js.map","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n"],"names":["CancellationToken","exports","AU","Ts","ral_1","__webpack_require__","Is","events_1","None","Object","freeze","isCancellationRequested","onCancellationRequested","Event","Cancelled","is","value","candidate","boolean","shortcutEvent","callback","context","handle","default","timer","setTimeout","bind","dispose","MutableToken","constructor","_isCancelled","cancel","_emitter","fire","undefined","Emitter","event","CancellationTokenSource","token","_token","defineProperty","_disposable","CallbackList","add","bucket","_callbacks","_contexts","push","Array","isArray","remove","foundCallbackWithDifferentContext","i","len","length","splice","invoke","args","ret","callbacks","slice","contexts","apply","e","console","error","isEmpty","_options","_event","listener","thisArgs","disposables","onFirstListenerAdd","result","_noop","onLastListenerRemove","call","string","String","array","stringArray","func","number","Number","Error","every","elem","_ral","RAL","install","ral","InfoTokenBuilder","_chunk_Y27MQZ3U_mjs__WEBPACK_IMPORTED_MODULE_0__","T7","eW","InfoModule","parser","TokenBuilder","ValueConverter","nr","createInfoServices","langium__WEBPACK_IMPORTED_MODULE_1__","uZ","shared","f3","Jr","GS","Info","Q","F_","ServiceRegistry","register","PieTokenBuilder","PieValueConverter","kb","rule","input","_cstNode","name","replace","trim","PieModule","createPieServices","Pie","WH","PacketTokenBuilder","PacketModule","createPacketServices","Packet","bb","ArchitectureTokenBuilder","ArchitectureValueConverter","ArchitectureModule","createArchitectureServices","Architecture","Qr","GitGraphTokenBuilder","GitGraphModule","createGitGraphServices","GitGraph","vn","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","__defProp","__name","target","configurable","item","reflection","isInstance","Branch","Commit","Merge","MermaidAstReflection","langium__WEBPACK_IMPORTED_MODULE_0__","$v","computeIsSubtype","subtype","supertype","isSubtype","getReferenceType","refInfo","referenceId","container","$type","property","getTypeMetaData","type","properties","defaultValue","InfoGrammar","sC","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","InfoLanguageMetaData","languageId","fileExtensions","caseInsensitive","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","MermaidGeneratedSharedModule","AstReflection","InfoGeneratedModule","Grammar","LanguageMetaData","PacketGeneratedModule","PieGeneratedModule","ArchitectureGeneratedModule","GitGraphGeneratedModule","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","AbstractMermaidValueConverter","tI","cstNode","runCommonConverter","runCustomConverter","runConverter","regex","match","exec","CommonValueConverter","_rule","_input","AbstractMermaidTokenBuilder","PH","keywords","Set","buildKeywordTokens","rules","terminalTokens","options","tokenTypes","forEach","has","tokenType","PATTERN","toString","parsers","initializers","info","_chunks_mermaid_parser_core_chunk_Y27MQZ3U_mjs__WEBPACK_IMPORTED_MODULE_5__","createInfoServices2","then","LangiumParser","packet","createPacketServices2","pie","createPieServices2","architecture","createArchitectureServices2","gitGraph","createGitGraphServices2","parse","diagramType","text","initializer","lexerErrors","parserErrors","MermaidParseError","map","err","message","join","syntax_tree_isAstNode","obj","syntax_tree_isReference","$refText","isLinkingError","reference","AbstractAstReflection","subtypes","allSubtypes","node","nested","existing","getAllSubTypes","allTypes","getAllTypes","types","possibleSubType","syntax_tree_isCompositeCstNode","content","syntax_tree_isLeafCstNode","isRootCstNode","fullText","StreamImpl","startFn","nextFn","iterator","state","next","Symbol","Boolean","done","count","toArray","toSet","toMap","keyFn","valueFn","Map","element","concat","other","first","firstDone","DONE_RESULT","separator","addSeparator","prototype","indexOf","searchElement","fromIndex","index","predicate","some","callbackfn","filter","nonNullable","reduce","initialValue","previousValue","reduceRight","recursiveReduce","find","findIndex","includes","flatMap","this","mapped","isIterable","flat","depth","stream","head","tail","skipCount","limit","maxSize","size","distinct","by","set","exclude","key","otherKeySet","ownKey","EMPTY_STREAM","stream_stream","collections","collection","collIndex","arrIndex","TreeStreamImpl","root","children","iterators","includeRoot","pruned","pop","prune","streamCst","tokenToRange","start","character","startColumn","line","startLine","end","endColumn","endLine","toDocumentSegment","offset","range","Reduction","sum","a","b","product","min","Math","max","RangeComparison","DefaultNameRegexp","isCommentNode","commentNames","ErrorWithLocation","assertUnreachable","_","AbstractRule","AbstractType","Condition","ValueLiteral","AbstractElement","BooleanLiteral","Conjunction","Disjunction","InferredType","isInferredType","Interface","isInterface","Negation","ParameterReference","ParserRule","isParserRule","SimpleType","TerminalRule","isTerminalRule","Type","isType","Action","isAction","Alternatives","isAlternatives","Assignment","isAssignment","CharacterRange","CrossReference","isCrossReference","EndOfFile","Group","isGroup","Keyword","isKeyword","NegatedToken","RegexToken","RuleCall","isRuleCall","TerminalAlternatives","TerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","isUnorderedGroup","UntilToken","Wildcard","LangiumGrammarAstReflection","getContainerOfType","typePredicate","$container","getDocument","rootNode","$document","streamContents","keys","keyIndex","arrayIndex","startsWith","isAstNodeInRange","ast_utils_streamAllContents","streamAst","astNode","_a","nodeRange","$cstNode","comparison","to","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","streamReferences","cc","char","charCodeAt","insertToSet","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","idx","groupIdx","saveState","restoreState","newState","pattern","consumeChar","disjunction","flags","loc","begin","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","isBacktracking","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","classPatternCharacterAtom","isClassAtom","from","classAtom","isRangeDash","classEscape","capturing","groupAst","parseInt","nextChar","howMuch","isAtom","prevState","howMany","hexString","hexChar","BaseRegExpVisitor","visitChildren","child","hasOwnProperty","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","NEWLINE_REGEXP","regexpParser","TerminalRegExpVisitor","arguments","isStarting","endRegexpStack","multiline","endRegex","reset","startRegexp","fromCharCode","escapedChar","escapeRegExp","RegExp","visitor","isWhitespace","regexp","getAllReachableRules","grammar","allTerminals","ruleNames","entryRule","entry","hidden","ruleDfs","visitedSet","refRule","ref","findNodeForProperty","nodes","findNodesForPropertyInternal","nodeFeature","grammarSource","feature","findNameAssignment","startNode","findNameAssignmentInternal","cache","go","refType","childAssignment","get","toLowerCase","typeRef","isDataTypeRule","isDataTypeRuleInternal","visited","definition","getExplicitRuleType","inferredType","dataType","returnType","getTypeName","actionType","action","terminalRegex","terminalRule","s","u","abstractElementToRegex","withCardinality","alternatives","elements","cardinality","lookahead","right","keywordToRegex","left","wrap","negate","terminal","WILDCARD","until","lastSlash","lastIndexOf","source","regexFlags","entries","keyword","LexerDefinitionErrorType","setter","PROD_TYPE","CstVisitorDefinitionError","ParserDefinitionErrorType","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","Diagnostic","Command","TextEdit","ChangeAnnotation","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","CompletionItemKind","InsertTextFormat","InsertReplaceEdit","InsertTextMode","MarkedString","DocumentHighlightKind","SymbolKind","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","InlineCompletionTriggerKind","TextDocument","UriUtils","DocumentState","DocumentValidator","DocumentUri","URI","CodeDescription","ChangeAnnotationIdentifier","WorkspaceEdit","MarkupContent","CompletionItemTag","CompletionItemLabelDetails","CompletionItem","CompletionList","Hover","ParameterInformation","SignatureInformation","DocumentHighlight","SymbolTag","SymbolInformation","WorkspaceSymbol","SemanticTokens","StringValue","InlineCompletionItem","InlineCompletionList","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","main_TextDocument","LIB","ValidationCategory","Disposable","Module","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","_baseSlice","lodash_es_drop","n","guard","toInteger","Z","assign_hasOwnProperty","objectProto","assign_assign","_createAssigner","object","_isPrototype","isArrayLike","_copyObject","_assignValue","lodash_es_pickBy","props","_arrayMap","_getAllKeysIn","prop","_baseIteratee","_basePickBy","path","nodeIsRegExp","_nodeUtil","isRegExp","_baseUnary","isObjectLike","_baseGetTag","AbstractProduction","_definition","accept","prod","model_NonTerminal","lodash_es_assign","v","referencedRule","Rule","orgText","Alternative","ignoreAmbiguities","Option","RepetitionMandatory","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","Alternation","hasPredicates","Terminal","visitor_GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","_baseSome","_baseEach","lodash_es_some","_arraySome","_isIterateeCall","nativeMax","lodash_es_includes","lodash_es_values","isString","_baseIndexOf","_arrayEvery","_baseEvery","lodash_es_every","isOptionalProd","alreadyVisited","subProd","getProductionDslName","RestWalker","walk","prevRest","currRest","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","prodWrapper","alt","repSepProd","repSepRest","terminalType","lodash_es_uniq","_baseUniq","firstForSequence","currSubProd","firstSet","seq","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","firstForBranching","allAlternativesFirsts","lodash_es_map","innerProd","lodash_es_flatten","constants_IN","ResyncFollowsWalker","topProd","follows","startWalking","inner","occurenceInParent","followName","buildBetweenProdsFollowPrefix","t_in_topProd_follows","lodash_es_negate","lodash_es_reject","_arrayFilter","_baseFilter","indexOf_nativeMax","lodash_es_indexOf","_baseDifference","values","iteratee","comparator","_arrayIncludes","isCommon","valuesLength","_arrayIncludesWith","_cacheHas","_SetCache","outer","computed","valuesIndex","difference","_baseRest","isArrayLikeObject","_baseFlatten","lodash_es_compact","resIndex","lodash_es_head","PRINT_ERROR","msg","PRINT_WARNING","warn","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","addOptimizedIdxToResult","code","optimizedCharIdx","charCodeToOptimizedIndex","handleIgnoreCase","upperChar","lowerChar","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","ast","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","end_of_input","start_of_input","addStartOfInput","addStickyFlag","isCustomPattern","lodash_es_isRegExp","isFunction","isShortPattern","LineTerminatorOptimizedTester","lastIndex","c","checkLineBreaksIssues","tokType","lineTerminatorCharCodes","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","getCharCodes","charsOrCodes","numOrString","addToMapOfArrays","charCodeToOptimizedIdxMap","charCode","Date","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","tokenTypeIdx","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","expandCategories","clone","categories","searching","newCategories","lodash_es_difference","currTokType","CATEGORIES","hasShortKeyProperty","hasCategoriesProperty","categoryMatches","singleAssignCategoriesToksMap","nextNode","pathNode","newPath","nextCategory","isTokenType","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","positionTracking","lineTerminatorsPattern","lineTerminatorCharacters","ensureOptimizations","safeMode","errorMessageProvider","buildUnableToPopLexerModeMessage","image","buildUnexpectedCharactersMessage","startOffset","column","charAt","traceInitPerf","skipValidations","recoveryEnabled","Lexer","lexerDefinition","config","lexerDefinitionErrors","lexerDefinitionWarning","patternIdxToConfig","charCodeToPatternIdxToConfig","modes","emptyGroups","trackStartLines","trackEndLines","hasCustom","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","indent","traceInitMaxIdent","log","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","performRuntimeChecks","trackLines","errors","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","currIdx","isUndefined","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","longerAlt","LONGER_ALT","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performWarningRuntimeChecks","warnings","hasAnyLineBreak","concreteTokenTypes","currType","NA","terminatorCharCodes","currIssue","warningDescriptor","buildLineBreakIssueMessage","details","LINE_BREAKS","NO_LINE_BREAKS_FLAGS","allModeNames","currModDef","currModName","validatePatterns","validModesNames","missingResult","findMissingPatterns","tokenTypesWithMissingPattern","MISSING_PATTERN","valid","invalidResult","findInvalidPatterns","tokenTypesWithInvalidPattern","INVALID_PATTERN","validTokenTypes","validateRegExpPattern","withRegExpPatterns","findEndOfInputAnchor","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","EOI_ANCHOR_FOUND","findStartOfInputAnchor","StartAnchorFinder","startAnchorVisitor","SOI_ANCHOR_FOUND","findUnsupportedFlags","invalidFlags","UNSUPPORTED_FLAGS_FOUND","findDuplicatePatterns","identicalPatterns","innerType","outerType","duplicatePatterns","currIdenticalSet","tokenTypeNames","setOfIdentical","dupPatternSrc","DUPLICATE_PATTERNS_FOUND","findEmptyMatchRegExps","matchesEmptyString","EMPTY_MATCH_PATTERN","findInvalidGroupType","invalidTypes","clazz","GROUP","SKIPPED","INVALID_GROUP_TYPE_FOUND","findModesThatDoNotExist","validModes","invalidModes","PUSH_MODE","PUSH_MODE_DOES_NOT_EXIST","findUnreachablePatterns","canBeTested","str","testIdx","testTokenType","regExpArray","UNREACHABLE_PATTERN","currAnalyzeResult","analyzeTokenTypes","onlyRelevantTypes","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","tracer","defaults","useSticky","debug","initCharCodeToOptimizedIndexMap","currPattern","regExpSource","wrappedRegExp","groupName","longerAltType","acc","x","canLineTerminator","isCustom","short","canBeOptimized","START_CHARS_HINT","lastOptimizedIdx","currOptimizedIdx","charOrInt","optimizedCodes","getOptimizedStartCodesIndices","firstCharOptimizedIndices","rangeCode","minUnOptVal","maxUnOptVal","minOptIdx","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","msgSuffix","allErrMessages","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","tokenize","initialMode","tokenizeInternal","j","k","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","getPossiblePatterns","currConfig","orgLength","matchedTokensIndex","matchedTokens","floor","groups","cloneEmptyGroups","clonedResult","groupKeys","currGroupValue","currKey","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","last","modeCanBeOptimized","push_mode","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","tokens","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","endOffset","tokenVector","tokenToAdd","tokens_public_tokenLabel","LABEL","tokens_public_hasTokenLabel","POP_MODE","createTokenInternal","EOF","defaultParserErrorProvider","buildMismatchTokenMessage","expected","actual","previous","ruleName","expectedMsg","hasLabel","buildNotAllInputParsedMessage","firstRedundant","buildNoViableAltMessage","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","nextValidSequenceItems","itemMsg","buildEarlyExitMessage","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","nonTerminalName","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","hasExplicitIndex","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","pathNames","leftRecursionPath","currRule","leftRecursivePath","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","UNRESOLVED_SUBRULE_REF","unresolvedRefName","lodash_es_flatMap","_arrayAggregator","accumulator","groupBy_hasOwnProperty","groupBy_objectProto","groupBy_groupBy","_baseAssignValue","lodash_es_dropRight","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","fullRest","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","nextDef","currAlt","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","getProdType","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPaths","prodType","maxLookahead","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","tokenMatcher","dynamicTokensEnabled","numOfAlts","areAllOneTokenLookahead","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","currPathLength","LA","singleTokenAlts","choiceToAlt","currExtendingType","nextToken","buildSingleAlternativeLookaheadFunction","numOfPaths","singleTokensTypes","expectedTokenUniqueKey","expectedTokenType","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","isUnique","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","afterDefWalker","searchPath","compareOtherPath","otherPath","searchTok","otherTok","matchingTokens","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","identifyProductionForDuplicates","getExtraProductionArgument","OccurrenceValidationCollector","allProductions","subrule","option","manySep","atLeastOne","atLeastOneSep","many","or","OrCollector","alternations","RepetitionCollector","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","setPrototypeOf","captureStackTrace","MismatchedTokenException","previousToken","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","Recoverable","initRecoverable","firstAfterRepMap","resyncFollows","DEFAULT_PARSER_CONFIG","attemptInRepetitionRecovery","getTokenToInsert","tokToInsert","NaN","isInsertedInRecovery","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","tryInRepetitionRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","currToken","generateErrorMessage","getCurrRuleFullName","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","shouldInRepetitionRecoveryBeTried","expectTokAfterLastMatch","nextTokIdx","notStuck","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","RULE_STACK","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","prodFunc","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","getHumanReadableRuleStack","currShortName","getKeyForAutomaticLookahead","firstAfterRepInfo","currRuleName","walker","getGAstProductions","LLkLookaheadStrategy","validate","leftRecursionErrors","validateNoLeftRecursion","validateEmptyOrAlternatives","validateAmbiguousAlternationAlternatives","validateSomeNonEmptyLookaheadPath","nextNonTerminals","getFirstNoneTerminal","firstProd","currSubDef","isFirstOptional","hasMore","rest","LEFT_RECURSION","errorsFromNextSteps","currRefRule","currTopRule","validateEmptyOrAlternative","orCollector","currOr","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","globalMaxLookahead","ors","altsAmbiguityErrors","checkAlternativesAmbiguities","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","ambgIndices","currAmbDescriptor","AMBIGUOUS_ALTS","altsPrefixAmbiguityErrors","checkPrefixAlternativesAmbiguities","pathsAndIndices","currPathsAndIdx","alternativeGast","currPathAndIdx","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","prefix","searchPathAndIdx","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","topLevelRules","collectorVisitor","allRuleProductions","currProd","actualMaxLookahead","pathsInsideProduction","paths","NO_NON_EMPTY_LOOKAHEAD","buildLookaheadForAlternation","buildLookaheadFuncForOr","laFuncBuilder","buildLookaheadForOptional","buildLookaheadFuncForOptionalProd","lookaheadBuilder","LooksAhead","initLooksAhead","lookaheadStrategy","lookAheadFuncsCache","preComputeLookaheadFunctions","repetitionMandatory","repetitionMandatoryWithSeparator","repetitionWithSeparator","collectMethods","dslMethods","prodIdx","ruleIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","DslMethodsCollectorVisitor","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","setNodeLocationFull","defineNameProp","nameValue","enumerable","writable","defaultVisit","ctx","param","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","TreeBuilder","initTreeBuilder","CST_STACK","outputCst","nodeLocationTracking","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","location","fullRuleName","create","ruleCstNode","prevToken","consumedToken","rootCst","ruleCstResult","preCstNode","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","createBaseSemanticVisitorConstructor","derivedConstructor","validateVisitor","semanticDefinitionErrors","validateMissingCstMethods","visitorInstance","missingRuleNames","MISSING_METHOD","methodName","errorMessages","currDefError","_RULE_NAMES","className","gastProductionsCache","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","LexerAdapter","initLexerAdapter","tokVector","tokVectorLength","newInput","selfAnalysisDone","END_OF_FILE","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","RecognizerApi","ACTION","impl","consume","consumeInternal","ruleToCall","subruleInternal","actionORMethodDef","optionInternal","altsOrOpts","orInternal","manyInternal","atLeastOneInternal","CONSUME","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","manySepFirstInternal","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","atLeastOneSepFirstInternal","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","RULE","implementation","DEFAULT_RULE_CONFIG","definedRulesNames","DUPLICATE_RULE_NAME","definitionErrors","ruleImplementation","defineRule","OVERRIDE_RULE","ruleErrors","validateRuleIsOverridden","INVALID_RULE_OVERRIDE","BACKTRACK","isBackTrackingStack","orgState","saveRecogState","reloadRecogState","getSerializedGastProductions","topRules","serializeProduction","convertDefinition","serializedNonTerminal","label","serializedTerminal","terminalLabel","RecognizerEngine","initRecognizerEngine","tokenVocabulary","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","tokensMap","uniqueTokens","isObject","noTokenCategoriesUsed","tokenConstructor","resyncEnabled","recoveryValueFunc","shortName","BITS_FOR_METHOD_TYPE","assign","ruleInvocationStateUpdate","cst","invokeRuleCatch","ruleFinallyStateUpdate","originalGrammarAction","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternalLogic","DEF","orgLookaheadFunction","laKey","atLeastOneInternalLogic","doSingleRepetition","raiseEarlyExitException","ERR_MSG","atLeastOneSepFirstInternalLogic","SEP","firstIterationLookaheadFunc","separatorLookAheadFunc","repetitionSepSecondInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternalLogic","firstIterationLaFunc","nextTerminalAfterWalker","beforeIteration","afterIteration","altIdxToTake","chosenAlternative","ALT","raiseNoAltException","isAtEndOfInput","firstRedundantTok","ruleResult","ARGS","subruleInternalError","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","savedErrors","savedRuleStack","lexerState","fullName","ErrorHandler","initErrorHandler","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","lookAheadPathsPerAlternative","actualTokens","errMsgTypes","ContentAssist","initContentAssist","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","gastProductions","RECORDING_NULL_OBJECT","description","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","GastRecorder","initGastRecorder","recordingProdStack","RECORDING_PHASE","enableRecording","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","disableRecording","that","topLevelRuleRecord","newTopLevelRule","originalError","KNOWN_RECORDER_ERROR","mutabilityError","recordProd","recordOrProd","assertMethodIdxIsValid","getIdxSuffix","JSON","stringify","prevProd","newNoneTerminal","prodConstructor","mainProdArg","handleSep","grammarAction","newProd","MAX_LOOKAHEAD","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","PerformanceTracer","initPerformanceTracer","userTraceInitPerf","traceIsNumber","EMPTY_ALT","Parser","performSelfAnalysis","parserInstance","defErrorsMsgs","recordedRuleGast","wrappedRule","resolverErrors","gast_resolver_public_resolveGrammar","actualOptions","topRulesTable","resolveGrammar","topLevels","refResolver","validationErrors","validateGrammar","duplicateErrors","validateDuplicateProductions","duplicates","lodash_es_groupBy","currGroup","currDuplicates","defError","DUPLICATE_PRODUCTIONS","parameter","termsNamespaceConflictErrors","checkTerminalAndNoneTerminalsNameSpace","tokenNames","CONFLICT_TOKENS_RULES_NAMESPACE","tooManyAltsErrors","validateTooManyAlts","TOO_MANY_ALTS","curRule","duplicateRulesError","validateRuleDoesNotAlreadyExist","allRules","occurrences","lookaheadValidationErrors","validateLookahead","lookaheadValidationErrorMessages","CUSTOM_LOOKAHEAD_VALIDATION","errorMessage","allFollows","computeAllProdsFollows","topProductions","reSyncFollows","_b","initialize","DEFER_DEFINITION_ERRORS_HANDLING","applyMixins","derivedCtor","baseCtors","baseProto","baseCtor","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","EmbeddedActionsParser","configClone","buildATNKey","AbstractTransition","isEpsilon","AtomTransition","EpsilonTransition","RuleTransition","ruleStart","followState","plus","atn","sep","blkStart","blkEnd","loop","defineDecisionState","loopback","decisionMap","epsilon","star","loopEnd","decisionStates","decision","makeAlts","production","atn_getProdType","tokenRef","addTransition","partial","epsilonOnlyTransitions","transitions","nextTokenWithinRule","stateNumber","states","transition","DFA_ERROR","ATNConfigSet","configs","finalize","getATNConfigKey","stack","PredicateSet","EMPTY_PREDICATES","LLStarLookaheadStrategy","logging","createATN","ruleToStartState","ruleToStopState","createRuleStartAndStopATNStates","ruleLength","stop","ruleBlock","block","handles","ruleRef","currentRule","nonTerminal","atn_option","optional","starState","repetitionSep","plusState","repetitionMandatorySep","makeBlock","altsLength","isRuleTransition","ruleTransition","removeState","buildRuleHandle","dfas","initATNSimulator","decisionLength","decisionToDFA","createDFACache","startState","predicateSet","atnStartState","decisionIndex","decisionState","isLL1Sequence","prediction","gate","adaptivePredict","g","sequences","allowEmpty","fullSet","altSet","dfaCaches","dfa","closure","computeStartState","atnState","numberOfTransitions","addDFAState","newDFAState","performLookahead","s0","previousD","d","edges","computeLookaheadTarget","buildAdaptivePredictError","current","actualToken","possibleTokenTypes","nextTransitions","tokenPath","isAcceptState","reach","computeReachSet","intermediate","skippedStopStates","transitionLength","getReachableTarget","hasConfigInRuleStopState","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","hasConflictTerminatingPrediction","allConfigsInRuleStopStates","altSets","getConflictingAltSets","configToAlts","hasConflictingAltSet","hasStateAssociatedWithOneAlt","reportLookaheadAmbiguity","buildAmbiguityError","all_star_lookahead_getProductionDslName","mapKey","p","atnStack","getEpsilonTarget","MIN_VALUE","MAX_VALUE","objectLiteral","one","two","three","four","uri","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startCharacter","endCharacter","kind","collapsedText","defined","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","version","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Property","Unit","Value","Enum","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","Key","Null","containerName","selectionRange","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","parent","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","Parameter","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","compare","leftIdx","rightIdx","diff","lastModifiedOffset","_uri","_languageId","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","ch","low","high","mid","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","buildRootNode","RootCstNodeImpl","buildCompositeNode","compositeNode","CompositeCstNodeImpl","buildLeafNode","leafNode","LeafCstNodeImpl","removeNode","construct","addHiddenTokens","hiddenTokens","hiddenNode","addHiddenToken","tokenStart","tokenEnd","childStart","childEnd","AbstractCstNode","_astNode","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","addParents","unshift","_text","DatatypeSymbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","services","_unorderedGroups","lexer","wrapper","ChevrotainWrapper","ParserConfig","ParserErrorMessageProvider","choices","wrapOr","wrapOption","wrapMany","wrapAtLeastOne","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","wrapSelfAnalysis","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","fragment","ruleMethod","DEFINE_RULE","startImplementation","mainRule","lexerResult","clear","wrapConsume","isValidToken","assignment","isCrossRef","getAssignment","convertedValue","convert","operator","subruleResult","wrapSubrule","performSubruleAssignment","resultKind","assignWithoutOverride","linkContentToContainer","$containerProperty","$containerIndex","assignMandatoryProperties","typeMetaData","genericNode","copyDefaultValue","propertyType","buildReference","existingValue","newValue","AbstractParserErrorMessageProvider","LangiumParserErrorMessageProvider","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","before","after","defaultConfig","useDefaultLookahead","createParser","buildRules","parserContext","reachable","buildElement","ignoreGuard","method","buildKeyword","buildAction","buildCrossReference","crossRef","getRule","getToken","assignTerminal","buildRuleCall","ruleCall","buildRuleCallPredicate","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildAlternatives","methods","predicatedMethod","getGuardCondition","buildUnorderedGroup","orIdx","idFunc","lParser","stackId","wrapped","groupState","trackedAlternatives","delete","buildGroup","condition","true","guardCondition","getRuleName","DefaultTokenBuilder","buildTokens","reachableRules","buildTerminalTokens","terminalToken","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","sort","buildKeywordToken","buildKeywordPattern","findLongerAlt","longerAlts","partialMatches","partialRegExp","re","process","tmp","appendRaw","nbChars","substr","appendOptional","DefaultValueConverter","getCrossReferenceTerminal","nameAssigment","_c","convertInt","convertString","convertID","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","lastTick","promise_utils_OperationCancelled","interruptAndCheck","cancellation","now","Promise","resolve","setImmediate","promise_utils_Deferred","promise","reject","arg","main_FullTextDocument","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","r","o","h","cwd","normalize","isAbsolute","relative","f","l","_makeLong","dirname","basename","extname","format","dir","base","ext","delimiter","win32","posix","toStringTag","Utils","P","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","with","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","A","w","joinPath","resolvePath","esm_URI","equals","fromPath","toPath","fromParts","split","toParts","backPart","repeat","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","workspace","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","fromModel","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","LangiumDocumentFactory","all","addDocument","uriString","getOrCreateDocument","createDocument","hasDocument","invalidateDocument","langiumDoc","Changed","precomputedScopes","deleteDocument","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","doLink","_ref","getCandidate","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","unlink","scope","getScope","getElement","refNode","refText","$refNode","refData","getLinkedNode","ComputedScopes","descr","$nodeDescription","nodeDescription","doc","getAstNode","targetDescription","referenceType","DefaultNameProvider","getName","getNameNode","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","findAssignment","nodeElem","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","getAstNodePath","sourceUri","sourcePath","segment","local","MultiMap","addAll","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","exportNode","createDescription","computeLocalScopes","scopes","processNode","StreamScope","outerScope","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","throwIfDisposed","SimpleCache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onUpdate","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","specificReplacer","replacer","defaultReplacer","currentDocument","space","deserialize","linkNode","sourceText","textRegions","comments","uriConverter","_d","refValue","$error","targetDocument","$ref","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","$sourceText","comment","getComment","$comment","createDocumentSegment","assignments","textRegion","propertyAssignments","findNodesForProperty","containerProperty","containerIndex","propertyName","reviveReference","mutable","getRefNode","fragmentIndex","DefaultServiceRegistry","singleton","ValidationRegistry","checksRecord","thisObj","category","wrapValidationException","addEntry","getChecks","checks","DefaultDocumentValidator","validationRegistry","validation","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","lexerError","diagnostic","toDiagnosticSeverity","getSource","parserError","linkingError","containerType","toDiagnostic","validationItems","acceptor","findNodeForKeyword","findNodesForKeywordInternal","treeIterator","keywordNodes","childNode","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","segments","currentValue","propertyIndex","DefaultConfigurationProvider","_ready","settings","workspaceConfig","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","getConfiguration","sectionName","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deleted","deletedUri","changedUri","newDocument","allChangedUris","shouldRelink","rebuildDocuments","Linked","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","targetState","filtered","notifyBuildPhase","onBuildPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","getBuildOptions","validator","validationSetting","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","allFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","folders","workspaceFolders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexer","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","chevrotainResult","isIMultiModeLexerDefinition","res","getLines","tagRegex","inlineTagRegex","nonWhitespaceRegex","whitespaceEndRegex","skipWhitespace","parseJSDocText","firstToken","lastToken","lines","parseJSDocTag","parseJSDocLine","JSDocTextImpl","inline","tagToken","docLine","JSDocTagImpl","JSDocLineImpl","normalizeOptions","normalizeOption","escaped","JSDocCommentImpl","getTag","getAllTags","getTags","fillNewlines","toMarkdown","inlines","renderTag","toMarkdownDefault","rendered","renderInlineTag","tag","display","displayStart","renderLink","renderLinkDefault","marker","JSDocDocumentationProvider","getDocumentation","isJSDoc","normalizedOptions","firstRegex","lastRegex","opts","parsedJSDoc","parseJSDocComment","startPosition","parseJSDocElement","appendEmptyLine","currentLine","currentCharacter","whitespaceEnd","lastCharacter","tagMatch","fullMatch","inlineTagMatches","matchAll","buildInlineTokens","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","findCommentNode","getPreviousNode","endIndex","multilineCommentRules","DefaultAsyncParser","syncParser","DefaultWorkspaceLock","previousTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","dehydrateCstNode","arr","dehydrateReference","getGrammarElementId","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","createDefaultCoreModule","DocumentationProvider","createGrammarConfig","isMultilineComment","nameRegexp","createLangiumParser","prepareLangiumParser","CompletionParser","createCompletionParser","References","serializer","Hydrator","JsonSerializer","createDefaultSharedCoreModule","WorkspaceManager","ConfigurationProvider","inject","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","_resolve","ownKeys","Reflect","__requested__","cause","value2","value1","EmptyFileSystemProvider","EmptyFileSystem","minimalGrammarModule","minimalSharedGrammarModule","loadGrammarFromJson","json","createMinimalGrammarServices","__webpack_exports__","_isSymbol_js__WEBPACK_IMPORTED_MODULE_0__","_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__","_baseEach_js__WEBPACK_IMPORTED_MODULE_1__","_baseSet","customizer","_castPath","_toKey","objValue","_isIndex","_baseGet","_baseClone_js__WEBPACK_IMPORTED_MODULE_0__","_baseRest_js__WEBPACK_IMPORTED_MODULE_0__","sources","_isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__","_keysIn_js__WEBPACK_IMPORTED_MODULE_2__","propsIndex","propsLength","_eq_js__WEBPACK_IMPORTED_MODULE_3__","findIndexFunc","lodash_es_find","_baseFindIndex","iterable","_baseFlatten_js__WEBPACK_IMPORTED_MODULE_0__","_baseHas_hasOwnProperty","_baseHas","lodash_es_has","_hasPath","_isArray_js__WEBPACK_IMPORTED_MODULE_0__","_isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__","_baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__","_arrayMap_js__WEBPACK_IMPORTED_MODULE_1__","_baseMap_js__WEBPACK_IMPORTED_MODULE_2__","_baseIteratee_js__WEBPACK_IMPORTED_MODULE_3__","_baseExtremum_js__WEBPACK_IMPORTED_MODULE_0__","_identity_js__WEBPACK_IMPORTED_MODULE_1__","_baseLt_js__WEBPACK_IMPORTED_MODULE_2__","reWhitespace","_trimmedEndIndex","reTrimStart","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","lodash_es_toNumber","isSymbol","valueOf","isBinary","INFINITY","lodash_es_toFinite","sign","_toFinite_js__WEBPACK_IMPORTED_MODULE_0__","remainder"],"sourceRoot":""}