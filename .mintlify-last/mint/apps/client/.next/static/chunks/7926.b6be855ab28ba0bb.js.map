{"version":3,"file":"static/chunks/7926.b6be855ab28ba0bb.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/mermaid/dist/chunks/mermaid.core/stateDiagram-MAYHULR4.mjs"],"sourcesContent":["import {\n  stateDb_default,\n  stateDiagram_default,\n  styles_default\n} from \"./chunk-7U56Z5CX.mjs\";\nimport \"./chunk-5HRBRIJM.mjs\";\nimport \"./chunk-BO7VGL7K.mjs\";\nimport \"./chunk-66SQ7PYY.mjs\";\nimport \"./chunk-7NZE2EM7.mjs\";\nimport \"./chunk-OPO4IU42.mjs\";\nimport \"./chunk-3JNJP5BE.mjs\";\nimport \"./chunk-3X56UNUX.mjs\";\nimport \"./chunk-6JOS74DS.mjs\";\nimport {\n  utils_default\n} from \"./chunk-7DKRZKHE.mjs\";\nimport {\n  __name,\n  common_default,\n  configureSvgSize,\n  getConfig2 as getConfig,\n  log\n} from \"./chunk-6DBFFHIP.mjs\";\n\n// src/diagrams/state/stateRenderer.js\nimport { select } from \"d3\";\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/diagrams/state/shapes.js\nimport { line, curveBasis } from \"d3\";\n\n// src/diagrams/state/id-cache.js\nvar idCache = {};\nvar set = /* @__PURE__ */ __name((key, val) => {\n  idCache[key] = val;\n}, \"set\");\nvar get = /* @__PURE__ */ __name((k) => idCache[k], \"get\");\nvar keys = /* @__PURE__ */ __name(() => Object.keys(idCache), \"keys\");\nvar size = /* @__PURE__ */ __name(() => keys().length, \"size\");\nvar id_cache_default = {\n  get,\n  set,\n  keys,\n  size\n};\n\n// src/diagrams/state/shapes.js\nvar drawStartState = /* @__PURE__ */ __name((g) => g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit), \"drawStartState\");\nvar drawDivider = /* @__PURE__ */ __name((g) => g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", getConfig().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", getConfig().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0), \"drawDivider\");\nvar drawSimpleState = /* @__PURE__ */ __name((g, stateDef) => {\n  const state = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 2 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const classBox = state.node().getBBox();\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", classBox.width + 2 * getConfig().state.padding).attr(\"height\", classBox.height + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return state;\n}, \"drawSimpleState\");\nvar drawDescrState = /* @__PURE__ */ __name((g, stateDef) => {\n  const addTspan = /* @__PURE__ */ __name(function(textEl, txt, isFirst2) {\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * getConfig().state.padding).text(txt);\n    if (!isFirst2) {\n      tSpan.attr(\"dy\", getConfig().state.textHeight);\n    }\n  }, \"addTspan\");\n  const title = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 1.3 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n  const description = g.append(\"text\").attr(\"x\", getConfig().state.padding).attr(\n    \"y\",\n    titleHeight + getConfig().state.padding * 0.4 + getConfig().state.dividerMargin + getConfig().state.textHeight\n  ).attr(\"class\", \"state-description\");\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function(descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n  const descrLine = g.append(\"line\").attr(\"x1\", getConfig().state.padding).attr(\"y1\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"y2\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n  descrLine.attr(\"x2\", width + 3 * getConfig().state.padding);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", width + 2 * getConfig().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return g;\n}, \"drawDescrState\");\nvar addTitleAndBox = /* @__PURE__ */ __name((g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n  const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", getConfig().state.titleShift).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth);\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  const graphBox = g.node().getBBox();\n  if (stateDef.doc) {\n  }\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n  const lineY = 1 - getConfig().state.textHeight;\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\n    \"height\",\n    graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n  ).attr(\"rx\", \"0\");\n  title.attr(\"x\", startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", getConfig().state.textHeight * 3).attr(\"rx\", getConfig().state.radius);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * getConfig().state.textHeight).attr(\"rx\", getConfig().state.radius);\n  return g;\n}, \"addTitleAndBox\");\nvar drawEndState = /* @__PURE__ */ __name((g) => {\n  g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\n    \"cx\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  ).attr(\n    \"cy\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  );\n  return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + 2).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + 2);\n}, \"drawEndState\");\nvar drawForkJoinState = /* @__PURE__ */ __name((g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding);\n}, \"drawForkJoinState\");\nvar _drawLongText = /* @__PURE__ */ __name((_text, x, y, g) => {\n  let textHeight = 0;\n  const textElem = g.append(\"text\");\n  textElem.style(\"text-anchor\", \"start\");\n  textElem.attr(\"class\", \"noteText\");\n  let text = _text.replace(/\\r\\n/g, \"<br/>\");\n  text = text.replace(/\\n/g, \"<br/>\");\n  const lines = text.split(common_default.lineBreakRegex);\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line2 of lines) {\n    const txt = line2.trim();\n    if (txt.length > 0) {\n      const span = textElem.append(\"tspan\");\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr(\"x\", x + getConfig().state.noteMargin);\n      span.attr(\"y\", y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n}, \"_drawLongText\");\nvar drawNote = /* @__PURE__ */ __name((text, g) => {\n  g.attr(\"class\", \"state-note\");\n  const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", getConfig().state.padding);\n  const rectElem = g.append(\"g\");\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr(\"height\", textHeight + 2 * getConfig().state.noteMargin);\n  note.attr(\"width\", textWidth + getConfig().state.noteMargin * 2);\n  return note;\n}, \"drawNote\");\nvar drawState = /* @__PURE__ */ __name(function(elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id,\n    label: stateDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n  if (stateDef.type === \"start\") {\n    drawStartState(g);\n  }\n  if (stateDef.type === \"end\") {\n    drawEndState(g);\n  }\n  if (stateDef.type === \"fork\" || stateDef.type === \"join\") {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === \"note\") {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === \"divider\") {\n    drawDivider(g);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n  id_cache_default.set(id, stateInfo);\n  return stateInfo;\n}, \"drawState\");\nvar edgeCount = 0;\nvar drawEdge = /* @__PURE__ */ __name(function(elem, path, relation) {\n  const getRelationType = /* @__PURE__ */ __name(function(type) {\n    switch (type) {\n      case stateDb_default.relationType.AGGREGATION:\n        return \"aggregation\";\n      case stateDb_default.relationType.EXTENSION:\n        return \"extension\";\n      case stateDb_default.relationType.COMPOSITION:\n        return \"composition\";\n      case stateDb_default.relationType.DEPENDENCY:\n        return \"dependency\";\n    }\n  }, \"getRelationType\");\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n  let url = \"\";\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  svgPath.attr(\n    \"marker-end\",\n    \"url(\" + url + \"#\" + getRelationType(stateDb_default.relationType.DEPENDENCY) + \"End)\"\n  );\n  if (relation.title !== void 0) {\n    const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n    const { x, y } = utils_default.calcLabelPosition(path.points);\n    const rows = common_default.getRows(relation.title);\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n      const boundsTmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundsTmp.width);\n      minX = Math.min(minX, boundsTmp.x);\n      log.info(boundsTmp.x, x, y + titleHeight);\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info(\"Title height\", titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n      titleRows.forEach((title, i) => title.attr(\"y\", y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n    const bounds = label.node().getBBox();\n    label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - getConfig().state.padding / 2).attr(\"y\", y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5).attr(\"width\", maxWidth + getConfig().state.padding).attr(\"height\", boxHeight + getConfig().state.padding);\n    log.info(bounds);\n  }\n  edgeCount++;\n}, \"drawEdge\");\n\n// src/diagrams/state/stateRenderer.js\nvar conf;\nvar transformationLog = {};\nvar setConf = /* @__PURE__ */ __name(function() {\n}, \"setConf\");\nvar insertMarkers = /* @__PURE__ */ __name(function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n}, \"insertMarkers\");\nvar draw = /* @__PURE__ */ __name(function(text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  log.debug(\"Rendering diagram \" + text);\n  const diagram2 = root.select(`[id='${id}']`);\n  insertMarkers(diagram2);\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n  const padding = conf.padding;\n  const bounds = diagram2.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram2, height, svgWidth, conf.useMaxWidth);\n  diagram2.attr(\n    \"viewBox\",\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + \" \" + height\n  );\n}, \"draw\");\nvar getLabelWidth = /* @__PURE__ */ __name((text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n}, \"getLabelWidth\");\nvar renderDoc = /* @__PURE__ */ __name((doc, diagram2, parentId, altBkg, root, domDocument, diagObj) => {\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true\n  });\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === \"relation\") {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n  if (parentId) {\n    graph.setGraph({\n      rankdir: \"LR\",\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: \"tight-tree\",\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: \"TB\",\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: \"tight-tree\",\n      // ranker: 'network-simplex'\n      isMultiGraph: true\n    });\n  }\n  graph.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n  const keys2 = Object.keys(states);\n  let first = true;\n  for (const key of keys2) {\n    const stateDef = states[key];\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n      if (first) {\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      } else {\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height;\n      }\n    } else {\n      node = drawState(diagram2, stateDef, graph);\n    }\n    if (stateDef.note) {\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + \"-note\",\n        note: stateDef.note,\n        type: \"note\"\n      };\n      const note = drawState(diagram2, noteDef, graph);\n      if (stateDef.note.position === \"left of\") {\n        graph.setNode(node.id + \"-note\", note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + \"-note\", note);\n      }\n      graph.setParent(node.id, node.id + \"-group\");\n      graph.setParent(node.id + \"-note\", node.id + \"-group\");\n    } else {\n      graph.setNode(node.id, node);\n    }\n  }\n  log.debug(\"Count=\", graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function(relation) {\n    cnt++;\n    log.debug(\"Setting edge\", relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common_default.getRows(relation.title).length,\n        labelpos: \"c\"\n      },\n      \"id\" + cnt\n    );\n  });\n  dagreLayout(graph);\n  log.debug(\"Graph after layout\", graph.nodes());\n  const svgElem = diagram2.node();\n  graph.nodes().forEach(function(v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      log.warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\n        \"transform\",\n        \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\"\n      );\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute(\"x1\", 0 - pShift + 8);\n        divider.setAttribute(\"x2\", pWidth - pShift - 8);\n      });\n    } else {\n      log.debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    }\n  });\n  let stateBox = svgElem.getBBox();\n  graph.edges().forEach(function(e) {\n    if (e !== void 0 && graph.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n  stateBox = svgElem.getBBox();\n  const stateInfo = {\n    id: parentId ? parentId : \"root\",\n    label: parentId ? parentId : \"root\",\n    width: 0,\n    height: 0\n  };\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n  log.debug(\"Doc rendered\", stateInfo, graph);\n  return stateInfo;\n}, \"renderDoc\");\nvar stateRenderer_default = {\n  setConf,\n  draw\n};\n\n// src/diagrams/state/stateDiagram.ts\nvar diagram = {\n  parser: stateDiagram_default,\n  db: stateDb_default,\n  renderer: stateRenderer_default,\n  styles: styles_default,\n  init: /* @__PURE__ */ __name((cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    stateDb_default.clear();\n  }, \"init\")\n};\nexport {\n  diagram\n};\n"],"names":["conf","idCache","set","_chunk_6DBFFHIP_mjs__WEBPACK_IMPORTED_MODULE_10__","eW","key","val","keys","k","Object","drawStartState","length","g","append","attr","nV","state","sizeUnit","padding","drawDivider","style","textHeight","drawSimpleState","stateDef","fontSize","text","id","classBox","node","getBBox","insert","width","height","radius","drawDescrState","addTspan","textEl","txt","isFirst2","tSpan","titleBox","title","descriptions","titleHeight","description","dividerMargin","isFirst","isSecond","forEach","descr","descrLine","descrBox","Math","max","addTitleAndBox","altBkg","startX","pad","dblPad","orgBox","orgWidth","orgX","x","titleShift","titleWidth","graphBox","doc","abs","lineY","drawEndState","miniPadding","drawForkJoinState","forkWidth","forkHeight","parentId","tmp","_drawLongText","_text","y","textElem","replace","lines","split","SY","lineBreakRegex","tHeight","noteMargin","line2","trim","span","textBounds","textWidth","drawNote","note","drawState","elem","stateInfo","label","type","stateBox","id_cache_default","edgeCount","drawEdge","path","relation","getRelationType","_chunk_7U56Z5CX_mjs__WEBPACK_IMPORTED_MODULE_0__","bH","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","points","filter","Number","isNaN","p","lineData","lineFunction","d3__WEBPACK_IMPORTED_MODULE_11__","jvg","d","curve","$0Z","svgPath","url","arrowMarkerAbsolute","window","location","protocol","host","pathname","search","_chunk_7DKRZKHE_mjs__WEBPACK_IMPORTED_MODULE_9__","w8","calcLabelPosition","rows","getRows","titleRows","maxWidth","minX","i","boundsTmp","min","cM","info","push","boxHeight","heightAdj","bounds","transformationLog","setConf","insertMarkers","draw","_version","diagObj","sandboxElement","securityLevel","Ys","root","nodes","contentDocument","body","document","debug","diagram2","select","renderDoc","db","getRootDoc","v2","useMaxWidth","getLabelWidth","fontSizeFactor","domDocument","graph","dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_13__","compound","multigraph","edgeFreeDoc","stmt","setGraph","rankdir","ranker","ranksep","edgeLengthFactor","nodeSep","isMultiGraph","setDefaultEdgeLabel","extract","states","getStates","relations","getRelations","sub","boxBounds","compositTitleSize","position","setNode","setParent","nodeCount","cnt","setEdge","id1","id2","labelHeight","labelpos","dagre_d3_es_src_dagre_index_js__WEBPACK_IMPORTED_MODULE_12__","bK","svgElem","v","warn","JSON","stringify","dividers","querySelectorAll","parent","divider","parentElement","pWidth","pShift","parseInt","getAttribute","setAttribute","edges","e","edge","w","diagram","parser","J8","renderer","styles","Ee","init","cnf","clear"],"sourceRoot":""}