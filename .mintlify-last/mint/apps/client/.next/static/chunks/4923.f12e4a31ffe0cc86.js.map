{"version":3,"file":"static/chunks/4923.f12e4a31ffe0cc86.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/@codesandbox/sandpack-client/dist/index-fc68d414.mjs"],"sourcesContent":["import { g as __extends, _ as __awaiter, a as __generator } from './types-36e5ec0d.mjs';\nimport { PreviewController } from 'static-browser-server';\nimport { E as EventEmitter, c as consoleHook, g as generateRandomId, f as fromBundlerFilesToFS } from './consoleHook-7a68abbd.mjs';\nimport { S as SandpackClient } from './base-80a1f760.mjs';\nimport 'outvariant';\nimport 'dequal';\n\nvar insertHtmlAfterRegex = function (regex, content, insertable) {\n    var match = regex.exec(content);\n    if (match && match.length >= 1) {\n        var offset = match.index + match[0].length;\n        var prefix = content.substring(0, offset);\n        var suffix = content.substring(offset);\n        return prefix + insertable + suffix;\n    }\n};\nvar readBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    else {\n        return new TextDecoder().decode(content);\n    }\n};\nvar validateHtml = function (content) {\n    // Make it a string\n    var contentString = readBuffer(content);\n    var domParser = new DOMParser();\n    var doc = domParser.parseFromString(contentString, \"text/html\");\n    if (!doc.documentElement.getAttribute(\"lang\")) {\n        doc.documentElement.setAttribute(\"lang\", \"en\");\n    }\n    var html = doc.documentElement.outerHTML;\n    return \"<!DOCTYPE html>\\n\" + html;\n};\n\nvar SandpackStatic = /** @class */ (function (_super) {\n    __extends(SandpackStatic, _super);\n    function SandpackStatic(selector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        var _a;\n        var _this = _super.call(this, selector, sandboxSetup, options) || this;\n        _this.files = new Map();\n        _this.status = \"initializing\";\n        _this.emitter = new EventEmitter();\n        _this.previewController = new PreviewController({\n            baseUrl: (_a = options.bundlerURL) !== null && _a !== void 0 ? _a : \"https://preview.sandpack-static-server.codesandbox.io\",\n            // filepath is always normalized to start with / and not end with a slash\n            getFileContent: function (filepath) {\n                var content = _this.files.get(filepath);\n                if (!content) {\n                    throw new Error(\"File not found\");\n                }\n                if (filepath.endsWith(\".html\") || filepath.endsWith(\".htm\")) {\n                    try {\n                        content = validateHtml(content);\n                        content = _this.injectProtocolScript(content);\n                        content = _this.injectExternalResources(content, options.externalResources);\n                        content = _this.injectScriptIntoHead(content, {\n                            script: consoleHook,\n                            scope: { channelId: generateRandomId() }\n                        });\n                    }\n                    catch (err) {\n                        console.error(\"Runtime injection failed\", err);\n                    }\n                }\n                return content;\n            }\n        });\n        if (typeof selector === \"string\") {\n            _this.selector = selector;\n            var element = document.querySelector(selector);\n            _this.element = element;\n            _this.iframe = document.createElement(\"iframe\");\n        }\n        else {\n            _this.element = selector;\n            _this.iframe = selector;\n        }\n        if (!_this.iframe.getAttribute(\"sandbox\")) {\n            _this.iframe.setAttribute(\"sandbox\", \"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\");\n            _this.iframe.setAttribute(\"allow\", \"accelerometer; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; clipboard-write;\");\n        }\n        _this.eventListener = _this.eventListener.bind(_this);\n        if (typeof window !== \"undefined\") {\n            window.addEventListener(\"message\", _this.eventListener);\n        }\n        // Dispatch very first compile action\n        _this.updateSandbox();\n        return _this;\n    }\n    SandpackStatic.prototype.injectContentIntoHead = function (content, contentToInsert) {\n        var _a;\n        // Make it a string\n        content = readBuffer(content);\n        // Inject script\n        content =\n            (_a = insertHtmlAfterRegex(/<head[^<>]*>/g, content, \"\\n\" + contentToInsert)) !== null && _a !== void 0 ? _a : contentToInsert + \"\\n\" + content;\n        return content;\n    };\n    SandpackStatic.prototype.injectProtocolScript = function (content) {\n        var scriptToInsert = \"<script>\\n  window.addEventListener(\\\"message\\\", (message) => {\\n    if(message.data.type === \\\"refresh\\\") {\\n      window.location.reload();\\n    }\\n  })\\n</script>\";\n        return this.injectContentIntoHead(content, scriptToInsert);\n    };\n    SandpackStatic.prototype.injectExternalResources = function (content, externalResources) {\n        if (externalResources === void 0) { externalResources = []; }\n        var tagsToInsert = externalResources\n            .map(function (resource) {\n            var match = resource.match(/\\.([^.]*)$/);\n            var fileType = match === null || match === void 0 ? void 0 : match[1];\n            if (fileType === \"css\" || resource.includes(\"fonts.googleapis\")) {\n                return \"<link rel=\\\"stylesheet\\\" href=\\\"\" + resource + \"\\\">\";\n            }\n            if (fileType === \"js\") {\n                return \"<script src=\\\"\" + resource + \"\\\"></script>\";\n            }\n            throw new Error(\"Unable to determine file type for external resource: \" + resource);\n        })\n            .join(\"\\n\");\n        return this.injectContentIntoHead(content, tagsToInsert);\n    };\n    SandpackStatic.prototype.injectScriptIntoHead = function (content, opts) {\n        var script = opts.script, _a = opts.scope, scope = _a === void 0 ? {} : _a;\n        var scriptToInsert = (\"\\n    <script>\\n      const scope = \" + JSON.stringify(scope) + \";\\n      \" + script + \"\\n    </script>\\n    \").trim();\n        return this.injectContentIntoHead(content, scriptToInsert);\n    };\n    SandpackStatic.prototype.updateSandbox = function (setup, _isInitializationCompile) {\n        if (setup === void 0) { setup = this.sandboxSetup; }\n        var modules = fromBundlerFilesToFS(setup.files);\n        /**\n         * Pass init files to the bundler\n         */\n        this.dispatch({\n            codesandbox: true,\n            modules: modules,\n            template: setup.template,\n            type: \"compile\"\n        });\n    };\n    SandpackStatic.prototype.compile = function (files) {\n        return __awaiter(this, void 0, void 0, function () {\n            var previewUrl;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.files = new Map(Object.entries(files));\n                        return [4 /*yield*/, this.previewController.initPreview()];\n                    case 1:\n                        previewUrl = _a.sent();\n                        this.iframe.setAttribute(\"src\", previewUrl);\n                        this.status = \"done\";\n                        this.dispatch({ type: \"done\", compilatonError: false });\n                        this.dispatch({\n                            type: \"urlchange\",\n                            url: previewUrl,\n                            back: false,\n                            forward: false\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Handles message windows coming from iframes\n    SandpackStatic.prototype.eventListener = function (evt) {\n        // skip events originating from different iframes\n        if (evt.source !== this.iframe.contentWindow) {\n            return;\n        }\n        var message = evt.data;\n        if (!message.codesandbox) {\n            return;\n        }\n        this.dispatch(message);\n    };\n    /**\n     * Bundler communication\n     */\n    SandpackStatic.prototype.dispatch = function (message) {\n        var _a;\n        switch (message.type) {\n            case \"compile\":\n                this.compile(message.modules);\n                break;\n            default:\n                (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, \"*\");\n                this.emitter.dispatch(message);\n        }\n    };\n    SandpackStatic.prototype.listen = function (listener) {\n        return this.emitter.listener(listener);\n    };\n    SandpackStatic.prototype.destroy = function () {\n        this.emitter.cleanup();\n        if (typeof window !== \"undefined\") {\n            window.removeEventListener(\"message\", this.eventListener);\n        }\n    };\n    return SandpackStatic;\n}(SandpackClient));\n\nexport { SandpackStatic };\n"],"names":["insertHtmlAfterRegex","regex","content","insertable","match","exec","length","offset","index","prefix","substring","readBuffer","TextDecoder","decode","validateHtml","contentString","doc","domParser","DOMParser","parseFromString","documentElement","getAttribute","setAttribute","outerHTML","SandpackStatic","_super","selector","sandboxSetup","options","_a","_this","call","files","Map","status","emitter","_consoleHook_7a68abbd_mjs__WEBPACK_IMPORTED_MODULE_4__","E","previewController","static_browser_server__WEBPACK_IMPORTED_MODULE_0__","PreviewController","baseUrl","bundlerURL","getFileContent","filepath","get","endsWith","injectProtocolScript","injectExternalResources","externalResources","injectScriptIntoHead","script","c","scope","channelId","g","err","console","error","element","document","querySelector","iframe","createElement","eventListener","bind","window","addEventListener","updateSandbox","_types_36e5ec0d_mjs__WEBPACK_IMPORTED_MODULE_3__","prototype","injectContentIntoHead","contentToInsert","tagsToInsert","map","resource","fileType","includes","join","opts","scriptToInsert","JSON","stringify","trim","setup","_isInitializationCompile","modules","f","dispatch","codesandbox","template","type","compile","_","previewUrl","a","label","Object","entries","initPreview","sent","compilatonError","url","back","forward","evt","source","contentWindow","message","data","postMessage","listen","listener","destroy","cleanup","removeEventListener","_base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__","S"],"sourceRoot":""}