{"version":3,"file":"static/chunks/6555.7d601d08b9b7d932.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/lodash-es/clone.js","webpack://_N_E/../../node_modules/dagre-d3-es/src/graphlib/json.js","webpack://_N_E/../../node_modules/mermaid/dist/chunks/mermaid.core/dagre-4EVJKHTY.mjs"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import {\n  clear as clear2,\n  insertEdge,\n  insertEdgeLabel,\n  markers_default,\n  positionEdgeLabel\n} from \"./chunk-66SQ7PYY.mjs\";\nimport {\n  clear,\n  clear2 as clear3,\n  insertCluster,\n  insertNode,\n  positionNode,\n  setNodeElem,\n  updateNodeBounds\n} from \"./chunk-7NZE2EM7.mjs\";\nimport \"./chunk-OPO4IU42.mjs\";\nimport \"./chunk-3JNJP5BE.mjs\";\nimport {\n  getSubGraphTitleMargins\n} from \"./chunk-3X56UNUX.mjs\";\nimport \"./chunk-6JOS74DS.mjs\";\nimport \"./chunk-7DKRZKHE.mjs\";\nimport {\n  __name,\n  getConfig2 as getConfig,\n  log\n} from \"./chunk-6DBFFHIP.mjs\";\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson2 from \"dagre-d3-es/src/graphlib/json.js\";\nimport * as graphlib2 from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nvar clusterDb = /* @__PURE__ */ new Map();\nvar descendants = /* @__PURE__ */ new Map();\nvar parents = /* @__PURE__ */ new Map();\nvar clear4 = /* @__PURE__ */ __name(() => {\n  descendants.clear();\n  parents.clear();\n  clusterDb.clear();\n}, \"clear\");\nvar isDescendant = /* @__PURE__ */ __name((id, ancestorId) => {\n  const ancestorDescendants = descendants.get(ancestorId) || [];\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", ancestorDescendants.includes(id));\n  return ancestorDescendants.includes(id);\n}, \"isDescendant\");\nvar edgeInCluster = /* @__PURE__ */ __name((edge, clusterId) => {\n  const clusterDescendants = descendants.get(clusterId) || [];\n  log.info(\"Descendants of \", clusterId, \" is \", clusterDescendants);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId || edge.w === clusterId) {\n    return false;\n  }\n  if (!clusterDescendants) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\n}, \"edgeInCluster\");\nvar copy = /* @__PURE__ */ __name((clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n}, \"copy\");\nvar extractDescendants = /* @__PURE__ */ __name((id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents.set(child, id);\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n}, \"extractDescendants\");\nvar findCommonEdges = /* @__PURE__ */ __name((graph, id1, id2) => {\n  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);\n  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);\n  const edges1Prim = edges1.map((edge) => {\n    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };\n  });\n  const edges2Prim = edges2.map((edge) => {\n    return { v: edge.v, w: edge.w };\n  });\n  const result = edges1Prim.filter((edgeIn1) => {\n    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\n  });\n  return result;\n}, \"findCommonEdges\");\nvar findNonClusterChild = /* @__PURE__ */ __name((id, graph, clusterId) => {\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    return id;\n  }\n  let reserve;\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph, clusterId);\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\n    if (_id) {\n      if (commonEdges.length > 0) {\n        reserve = _id;\n      } else {\n        return _id;\n      }\n    }\n  }\n  return reserve;\n}, \"findNonClusterChild\");\nvar getAnchorId = /* @__PURE__ */ __name((id) => {\n  if (!clusterDb.has(id)) {\n    return id;\n  }\n  if (!clusterDb.get(id).externalConnections) {\n    return id;\n  }\n  if (clusterDb.has(id)) {\n    return clusterDb.get(id).id;\n  }\n  return id;\n}, \"getAnchorId\");\nvar adjustClustersAndEdges = /* @__PURE__ */ __name((graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph, id)\n      );\n      descendants.set(id, extractDescendants(id, graph));\n      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        const d1 = isDescendant(edge.v, id);\n        const d2 = isDescendant(edge.w, id);\n        if (d1 ^ d2) {\n          log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n          log.warn(\"Descendants of XXX \", id, \": \", descendants.get(id));\n          clusterDb.get(id).externalConnections = true;\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of clusterDb.keys()) {\n    const nonClusterChild = clusterDb.get(id).id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\n      clusterDb.get(id).id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb.get(e.v),\n      \" --- \",\n      clusterDb.get(e.w)\n    );\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\n      log.warn(\"Fixing and trying - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb.get(parent).externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb.get(parent).externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n}, \"adjustClustersAndEdges\");\nvar extractor = /* @__PURE__ */ __name((graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb.has(node) && !clusterDb.get(node).externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb.has(node)) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb.get(node)?.clusterData?.dir) {\n        dir = clusterDb.get(node).clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb.get(node).clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb.get(node).clusterData,\n        label: clusterDb.get(node).label,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb.get(node).externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data?.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n}, \"extractor\");\nvar sorter = /* @__PURE__ */ __name((graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign([], nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n}, \"sorter\");\nvar sortNodesByHierarchy = /* @__PURE__ */ __name((graph) => sorter(graph, graph.children()), \"sortNodesByHierarchy\");\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nvar recursiveRender = /* @__PURE__ */ __name(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.warn(\"Graph in recursive render:XAX\", graphlibJson2.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.info(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.trace(\n          \"Setting data for parent cluster XXX\\n Node.id = \",\n          v,\n          \"\\n data=\",\n          data.height,\n          \"\\nParent cluster\",\n          parentCluster.height\n        );\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node?.clusterNode) {\n        log.info(\"Cluster identified XBX\", v, node.width, graph.node(v));\n        const { ranksep, nodesep } = graph.graph();\n        node.graph.setGraph({\n          ...node.graph.graph(),\n          ranksep: ranksep + 25,\n          nodesep\n        });\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\n          \"New compound node after recursive render XAX\",\n          v,\n          \"width\",\n          // node,\n          node.width,\n          \"height\",\n          node.height\n          // node.x,\n          // node.y\n        );\n        setNodeElem(newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.trace(\n            \"Cluster - the non recursive path XBX\",\n            v,\n            node.id,\n            node,\n            node.width,\n            \"Graph:\",\n            graph\n          );\n          log.trace(findNonClusterChild(node.id, graph));\n          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });\n        } else {\n          log.trace(\"Node - the non recursive path XAX\", v, nodes, graph.node(v), dir);\n          await insertNode(nodes, graph.node(v), { config: siteConfig, dir });\n        }\n      }\n    })\n  );\n  const processEdges = /* @__PURE__ */ __name(async () => {\n    const edgePromises = graph.edges().map(async function(e) {\n      const edge = graph.edge(e.v, e.w, e.name);\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n      log.info(\n        \"Fix\",\n        clusterDb,\n        \"ids:\",\n        e.v,\n        e.w,\n        \"Translating: \",\n        clusterDb.get(e.v),\n        clusterDb.get(e.w)\n      );\n      await insertEdgeLabel(edgeLabels, edge);\n    });\n    await Promise.all(edgePromises);\n  }, \"processEdges\");\n  await processEdges();\n  log.info(\"Graph before layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  log.info(\"############################################# XXX\");\n  log.info(\"###                Layout                 ### XXX\");\n  log.info(\"############################################# XXX\");\n  dagreLayout(graph);\n  log.info(\"Graph after layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  let diff = 0;\n  let { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  await Promise.all(\n    sortNodesByHierarchy(graph).map(async function(v) {\n      const node = graph.node(v);\n      log.info(\n        \"Position XBX => \" + v + \": (\" + node.x,\n        \",\" + node.y,\n        \") width: \",\n        node.width,\n        \" height: \",\n        node.height\n      );\n      if (node?.clusterNode) {\n        node.y += subGraphTitleTotalMargin;\n        log.info(\n          \"A tainted cluster node XBX1\",\n          v,\n          node.id,\n          node.width,\n          node.height,\n          node.x,\n          node.y,\n          graph.parent(v)\n        );\n        clusterDb.get(node.id).node = node;\n        positionNode(node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\n            \"A pure cluster node XBX1\",\n            v,\n            node.id,\n            node.x,\n            node.y,\n            node.width,\n            node.height,\n            graph.parent(v)\n          );\n          node.height += subGraphTitleTotalMargin;\n          graph.node(node.parentId);\n          const halfPadding = node?.padding / 2 || 0;\n          const labelHeight = node?.labelBBox?.height || 0;\n          const offsetY = labelHeight - halfPadding || 0;\n          log.debug(\"OffsetY\", offsetY, \"labelHeight\", labelHeight, \"halfPadding\", halfPadding);\n          await insertCluster(clusters, node);\n          clusterDb.get(node.id).node = node;\n        } else {\n          const parent = graph.node(node.parentId);\n          node.y += subGraphTitleTotalMargin / 2;\n          log.info(\n            \"A regular node XBX1 - using the padding\",\n            node.id,\n            \"parent\",\n            node.parentId,\n            node.width,\n            node.height,\n            node.x,\n            node.y,\n            \"offsetY\",\n            node.offsetY,\n            \"parent\",\n            parent,\n            parent?.offsetY,\n            node\n          );\n          positionNode(node);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const startNode = graph.node(e.v);\n    var endNode = graph.node(e.w);\n    const paths = insertEdge(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.isGroup) {\n      diff = n.diff;\n    }\n  });\n  log.warn(\"Returning from recursive render XAX\", elem, diff);\n  return { elem, diff };\n}, \"recursiveRender\");\nvar render = /* @__PURE__ */ __name(async (data4Layout, svg) => {\n  const graph = new graphlib2.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: data4Layout.direction,\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const element = svg.select(\"g\");\n  markers_default(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\n  clear3();\n  clear2();\n  clear();\n  clear4();\n  data4Layout.nodes.forEach((node) => {\n    graph.setNode(node.id, { ...node });\n    if (node.parentId) {\n      graph.setParent(node.id, node.parentId);\n    }\n  });\n  log.debug(\"Edges:\", data4Layout.edges);\n  data4Layout.edges.forEach((edge) => {\n    if (edge.start === edge.end) {\n      const nodeId = edge.start;\n      const specialId1 = nodeId + \"---\" + nodeId + \"---1\";\n      const specialId2 = nodeId + \"---\" + nodeId + \"---2\";\n      const node = graph.node(nodeId);\n      graph.setNode(specialId1, {\n        domId: specialId1,\n        id: specialId1,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        label: \"\",\n        padding: 0,\n        shape: \"labelRect\",\n        // shape: 'rect',\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId1, node.parentId);\n      graph.setNode(specialId2, {\n        domId: specialId2,\n        id: specialId2,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        padding: 0,\n        // shape: 'rect',\n        shape: \"labelRect\",\n        label: \"\",\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId2, node.parentId);\n      const edge1 = structuredClone(edge);\n      const edgeMid = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge1.id = nodeId + \"-cyclic-special-1\";\n      edgeMid.arrowTypeEnd = \"none\";\n      edgeMid.id = nodeId + \"-cyclic-special-mid\";\n      edge2.label = \"\";\n      if (node.isGroup) {\n        edge1.fromCluster = nodeId;\n        edge2.toCluster = nodeId;\n      }\n      edge2.id = nodeId + \"-cyclic-special-2\";\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + \"-cyclic-special-0\");\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + \"-cyclic-special-1\");\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + \"-cyc<lic-special-2\");\n    } else {\n      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);\n    }\n  });\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson2.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after XAX:\", JSON.stringify(graphlibJson2.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(\n    element,\n    graph,\n    data4Layout.type,\n    data4Layout.diagramId,\n    void 0,\n    siteConfig\n  );\n}, \"render\");\nexport {\n  render\n};\n"],"names":["__webpack_exports__","Z","value","_baseClone_js__WEBPACK_IMPORTED_MODULE_0__","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","map","v","nodeValue","node","parent","isUndefined","edges","e","edgeValue","edge","w","name","graph","clone","clusterDb","Map","descendants","parents","clear4","chunk_6DBFFHIP","eW","clear","isDescendant","id","ancestorId","ancestorDescendants","get","cM","trace","includes","edgeInCluster","clusterId","clusterDescendants","info","debug","copy","newGraph","rootId","warn","children","push","forEach","length","data","setNode","setParent","data2","setEdge","error","removeNode","extractDescendants","res","child","set","findCommonEdges","id1","id2","edges1","filter","edges2","edges1Prim","edges2Prim","some","edgeIn1","findNonClusterChild","reserve","_id","commonEdges","getAnchorId","has","externalConnections","adjustClustersAndEdges","depth","clusterData","keys","nonClusterChild","JSON","stringify","removeEdge","fromCluster","toCluster","extractor","hasChildren","dir","graphSettings","rankdir","clusterGraph","graphlib","k","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","label","sorter","result","Object","assign","sorted","sortNodesByHierarchy","recursiveRender","_elem","diagramType","parentCluster","siteConfig","elem","insert","attr","clusters","edgePaths","edgeLabels","Promise","all","parse","height","width","o","newEl","chunk_7NZE2EM7","jr","diff","Yn","Lf","config","processEdges","edgePromises","chunk_66SQ7PYY","I_","dagre","bK","subGraphTitleTotalMargin","chunk_3X56UNUX","L","x","y","aH","parentId","halfPadding","padding","labelHeight","labelBBox","us","offsetY","points","point","startNode","endNode","paths","QP","Jj","n","type","isGroup","render","data4Layout","svg","direction","nodeSpacing","flowchart","rankSpacing","element","select","DQ","markers","diagramId","gU","ZH","start","end","nodeId","specialId1","specialId2","domId","labelStyle","shape","style","edge1","structuredClone","edgeMid","edge2","arrowTypeEnd","nV"],"sourceRoot":""}