{"version":3,"file":"static/chunks/8230.d07440f8e4e1f5e1.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/lodash/isEmpty.js","webpack://_N_E/../../node_modules/tweetnacl-ts/es/array.js","webpack://_N_E/../../node_modules/tweetnacl-ts/es/core.js","webpack://_N_E/../../node_modules/tweetnacl-ts/es/client/random.js","webpack://_N_E/../../node_modules/tweetnacl-ts/es/curve25519.js","webpack://_N_E/../../node_modules/tweetnacl-ts/es/hash.js","webpack://_N_E/../../node_modules/tweetnacl-ts/es/check.js","webpack://_N_E/../../node_modules/tweetnacl-ts/es/sign.js","webpack://_N_E/./src/utils/api/cobo/v2.ts"],"sourcesContent":["var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","export function ByteArray(n) {\n    return new Uint8Array(n);\n}\nexport function HalfArray(n) {\n    return new Uint16Array(n);\n}\nexport function WordArray(n) {\n    return new Uint32Array(n);\n}\nexport function IntArray(n) {\n    return new Int32Array(n);\n}\nexport function NumArray(n) {\n    return new Float64Array(n);\n}\n//# sourceMappingURL=array.js.map","import { ByteArray, NumArray } from './array';\nexport function gf(init) {\n    var r = NumArray(16);\n    if (init)\n        for (var i = 0; i < init.length; i++)\n            r[i] = init[i];\n    return r;\n}\nexport var _0 = ByteArray(16);\nexport var _9 = ByteArray(32);\n_9[0] = 9;\nexport var gf0 = gf();\nexport var gf1 = gf([1]);\nexport var _121665 = gf([0xdb41, 1]);\nexport var D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]);\nexport var D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]);\nexport var X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]);\nexport var Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]);\nexport var I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\nexport function A(o, a, b) {\n    for (var i = 0; i < 16; i++)\n        o[i] = a[i] + b[i];\n}\nexport function Z(o, a, b) {\n    for (var i = 0; i < 16; i++)\n        o[i] = a[i] - b[i];\n}\nexport function M(o, a, b) {\n    var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nexport function S(o, a) {\n    M(o, a, a);\n}\n//# sourceMappingURL=core.js.map","// Initialize PRNG if environment provides CSPRNG.\n// If not, methods calling randombytes will throw.\nvar QUOTE = 1 << 16;\nexport function _randomBytes(x, n) {\n    for (var i = 0; i < n; i += QUOTE) {\n        crypto.getRandomValues(x.subarray(i, i + Math.min(n - i, QUOTE)));\n    }\n}\n//# sourceMappingURL=random.js.map","import { ByteArray } from './array';\nimport { _verify_32 } from './verify';\nimport { gf, S, M } from './core';\nexport function set25519(r, a) {\n    for (var i = 0; i < 16; i++)\n        r[i] = a[i] | 0;\n}\nfunction car25519(o) {\n    var i, v, c = 1;\n    for (i = 0; i < 16; i++) {\n        v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nexport function sel25519(p, q, b) {\n    var t, c = ~(b - 1);\n    for (var i = 0; i < 16; i++) {\n        t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nexport function pack25519(o, n) {\n    var m = gf(), t = gf();\n    var i, j, b;\n    for (i = 0; i < 16; i++)\n        t[i] = n[i];\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for (j = 0; j < 2; j++) {\n        m[0] = t[0] - 0xffed;\n        for (i = 1; i < 15; i++) {\n            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for (i = 0; i < 16; i++) {\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nexport function neq25519(a, b) {\n    var c = ByteArray(32), d = ByteArray(32);\n    pack25519(c, a);\n    pack25519(d, b);\n    return _verify_32(c, 0, d, 0);\n}\nexport function par25519(a) {\n    var d = ByteArray(32);\n    pack25519(d, a);\n    return d[0] & 1;\n}\nexport function unpack25519(o, n) {\n    for (var i = 0; i < 16; i++)\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    o[15] &= 0x7fff;\n}\nexport function inv25519(o, i) {\n    var c = gf();\n    var a;\n    for (a = 0; a < 16; a++)\n        c[a] = i[a];\n    for (a = 253; a >= 0; a--) {\n        S(c, c);\n        if (a !== 2 && a !== 4)\n            M(c, c, i);\n    }\n    for (a = 0; a < 16; a++)\n        o[a] = c[a];\n}\n//# sourceMappingURL=curve25519.js.map","import { ByteArray, IntArray } from './array';\nimport { checkArrayTypes } from './check';\nexport function hash(msg) {\n    checkArrayTypes(msg);\n    var h = ByteArray(64 /* Hash */);\n    _hash(h, msg, msg.length);\n    return h;\n}\nexport function _hash(out, m, n) {\n    var hh = IntArray(8), hl = IntArray(8), x = ByteArray(256);\n    var i, b = n;\n    hh[0] = 0x6a09e667;\n    hh[1] = 0xbb67ae85;\n    hh[2] = 0x3c6ef372;\n    hh[3] = 0xa54ff53a;\n    hh[4] = 0x510e527f;\n    hh[5] = 0x9b05688c;\n    hh[6] = 0x1f83d9ab;\n    hh[7] = 0x5be0cd19;\n    hl[0] = 0xf3bcc908;\n    hl[1] = 0x84caa73b;\n    hl[2] = 0xfe94f82b;\n    hl[3] = 0x5f1d36f1;\n    hl[4] = 0xade682d1;\n    hl[5] = 0x2b3e6c1f;\n    hl[6] = 0xfb41bd6b;\n    hl[7] = 0x137e2179;\n    _hashblocks_hl(hh, hl, m, n);\n    n %= 128;\n    for (i = 0; i < n; i++)\n        x[i] = m[b - n + i];\n    x[n] = 128;\n    n = 256 - 128 * (n < 112 ? 1 : 0);\n    x[n - 9] = 0;\n    _ts64(x, n - 8, (b / 0x20000000) | 0, b << 3);\n    _hashblocks_hl(hh, hl, x, n);\n    for (i = 0; i < 8; i++)\n        _ts64(out, 8 * i, hh[i], hl[i]);\n    return 0;\n}\nvar _K = [\n    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\nfunction _hashblocks_hl(hh, hl, m, n) {\n    var wh = IntArray(16), wl = IntArray(16);\n    var bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;\n    var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];\n    var pos = 0;\n    while (n >= 128) {\n        for (i = 0; i < 16; i++) {\n            j = 8 * i + pos;\n            wh[i] = (m[j + 0] << 24) | (m[j + 1] << 16) | (m[j + 2] << 8) | m[j + 3];\n            wl[i] = (m[j + 4] << 24) | (m[j + 5] << 16) | (m[j + 6] << 8) | m[j + 7];\n        }\n        for (i = 0; i < 80; i++) {\n            bh0 = ah0;\n            bh1 = ah1;\n            bh2 = ah2;\n            bh3 = ah3;\n            bh4 = ah4;\n            bh5 = ah5;\n            bh6 = ah6;\n            bh7 = ah7;\n            bl0 = al0;\n            bl1 = al1;\n            bl2 = al2;\n            bl3 = al3;\n            bl4 = al4;\n            bl5 = al5;\n            bl6 = al6;\n            bl7 = al7;\n            // add\n            h = ah7;\n            l = al7;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma1\n            h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) | (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));\n            l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) | (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Ch\n            h = (ah4 & ah5) ^ (~ah4 & ah6);\n            l = (al4 & al5) ^ (~al4 & al6);\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // K\n            h = _K[i * 2];\n            l = _K[i * 2 + 1];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // w\n            h = wh[i % 16];\n            l = wl[i % 16];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            th = c & 0xffff | d << 16;\n            tl = a & 0xffff | b << 16;\n            // add\n            h = th;\n            l = tl;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma0\n            h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));\n            l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Maj\n            h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n            l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh7 = (c & 0xffff) | (d << 16);\n            bl7 = (a & 0xffff) | (b << 16);\n            // add\n            h = bh3;\n            l = bl3;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = th;\n            l = tl;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh3 = (c & 0xffff) | (d << 16);\n            bl3 = (a & 0xffff) | (b << 16);\n            ah1 = bh0;\n            ah2 = bh1;\n            ah3 = bh2;\n            ah4 = bh3;\n            ah5 = bh4;\n            ah6 = bh5;\n            ah7 = bh6;\n            ah0 = bh7;\n            al1 = bl0;\n            al2 = bl1;\n            al3 = bl2;\n            al4 = bl3;\n            al5 = bl4;\n            al6 = bl5;\n            al7 = bl6;\n            al0 = bl7;\n            if (i % 16 === 15) {\n                for (j = 0; j < 16; j++) {\n                    // add\n                    h = wh[j];\n                    l = wl[j];\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = wh[(j + 9) % 16];\n                    l = wl[(j + 9) % 16];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma0\n                    th = wh[(j + 1) % 16];\n                    tl = wl[(j + 1) % 16];\n                    h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7);\n                    l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma1\n                    th = wh[(j + 14) % 16];\n                    tl = wl[(j + 14) % 16];\n                    h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6);\n                    l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    wh[j] = (c & 0xffff) | (d << 16);\n                    wl[j] = (a & 0xffff) | (b << 16);\n                }\n            }\n        }\n        // add\n        h = ah0;\n        l = al0;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[0];\n        l = hl[0];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[0] = ah0 = (c & 0xffff) | (d << 16);\n        hl[0] = al0 = (a & 0xffff) | (b << 16);\n        h = ah1;\n        l = al1;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[1];\n        l = hl[1];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[1] = ah1 = (c & 0xffff) | (d << 16);\n        hl[1] = al1 = (a & 0xffff) | (b << 16);\n        h = ah2;\n        l = al2;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[2];\n        l = hl[2];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[2] = ah2 = (c & 0xffff) | (d << 16);\n        hl[2] = al2 = (a & 0xffff) | (b << 16);\n        h = ah3;\n        l = al3;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[3];\n        l = hl[3];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[3] = ah3 = (c & 0xffff) | (d << 16);\n        hl[3] = al3 = (a & 0xffff) | (b << 16);\n        h = ah4;\n        l = al4;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[4];\n        l = hl[4];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[4] = ah4 = (c & 0xffff) | (d << 16);\n        hl[4] = al4 = (a & 0xffff) | (b << 16);\n        h = ah5;\n        l = al5;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[5];\n        l = hl[5];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[5] = ah5 = (c & 0xffff) | (d << 16);\n        hl[5] = al5 = (a & 0xffff) | (b << 16);\n        h = ah6;\n        l = al6;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[6];\n        l = hl[6];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[6] = ah6 = (c & 0xffff) | (d << 16);\n        hl[6] = al6 = (a & 0xffff) | (b << 16);\n        h = ah7;\n        l = al7;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[7];\n        l = hl[7];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[7] = ah7 = (c & 0xffff) | (d << 16);\n        hl[7] = al7 = (a & 0xffff) | (b << 16);\n        pos += 128;\n        n -= 128;\n    }\n    return n;\n}\nfunction _ts64(x, i, h, l) {\n    x[i] = (h >> 24) & 0xff;\n    x[i + 1] = (h >> 16) & 0xff;\n    x[i + 2] = (h >> 8) & 0xff;\n    x[i + 3] = h & 0xff;\n    x[i + 4] = (l >> 24) & 0xff;\n    x[i + 5] = (l >> 16) & 0xff;\n    x[i + 6] = (l >> 8) & 0xff;\n    x[i + 7] = l & 0xff;\n}\n//# sourceMappingURL=hash.js.map","export function checkLengths(k, n) {\n    if (k.length != 32 /* Key */)\n        throw new Error('bad key size');\n    if (n.length != 24 /* Nonce */)\n        throw new Error('bad nonce size');\n}\nexport function checkBoxLengths(pk, sk) {\n    if (pk.length != 32 /* PublicKey */)\n        throw new Error('bad public key size');\n    if (sk.length != 32 /* SecretKey */)\n        throw new Error('bad secret key size');\n}\nexport function checkArrayTypes() {\n    var arrays = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arrays[_i] = arguments[_i];\n    }\n    for (var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++) {\n        var array = arrays_1[_a];\n        if (!(array instanceof Uint8Array)) {\n            throw new TypeError('unexpected type, use ByteArray');\n        }\n    }\n}\n//# sourceMappingURL=check.js.map","import { ByteArray, NumArray } from './array';\nimport { _verify_32 } from './verify';\nimport { gf, gf0, gf1, D2, A, D, S, M, X, Y, Z, I } from './core';\nimport { _randomBytes } from './random';\nimport { set25519, sel25519, inv25519, pack25519, unpack25519, par25519, neq25519 } from './curve25519';\nimport { _hash } from './hash';\nimport { checkArrayTypes } from './check';\nexport function sign(msg, secretKey) {\n    checkArrayTypes(msg, secretKey);\n    if (secretKey.length !== 64 /* SecretKey */)\n        throw new Error('bad secret key size');\n    var signedMsg = ByteArray(64 /* Signature */ + msg.length);\n    _sign(signedMsg, msg, msg.length, secretKey);\n    return signedMsg;\n}\nexport function sign_open(signedMsg, publicKey) {\n    checkArrayTypes(signedMsg, publicKey);\n    if (publicKey.length !== 32 /* PublicKey */)\n        throw new Error('bad public key size');\n    var tmp = ByteArray(signedMsg.length);\n    var mlen = _sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n    if (mlen < 0)\n        return;\n    var m = ByteArray(mlen);\n    for (var i = 0; i < m.length; i++)\n        m[i] = tmp[i];\n    return m;\n}\nexport function sign_detached(msg, secretKey) {\n    var signedMsg = sign(msg, secretKey);\n    var sig = ByteArray(64 /* Signature */);\n    for (var i = 0; i < sig.length; i++)\n        sig[i] = signedMsg[i];\n    return sig;\n}\nexport function sign_detached_verify(msg, sig, publicKey) {\n    checkArrayTypes(msg, sig, publicKey);\n    if (sig.length !== 64 /* Signature */)\n        throw new Error('bad signature size');\n    if (publicKey.length !== 32 /* PublicKey */)\n        throw new Error('bad public key size');\n    var sm = ByteArray(64 /* Signature */ + msg.length);\n    var m = ByteArray(64 /* Signature */ + msg.length);\n    var i;\n    for (i = 0; i < 64 /* Signature */; i++)\n        sm[i] = sig[i];\n    for (i = 0; i < msg.length; i++)\n        sm[i + 64 /* Signature */] = msg[i];\n    return _sign_open(m, sm, sm.length, publicKey) >= 0;\n}\nexport function sign_keyPair() {\n    var pk = ByteArray(32 /* PublicKey */);\n    var sk = ByteArray(64 /* SecretKey */);\n    _sign_keypair(pk, sk, false);\n    return { publicKey: pk, secretKey: sk };\n}\nexport function sign_keyPair_fromSecretKey(secretKey) {\n    checkArrayTypes(secretKey);\n    if (secretKey.length !== 64 /* SecretKey */)\n        throw new Error('bad secret key size');\n    var pk = ByteArray(32 /* PublicKey */);\n    for (var i = 0; i < pk.length; i++)\n        pk[i] = secretKey[32 + i];\n    return { publicKey: pk, secretKey: ByteArray(secretKey) };\n}\nexport function sign_keyPair_fromSeed(seed) {\n    checkArrayTypes(seed);\n    if (seed.length !== 32 /* Seed */)\n        throw new Error('bad seed size');\n    var pk = ByteArray(32 /* PublicKey */);\n    var sk = ByteArray(64 /* SecretKey */);\n    for (var i = 0; i < 32; i++)\n        sk[i] = seed[i];\n    _sign_keypair(pk, sk, true);\n    return { publicKey: pk, secretKey: sk };\n}\n// low level\nfunction _sign_keypair(pk, sk, seeded) {\n    var d = ByteArray(64);\n    var p = [gf(), gf(), gf(), gf()];\n    var i;\n    if (!seeded)\n        _randomBytes(sk, 32);\n    _hash(d, sk, 32);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    scalarbase(p, d);\n    pack(pk, p);\n    for (i = 0; i < 32; i++)\n        sk[i + 32] = pk[i];\n    return 0;\n}\n// Note: difference from C - smlen returned, not passed as argument.\nfunction _sign(sm, m, n, sk) {\n    var d = ByteArray(64), h = ByteArray(64), r = ByteArray(64);\n    var x = NumArray(64);\n    var p = [gf(), gf(), gf(), gf()];\n    var i, j;\n    _hash(d, sk, 32);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    var smlen = n + 64;\n    for (i = 0; i < n; i++)\n        sm[64 + i] = m[i];\n    for (i = 0; i < 32; i++)\n        sm[32 + i] = d[32 + i];\n    _hash(r, sm.subarray(32), n + 32);\n    reduce(r);\n    scalarbase(p, r);\n    pack(sm, p);\n    for (i = 32; i < 64; i++)\n        sm[i] = sk[i];\n    _hash(h, sm, n + 64);\n    reduce(h);\n    for (i = 0; i < 64; i++)\n        x[i] = 0;\n    for (i = 0; i < 32; i++)\n        x[i] = r[i];\n    for (i = 0; i < 32; i++) {\n        for (j = 0; j < 32; j++) {\n            x[i + j] += h[i] * d[j];\n        }\n    }\n    modL(sm.subarray(32), x);\n    return smlen;\n}\nfunction _sign_open(m, sm, n, pk) {\n    var t = ByteArray(32), h = ByteArray(64);\n    var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];\n    var i, mlen;\n    mlen = -1;\n    if (n < 64 || unpackneg(q, pk))\n        return -1;\n    for (i = 0; i < n; i++)\n        m[i] = sm[i];\n    for (i = 0; i < 32; i++)\n        m[i + 32] = pk[i];\n    _hash(h, m, n);\n    reduce(h);\n    scalarmult(p, q, h);\n    scalarbase(q, sm.subarray(32));\n    add(p, q);\n    pack(t, p);\n    n -= 64;\n    if (_verify_32(sm, 0, t, 0)) {\n        for (i = 0; i < n; i++)\n            m[i] = 0;\n        return -1;\n    }\n    for (i = 0; i < n; i++)\n        m[i] = sm[i + 64];\n    mlen = n;\n    return mlen;\n}\nexport function scalarbase(p, s) {\n    var q = [gf(), gf(), gf(), gf()];\n    set25519(q[0], X);\n    set25519(q[1], Y);\n    set25519(q[2], gf1);\n    M(q[3], X, Y);\n    scalarmult(p, q, s);\n}\nexport function scalarmult(p, q, s) {\n    var b, i;\n    set25519(p[0], gf0);\n    set25519(p[1], gf1);\n    set25519(p[2], gf1);\n    set25519(p[3], gf0);\n    for (i = 255; i >= 0; --i) {\n        b = (s[(i / 8) | 0] >> (i & 7)) & 1;\n        cswap(p, q, b);\n        add(q, p);\n        add(p, p);\n        cswap(p, q, b);\n    }\n}\nfunction pack(r, p) {\n    var tx = gf(), ty = gf(), zi = gf();\n    inv25519(zi, p[2]);\n    M(tx, p[0], zi);\n    M(ty, p[1], zi);\n    pack25519(r, ty);\n    r[31] ^= par25519(tx) << 7;\n}\nfunction unpackneg(r, p) {\n    var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();\n    set25519(r[2], gf1);\n    unpack25519(r[1], p);\n    S(num, r[1]);\n    M(den, num, D);\n    Z(num, num, r[2]);\n    A(den, r[2], den);\n    S(den2, den);\n    S(den4, den2);\n    M(den6, den4, den2);\n    M(t, den6, num);\n    M(t, t, den);\n    pow2523(t, t);\n    M(t, t, num);\n    M(t, t, den);\n    M(t, t, den);\n    M(r[0], t, den);\n    S(chk, r[0]);\n    M(chk, chk, den);\n    if (neq25519(chk, num))\n        M(r[0], r[0], I);\n    S(chk, r[0]);\n    M(chk, chk, den);\n    if (neq25519(chk, num))\n        return -1;\n    if (par25519(r[0]) === (p[31] >> 7))\n        Z(r[0], gf0, r[0]);\n    M(r[3], r[0], r[1]);\n    return 0;\n}\nfunction reduce(r) {\n    var x = NumArray(64);\n    var i;\n    for (i = 0; i < 64; i++)\n        x[i] = r[i];\n    for (i = 0; i < 64; i++)\n        r[i] = 0;\n    modL(r, x);\n}\nvar L = NumArray([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\nfunction modL(r, x) {\n    var carry, i, j, k;\n    for (i = 63; i >= 32; --i) {\n        carry = 0;\n        for (j = i - 32, k = i - 12; j < k; ++j) {\n            x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n            carry = (x[j] + 128) >> 8;\n            x[j] -= carry * 256;\n        }\n        x[j] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for (j = 0; j < 32; j++) {\n        x[j] += carry - (x[31] >> 4) * L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n    }\n    for (j = 0; j < 32; j++)\n        x[j] -= carry * L[j];\n    for (i = 0; i < 32; i++) {\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] & 255;\n    }\n}\nfunction add(p, q) {\n    var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n    Z(a, p[1], p[0]);\n    Z(t, q[1], q[0]);\n    M(a, a, t);\n    A(b, p[0], p[1]);\n    A(t, q[0], q[1]);\n    M(b, b, t);\n    M(c, p[3], q[3]);\n    M(c, c, D2);\n    M(d, p[2], q[2]);\n    A(d, d, d);\n    Z(e, b, a);\n    Z(f, d, c);\n    A(g, d, c);\n    A(h, b, a);\n    M(p[0], e, f);\n    M(p[1], h, g);\n    M(p[2], g, f);\n    M(p[3], e, h);\n}\nfunction cswap(p, q, b) {\n    for (var i = 0; i < 4; i++) {\n        sel25519(p[i], q[i], b);\n    }\n}\nfunction pow2523(o, i) {\n    var c = gf();\n    var a;\n    for (a = 0; a < 16; a++)\n        c[a] = i[a];\n    for (a = 250; a >= 0; a--) {\n        S(c, c);\n        if (a !== 1)\n            M(c, c, i);\n    }\n    for (a = 0; a < 16; a++)\n        o[a] = c[a];\n}\n//# sourceMappingURL=sign.js.map","import * as CryptoJS from 'crypto-js';\nimport { isEmpty } from 'lodash';\nimport { sign_detached, sign_keyPair_fromSeed } from 'tweetnacl-ts/es/sign';\n\nclass CoboV2Custody {\n  privateKey: string;\n\n  constructor(privateKey: string) {\n    this.privateKey = privateKey;\n  }\n\n  public sign(message: string) {\n    const publicKey = this.getPublicKey();\n    const privateKeyBytes = new Uint8Array(Buffer.from(this.privateKey + publicKey, 'hex'));\n    const messageBytes = new Uint8Array(Buffer.from(message, 'hex'));\n    const signature = sign_detached(messageBytes, privateKeyBytes);\n    return Buffer.from(signature).toString('hex');\n  }\n\n  public getPublicKey() {\n    const privateKeyBytes = new Uint8Array(Buffer.from(this.privateKey, 'hex'));\n    const publicKey = sign_keyPair_fromSeed(privateKeyBytes).publicKey;\n    return Buffer.from(publicKey).toString('hex');\n  }\n}\n\ntype CoboV2CustodyKeys = {\n  'Biz-Api-Key': string;\n  'Biz-Api-Nonce': string;\n  'Biz-Api-Signature': string;\n};\n\nexport function getCoboV2CustodyGeneratedKeys(\n  secretKey: string,\n  method: string | undefined,\n  path: string,\n  body: unknown,\n  query: Record<string, unknown>\n): CoboV2CustodyKeys {\n  const nonce = String(new Date().getTime());\n  const queryString = Object.entries(query)\n    .map(([key, value]) => {\n      if (typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'string')\n        return;\n      return `${key}=${encodeURIComponent(value)}`;\n    })\n    .join('&');\n\n  const strToSign = [\n    method?.toUpperCase(),\n    `/v2${path}`,\n    nonce,\n    queryString,\n    isEmpty(body) ? '' : JSON.stringify(body),\n  ].join('|');\n\n  const hash2String = CryptoJS.SHA256(CryptoJS.SHA256(strToSign)).toString();\n\n  const coboV2Custody = new CoboV2Custody(secretKey);\n\n  return {\n    'Biz-Api-Key': coboV2Custody.getPublicKey(),\n    'Biz-Api-Nonce': nonce,\n    'Biz-Api-Signature': coboV2Custody.sign(hash2String),\n  };\n}\n"],"names":["baseKeys","__webpack_require__","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","objectProto","prototype","module","exports","value","splice","length","tag","size","key","call","array_ByteArray","n","Uint8Array","IntArray","Int32Array","NumArray","Float64Array","core_gf","init","r","i","_9","core_gf0","core_gf1","D2","X","Y","core_A","o","a","b","core_Z","core_M","v","c","t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","Math","floor","curve25519_set25519","car25519","sel25519","p","q","t","pack25519","j","m","hash_hash","out","hh","hl","x","_hashblocks_hl","_ts64","_K","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","th","tl","h","l","d","wh","wl","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","al0","al1","al2","al3","al4","al5","al6","al7","pos","check_checkArrayTypes","arrays","_i","arguments","_a","arrays_1","array","scalarbase","s","scalarmult","cswap","add","pack","tx","ty","zi","inv25519","curve25519_par25519","reduce","modL","L","carry","k","e","f","g","CoboV2Custody","constructor","privateKey","sign","message","publicKey","getPublicKey","privateKeyBytes","Buffer","from","signature","sign_detached","msg","secretKey","signedMsg","_sign","sm","sk","subarray","sig","toString","sign_keyPair_fromSeed","seed","pk","_sign_keypair","seeded","_randomBytes","crypto","getRandomValues","min","getCoboV2CustodyGeneratedKeys","method","path","body","query","nonce","String","Date","getTime","queryString","Object","entries","map","encodeURIComponent","join","strToSign","toUpperCase","isEmpty","JSON","stringify","hash2String","CryptoJS","coboV2Custody"],"sourceRoot":""}